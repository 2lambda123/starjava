package uk.ac.starlink.ttools.cea;

import java.io.PrintStream;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import uk.ac.starlink.task.Task;
import uk.ac.starlink.ttools.LoadException;
import uk.ac.starlink.ttools.ObjectFactory;
import uk.ac.starlink.ttools.Stilts;
import uk.ac.starlink.util.XmlWriter;

/**
 * Writes an application description file suitable for use with
 * the AstroGrid Common Execution Architecture.
 *
 * <p>This makes a best guess at providing a CEA-friendly interface to
 * the capabilities of STILTS.  Call the {@link #main} method with 
 * the <code>-help</code> flag for a usage message.
 *
 * @author   Mark Taylor
 * @since    17 March 2006
 */
public class CeaWriter extends XmlWriter {

    private final CeaTask[] tasks_;
    private final String appPath_;
    private final String ceaAppName_;
    private String sun256url_ = "http://www.starlink.ac.uk/stilts/sun256/";

    /**
     * Constructs a CeaWriter.
     *
     * @param   out  destination stream for XML
     * @param   tasks   array of CeaTask objects whose usage will be 
     *          provided in the output application definition file
     * @param   appPath  path at which the stilts script can be found
     * @param   ceaAppName  name by which the described application
     *          will be known to the CEA
     */
    private CeaWriter( PrintStream out, CeaTask[] tasks, String appPath,
                       String ceaAppName ) {
        super( out );
        tasks_ = tasks;
        appPath_ = appPath;
        ceaAppName_ = ceaAppName;
    }

    /**
     * Writes the application description to the output stream.
     */
    private void writeConfig() {

        /* Intro. */
        writeDeclaration();
        println( "<!-- Automatically generated by " + getClass().getName() 
             + "\n !   " + new Date()
             + "\n !-->" );
        int startLevel = getLevel();

        startElement( "CommandLineExecutionControllerConfig",
            formatAttribute( "xmlns", 
                             "http://www.astrogrid.org/schema/" +
                             "CEAImplementation/v1" )
          + formatAttribute( "xmlns:ceab",
                             "http://www.astrogrid.org/schema/" +
                             "CommonExecutionArchitectureBase/v1" )
          + formatAttribute( "xmlns:agpd",
                             "http://www.astrogrid.org/schema/" +
                             "AGParameterDefinition/v1" )
          + formatAttribute( "xmlns:xsi",
                             "http://www.w3.org/2001/XMLSchema-instance" )
          + formatAttribute( "xsi:schemaLocation",
                             "http://www.astrogrid.org/schema/" +
                             "CEAImplementation/v1 " +
                             "./src/workflow-objects/schema/" +
                             "CEAImplementation.xsd" ) );
        startElement( "Application",
                      formatAttribute( "name", ceaAppName_ ) );

        /* Write all the parameters for all tasks.  They are given 
         * reference names qualified by their task names so that they can
         * be referenced separately in their respective interfaces later. */
        startElement( "ceab:Parameters" );
        for ( int i = 0; i < tasks_.length; i++ ) {
            writeParameters( tasks_[ i ] );
        }
        endElement( "ceab:Parameters" );

        /* Write a separate interface for each task. */
        startElement( "Interfaces",
                      formatAttribute( "xmlns",
                                       "http://www.astrogrid.org/schema/"
                                     + "CommonExecutionArchitectureBase/v1" ) );
        for ( int i = 0; i < tasks_.length; i++ ) {
            writeInterface( tasks_[ i ] );
        }
        endElement( "Interfaces" );

        /* Write the location of the executable. */
        addElement( "ExecutionPath", "", appPath_ );

        /* Write description matter.  This includes short text and a link
         * for each of the separate tasks (CEA interfaces). */
        startElement( "Description" );
        println( "STILTS is a package which provides a number of table " +
                 "manipulation functions." );
        println( "The following tasks (profiles) are provided: " );
        startElement( "dl" );
        for ( int i = 0; i < tasks_.length; i++ ) {
            CeaTask task = tasks_[ i ];
            String name = task.getName();
            startElement( "dt" );
            addElement( "a",
                        formatAttribute( "href", sun256url_ + name + ".html" ),
                        name );
            endElement( "dt" );
            addElement( "dd", "", tasks_[ i ].getDescription() );
        }
        endElement( "dl" );
        endElement( "Description" );
        addElement( "ReferenceURL", "", sun256url_ );

        /* Outro. */
        endElement( "Application" );
        endElement( "CommandLineExecutionControllerConfig" );
        assert getLevel() == startLevel : "Mismatched levels";
    }

    /**
     * Writes parameter description elements for each parameter belonging
     * to a given task.
     *
     * @param   task   task
     */
    private void writeParameters( CeaTask task ) {
        CeaParameter[] params = task.getParameters();

        /* Write a CEA parameter definition representing the task itself.
         * This is identified only by its position on the command line,
         * and is only allowed to assume a single, fixed value. */
        startElement( "CmdLineParameterDefn",
                      formatAttribute( "name", getParamRef( task, null ) )
                    + formatAttribute( "commandPosition", "1" )
                    + formatAttribute( "fileRef", "false" )
                    + formatAttribute( "type", "text" ) );
        addElement( "agpd:UI_Name", "", "task" );
        addElement( "agpd:UI_Description", "", "Task name - fixed" );
        addElement( "agpd:DefaultValue", "", task.getName() );
        startElement( "agpd:OptionList" );
        addElement( "agpd:OptionValue", "", task.getName() );
        endElement( "agpd:OptionList" );
        endElement( "CmdLineParameterDefn" );

        /* Write CEA parameter definitions for each of the task's parameters. */
        for ( int iParam = 0; iParam < params.length; iParam++ ) {
            CeaParameter param = params[ iParam ];
            startElement( "CmdLineParameterDefn",
                          formatAttribute( "name", getParamRef( task, param ) )
                        + formatAttribute( "commandSwitch", param.getName() )
                        + formatAttribute( "type", param.getType() )
                        + formatAttribute( "fileRef", param.isRef() ? "true"
                                                                    : "false" )
                        + formatAttribute( "switchType", "keyword" ) );
            addElement( "agpd:UI_Name", "", param.getName() );
            addElement( "agpd:UI_Description", "", param.getDescription() );
            String dflt = param.getDefault();
            if ( dflt != null && dflt.trim().length() > 0 ) {
                addElement( "agpd:DefaultValue", "", dflt );
            }
            String[] options = param.getOptions();
            if ( options != null && options.length > 0 ) {
                startElement( "agpd:OptionList" );
                for ( int iOpt = 0; iOpt < options.length; iOpt++ ) {
                    addElement( "agpd:OptionValue", "", options[ iOpt ] );
                }
                endElement( "agpd:OptionList" );
            }
            endElement( "CmdLineParameterDefn" );
        }
    }

    /**
     * Writes the Interface element used for invoking a given task.
     *
     * @param   task  task
     */
    private void writeInterface( CeaTask task ) {

        /* Intro for an interface representing a STILTS task. */
        CeaParameter[] params = task.getParameters();
        startElement( "Interface", formatAttribute( "name", task.getName() ) );
        startElement( "input" );

        /* Write a CEA parameter reference for the parameter representing
         * the task itself. */
        addElement( "pref",
                    formatAttribute( "ref", getParamRef( task, null ) ),
                    "" );

        /* Write CEA parameter references for each of the non-output 
         * parameters used by this task. */
        for ( int iParam = 0; iParam < params.length; iParam++ ) {
            CeaParameter param = params[ iParam ];
            if ( ! param.isOutput() ) {
                String atts = formatAttribute( "ref",
                                               getParamRef( task, param ) );
                if ( param.isMulti() ) {
                    atts = atts + formatAttribute( "minoccurs", "0" )
                                + formatAttribute( "maxoccurs", "0" );
                }
                else if ( param.isNullPermitted() ) {
                    atts = atts + formatAttribute( "minoccurs", "0" );
                }
                addElement( "pref", atts, "" );
            }
        }
        endElement( "input" );

        /* Write CEA parameter references for each of the output parameters
         * used by this task. */
        startElement( "output" );
        for ( int iParam = 0; iParam < params.length; iParam++ ) {
            CeaParameter param = params[ iParam ];
            if ( param.isOutput() ) {
                String atts = formatAttribute( "ref",
                                               getParamRef( task, param ) );
                addElement( "pref", atts, "" );
            }
        }
        endElement( "output" );

        /* Outro. */
        endElement( "Interface" );
    }

    /**
     * Returns a unique key relating to a given task and one of its parameters.
     * The result is not primarily designed to be human-readable.
     *
     * @param   task   task
     * @param   param   parameter - if null, the returned reference describes
     *          the task itself
     */
    private static String getParamRef( CeaTask task, CeaParameter param ) {
        return param == null 
             ? "TASK-" + task.getName()
             : task.getName() + "_" + param.getName();
    }

    /**
     * Returns an array of the tasks which should form part of the CEA
     * STILTS interface.  The list of tasks and their parameters etc
     * may (should) be doctored for use which may be different from their
     * use on the command line as appropriate.
     *
     * @return   task array
     */
    private static CeaTask[] getTasks() throws LoadException {
        ObjectFactory taskFactory = Stilts.getTaskFactory();
        List appList = new ArrayList();

        CeaTask tcopy =
            new CeaTask( (Task) taskFactory.createObject( "tcopy" ),
                         "tcopy",
                         "Translates tables between formats." );
        appList.add( tcopy );

        CeaTask tpipe =
            new CeaTask( (Task) taskFactory.createObject( "tpipe" ),
                         "tpipe",
                         "Performs flexible pipeline processing on tables." );
        tpipe.removeParameter( "script" );
        tpipe.removeParameter( "istream" );
        appList.add( tpipe );

        CeaTask tmatch2 =
            new CeaTask( (Task) taskFactory.createObject( "tmatch2" ),
                         "tmatch2",
                         "Performs flexible crossmatching on a pair "
                       + "of tables." );
        appList.add( tmatch2 );
        tmatch2.removeParameter( "omode" );

        CeaTask votcopy =
            new CeaTask( (Task) taskFactory.createObject( "votcopy" ),
                         "votcopy",
                         "Transforms VOTables between different encodings" );
        appList.add( votcopy );

        return (CeaTask[]) appList.toArray( new CeaTask[ 0 ] );
    }

    /**
     * Main method.  Invoked to write STILTS application description to 
     * standard output.
     *
     * @param   args  arguments - invoke with "-help" for a usage messege
     */
    public static void main( String[] args ) throws LoadException {
        String usage = "\n   Usage: " + CeaWriter.class.getName()
                     + " [-help]"
                     + " -path stilts-path"
                     + " -name cea-app-name"
                     + "\n";

        /* Process arguments. */
        List argList = new ArrayList( Arrays.asList( args ) );
        String appPath = null;
        String appName = "stilts";
        for ( Iterator it = argList.iterator(); it.hasNext(); ) {
            String arg = (String) it.next();
            if ( arg.equals( "-path" ) && it.hasNext() ) {
                it.remove();
                appPath = (String) it.next();
                it.remove();
            }
            if ( arg.equals( "-appname" ) && it.hasNext() ) {
                it.remove();
                appName = (String) it.next();
                it.remove();
            }
            else if ( arg.startsWith( "-h" ) ) {
                it.remove();
                System.out.println( usage );
                return;
            }
        }

        /* Validate arguments. */
        if ( ! argList.isEmpty() || appPath == null || appName == null ) {
            System.err.println( usage );
            System.exit( 1 );
        }

        /* Do work. */
        new CeaWriter( System.out, getTasks(), appPath, appName ).writeConfig();
    }
}
