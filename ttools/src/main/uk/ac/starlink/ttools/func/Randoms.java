// The doc comments in this class are processed to produce user-visible
// documentation as part of the package build process.  For this reason
// care should be taken to make the doc comment style comprehensible,
// consistent, concise, and not over-technical.

package uk.ac.starlink.ttools.func;

import java.util.Random;

/**
 * Functions concerned with random number generation.
 *
 * <p>All these functions require a <em>seed</em> value which determines
 * the value of the result; the same seed always leads to the same output,
 * but there is not supposed to be any obvious relationship betwen seed
 * and output.
 * An explicit seed is required because table cells are in general
 * calculated on demand, and so that a given cell always has the same value.
 *
 * <p>In most cases, the row index, available as the special token
 * <code>$0</code>, is a suitable value for the seed.
 *
 * <p>If several different random values are required in the same table row,
 * one way is to supply a different row-based seed for each one,
 * e.g. <code>random(2*$0)</code> and <code>random(2*$0+1)</code>.
 * However, this does tend to introduce a correlation between the random
 * values in the same row, so a better (though in some cases slower) solution
 * is to use one of the array-generating functions, e.g.
 * <code>randomArray($0,2)[0]</code> and <code>randomArray($0,2)[1]</code>.
 *
 * <p>No guarantees are made about the quality of the random numbers
 * generated by these functions.
 *
 * @author   Mark Taylor
 * @since    19 Jan 2022
 */
public class Randoms {

    /**
     * Private constructor prevents instantiation.
     */
    private Randoms() {
    }

    /**
     * Generates a pseudo-random number
     * sampled from a uniform distribution between 0 and 1.
     *
     * @param   seed  seed value, typically row index "<code>$0</code>"
     * @return  random number between 0 and 1
     */
    public static double random( long seed ) {
        return createRandom( seed ).nextDouble();
    }

    /**
     * Generates a pseudo-random number
     * sampled from a Gaussian distribution
     * with mean of 0.0 and standard deviation of 1.0.
     *
     * @param   seed  seed value, typically row index "<code>$0</code>"
     * @return  random number
     */
    public static double randomGaussian( long seed ) {
        return createRandom( seed ).nextGaussian();
    }

    /**
     * Generates an array of pseudo-random numbers
     * sampled from a uniform distribution between 0 and 1.
     *
     * @param   seed  seed value, typically row index "<code>$0</code>"
     * @param   n    size of output array
     * @return  <code>n</code>-element array of random numbers between 0 and 1
     */
    public static double[] randomArray( long seed, int n ) {
        Random rnd = createRandom( seed );
        double[] out = new double[ n ];
        for ( int i = 0; i < n; i++ ) {
            out[ i ] = rnd.nextDouble();
        }
        return out;
    }

    /**
     * Generates an array of pseudo-random numbers
     * sampled from a Gaussian distribution
     * with mean of 0.0 and standard deviation of 1.0.
     *
     * @param   seed  seed value, typically row index "<code>$0</code>"
     * @param   n    size of output array
     * @return  <code>n</code>-element array of random numbers
     */
    public static double[] randomGaussianArray( long seed, int n ) {
        Random rnd = createRandom( seed );
        double[] out = new double[ n ];
        for ( int i = 0; i < n; i++ ) {
            out[ i ] = rnd.nextGaussian();
        }
        return out;
    }

    /**
     * Creates a <code>java.util.Random</code> object seeded from
     * a supplied value that is typically a row index.
     * The supplied seed is scrambled before being fed to the
     * Random constructor.
     *
     * @param   seed  seed value, typically row index "<code>$0</code>"
     * @return  seeded Random object
     */
    public static Random createRandom( long seed ) {

        /* The form of this scrambling is the Linear Congruential Generator
         * that is used by Donald Knuth's MMIX (according to
         * https://en.wikipedia.org/wiki/Linear_congruential_generator).
         * Knuth warns about seeding RNGs with the output from other RNGs,
         * but using row indices (0, 1, 2, ...) directly as java.util.Random
         * seeds doesn't give very good results, and the results from
         * doing it like this don't look too bad. */
        long scramble = 6364136223846793005L * seed + 1442695040888963407L;
        return new Random( scramble );
    }
}
