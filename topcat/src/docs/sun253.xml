<?xml version='1.0'?>
<!DOCTYPE sun SYSTEM "docs.dtd" [

  <!-- Import entity definitions for icons used by the TOPCAT application. -->
  <!ENTITY % image-defs SYSTEM "image.defs">
  %image-defs;

  <!-- Define illustrations -->
  <!ENTITY figs '../figures/'>
  <!ENTITY FIG.ControlWindow '&figs;ControlWindow.gif'>
  <!ENTITY FIG.ColumnInfoWindow '&figs;ColumnInfoWindow.gif'>
  <!ENTITY FIG.JTable '&figs;JTable.gif'>
  <!ENTITY FIG.ParameterWindow '&figs;ParameterWindow.gif'>
  <!ENTITY FIG.TableViewerWindow '&figs;TableViewerWindow.gif'>
  <!ENTITY FIG.SubsetWindow '&figs;SubsetWindow.gif'>
  <!ENTITY FIG.StatsWindow '&figs;StatsWindow.gif'>
  <!ENTITY FIG.PlotWindow '&figs;PlotWindow.gif'>
  <!ENTITY FIG.LoadQueryWindow '&figs;LoadQueryWindow.gif'>
  <!ENTITY FIG.JFileChooserLoad '&figs;JFileChooserLoad.gif'>
  <!ENTITY FIG.StarTableNodeChooser '&figs;StarTableNodeChooser.gif'>
  <!ENTITY FIG.SQLReadDialog '&figs;SQLReadDialog.gif'>
  <!ENTITY FIG.StarTableSaver '&figs;StarTableSaver.gif'>
  <!ENTITY FIG.JFileChooserSave '&figs;JFileChooserSave.gif'>
  <!ENTITY FIG.SQLWriteDialog '&figs;SQLWriteDialog.gif'>
  <!ENTITY FIG.ConcatWindow '&figs;ConcatWindow.gif'>
  <!ENTITY FIG.MatchWindow '&figs;MatchWindow.gif'>
  <!ENTITY FIG.MatchWindow1 '&figs;MatchWindow1.gif'>
  <!ENTITY FIG.HelpWindow '&figs;HelpWindow.gif'>
  <!ENTITY FIG.SyntheticColumnQueryWindow 
           '&figs;SyntheticColumnQueryWindow.gif'>
  <!ENTITY FIG.SyntheticSubsetQueryWindow 
           '&figs;SyntheticSubsetQueryWindow.gif'>
  <!ENTITY FIG.MethodWindow '&figs;MethodWindow.gif'>

  <!-- Define external URLs. -->
  <!ENTITY URL.VOTABLE "http://www.ivoa.net/Documents/latest/VOT.html">
  <!ENTITY URL.J2SE_JAVADOCS "http://java.sun.com/j2se/1.4/docs/api/">
  <!ENTITY SUN.252 "<webref url='http://www.starlink.ac.uk/stil/sun252/'
                            >SUN/252</webref>">
  <!ENTITY SUN.253 "<webref url='http://www.starlink.ac.uk/topcat/sun253/'
                            >SUN/253</webref>">
]>

<sun>

<docinfo>

<title>TOPCAT - Tool for OPerations on Catalogues And Tables</title>

<authorlist>
<author id="mbt" 
        email="m.b.taylor@bristol.ac.uk"
        webpage="http://www.star.bristol.ac.uk/~mbt/"
        affiliation="Starlink, University of Bristol"
        >Mark Taylor</author>
</authorlist>

<docnumber>253</docnumber>

<docdate>23 April 2004</docdate>

<contactlist>
<contact>TOPCAT web page:
         <webref url="http://www.starlink.ac.uk/topcat/"/></contact>
<contact>Author email:
         <webref url="mailto:m.b.taylor@bristol.ac.uk"
                 >m.b.taylor@bristol.ac.uk</webref></contact>
<contact>Starlink: <webref url="http://www.starlink.ac.uk/"/></contact>
</contactlist>

</docinfo>

<!-- ............................................................... -->
<docbody>

<abstract>
<px>TOPCAT is an interactive graphical viewer and editor for tabular data.
It has been designed for use with astronomical tables such as object 
catalogues, but is not restricted to astronomical applications.
It understands a number of different astronomically important formats,
and more formats can be added.
</px>

<px>It offers a variety of ways to view and analyse the data,
including a browser for the cell data themselves, 
viewers for information about table and column metadata,
and facilities for plotting, calculating statistics and joining tables
using flexible matching algorithms.
Using a powerful and extensible Java-based expression language
new columns can be defined and row subsets selected for separate analysis.
Table data and metadata can be edited and the resulting modified table
can be written out in a wide range of output formats.
</px>

<px>TOPCAT is written in pure Java and available under the 
GNU General Public Licence.  Its underlying table processing facilities
are provided by the Starlink Tables Infrastructure Library.
</px>

</abstract>

<sect id="intro">
<subhead><title>Introduction</title></subhead>

<p>TOPCAT is a graphical program which can view, analyse, combine, edit and
write out tables.  A table is, roughly, anything with columns and rows;
each column contains objects of the same type
(for instance floating point numbers) and each row has an entry for
each of the columns (though some entries might be blank).
A common astronomical example of a table is an object catalogue.
</p>

<p>TOPCAT can read in tables in a number of formats, allow you to
inspect and manipulate them in a number of ways, and if you have
edited them optionally write them out in the modified state for later use,
again in a variety of formats.
Here is a summary of its main capabilities:
<ul>
<li>View/edit table data in a scrollable browser</li>
<li>View/edit table and column metadata</li>
<li>Re-order and hide/reveal columns</li>
<li>Insert 'synthetic' columns defined by algebraic expression</li>
<li>Sort rows on the values in a given column</li>
<li>Define row subsets in various ways</li>
<li>Plot columns against each other, distinguishing different subsets</li>
<li>Calculate statistics on each column for some or all rows</li>
<li>Perform flexible matching of rows in the same or different tables</li>
<li>Concatenate the rows of existing tables to create new ones</li>
<li>Write modified tables out in original or different format</li>
</ul>
</p>

<p>The general idea of the program is quite straightforward.
At any time, it has a list of tables it knows about - these are 
displayed in the <ref id="ControlWindow">Control Window</ref> which 
is the first thing you see when you start up the program.
You can add to the list by <ref id="LoadQueryWindow">loading tables in</ref>,
or by some actions which create new tables from the existing ones.
When you select a table in the list by clicking on it, 
you can see general information
about it in the control window, and you can also open more specialised 
<ref id="views">view windows</ref> which allow you to 
inspect it in more detail or edit it.
Some of the actions you can take, 
such as changing the current 
<ref id="order">Sort Order</ref>,
<ref id="subsets">Row Subset</ref> or
<ref id="columns">Column Set</ref>
change the <ref id="apparent">Apparent Table</ref>, which is a view
of the table used for things such as saving it and performing row matches.
Any changes you make do not modify the tables on disk (or wherever they
came from), but if you want to save the changes you have made,
you can <ref id="StarTableSaver">write</ref> 
the modified table(s) to a new location.
</p>

<p>The main body of this document explains these ideas and capabilities
in more detail; 
<ref id="windows"/> gives a full description of all the windows which
form the application, and
<ref id="tablecopy"/> describes a little command-line utility 
called <label>tablecopy</label> which can copy tables between formats.
While the program is running, this document is available via the
online help system.
</p>

<p>Recent news about the program can be found on the
<webref url="http://www.starlink.ac.uk/topcat/">TOPCAT web page</webref>.
It has been written by the
<webref url="http://www.starlink.ac.uk/">Starlink</webref> project.
The underlying table handling facilities are supplied by
the Starlink Tables Infrastructure Library
(<webref url="http://www.starlink.ac.uk/stil/">STIL</webref>),
which is documented more fully in &SUN.252;.
It is written in pure Java (the current version requires J2SE1.4)
which makes it highly portable (it can run on any machine which has
a suitable Java installation),
and is available under the terms of the 
GNU <webref url="http://www.gnu.org/copyleft/gpl.html"
            >General Public License</webref>.
</p>

</sect>


<sect id="apparent">
<subhead><title>Apparent Table</title></subhead>

<p>The <label>Apparent Table</label> 
is a particular view of a table which can be
influenced by some of the viewing controls.
</p>

<p>When you load a table into TOPCAT it has a number of characteristics
like the number of columns and rows it contains, the order of the rows
that make up the data, the data and metadata themselves, and so on.
While manipulating it you can modify the way that the table appears
to the program, by changing or adding data or metadata, 
or changing the order or selection of columns or rows that are visible.
For each table the "apparent table" is a table which corresponds to
the current state of the table according to the changes that you have made.
</p>

<p>In detail, the apparent table consists of the table as it was originally
imported into the program plus any of the following changes that you
have made:
<ul>
<li>Changes to the current 
    <ref id="columns" plaintextref="yes">Column Set</ref> caused
    by adding, hiding or moving columns</li>
<li>Changes to the current 
    <ref id="order" plaintextref="yes">Row Order</ref> caused by 
    doing a sort</li>
<li>Selection of rows changed by changing the current
    <ref id="subsets" plaintextref="yes">Row Subset</ref></li>
<li>Changes to cell data by editing cells in the 
    <ref id="TableViewerWindow">Data window</ref></li>
<li>Changes to table metadata by editing cells in the 
    <ref id="ParameterWindow">Parameter window</ref></li>
<li>Changes to column metadata by editing cells in the 
    <ref id="ColumnInfoWindow">Columns window</ref></li>
</ul>
</p>

<p>The apparent table is used in the following contexts:
<dl>

<dt>Data Window</dt>
<dd><p>The <ref id="TableViewerWindow">Data window</ref>
    always shows the apparent table, so if you are in doubt about what
    form a table will get exported in, you can see what it looks like there.
    </p></dd>

<dt>Exports</dt>
<dd><p>When you save a table, or export it by dragging it off the
    Table List panel in the <ref id="ControlWindow">Control Window</ref>,
    or create a duplicate table,
    it is the apparent table which is copied.
    So for instance if you define a subset containing only the first
    ten rows of a table
    and then save it to a new table, or create a duplicate within TOPCAT
    using the <label>Duplicate Table</label> (&IMG.COPY;) toolbar button,
    the resulting table will contain only those ten rows.
    </p></dd>

<dt>Joins</dt>
<dd><p>When you use the <ref id="MatchWindow">Match Window</ref> or
    <ref id="ConcatWindow">Concatenation Window</ref> to construct a
    new table on the basis of one or more existing ones,
    the new table will be built on the basis of the apparent versions
    of the tables being operated on.
    </p></dd>

</dl>
Some of the other table view windows are affected too, for instance
the <ref id="ColumnInfoWindow">Columns window</ref> 
displays its columns in the order that they appear in the Apparent Table.
</p>

<subsect id="subsets">
<subhead><title>Row Subsets</title></subhead>

<p>An important feature of TOPCAT is the ability to define and use 
<label>Row Subsets</label>.  A Row Subset is effectively a table composed
from some subset of the rows in a whole table being viewed by the application.
You can define these and use them in several different ways;
the usefulness comes from defining them in one context and using them
in another.
The <ref id="SubsetWindow">Subset Window</ref> displays the currently
defined Row Subsets and permits some operations on them.
</p>

<p>At any time each table has a <label>current</label> row subset,
and this affects the <ref id="apparent">Apparent Table</ref>.
You can always see what it is by looking at the "Row Subset" selector
in the <ref id="ControlWindow">Control Window</ref> when that table
is selected; by default it is one containing all the rows.
You can change it by choosing from this selector
or as a result of some other actions.
</p>

<p>Other contexts in which subsets can be used are picking a selection
of rows from which to calculate in the
<ref id="StatsWindow">Statistics Window</ref>
and marking groups of rows to plot using different markers in the
<ref id="PlotWindow">Plot Window</ref>.
</p>

<subsubsect id="subsetDef">
<subhead><title>Defining Subsets</title></subhead>

<p>You can define a Row Subset in one of the following ways:

<dl>
<dt>Selecting rows in the browser</dt>
<dd><p>You can select a single row in the 
    <ref id="TableViewerWindow">Data Window</ref> by
    clicking on it, or select a group of adjacent rows by dragging
    the mouse over them.  You can add more rows to the selection by
    keeping the &lt;Control&gt; button pressed while you do it.
    Once you have a set of rows selected you can use the
    <label>Subset From Selected Rows</label> (&IMG.INCLUDE_ROWS;) or
    <label>Subset From Unselected Rows</label> (&IMG.EXCLUDE_ROWS;)
    buttons to create a new subset based
    on the set of highlighted rows or their complement.
    </p>

    <p>Combining this with <ref id="order">sorting</ref> 
    the rows in the table can be useful; 
    if you do a Sort Up on a given column and then drag out the
    top few rows of the table you can easily create a subset consisting
    of the highest values of a given column.
    </p></dd>

<dt>Defining an algebraic expression</dt>
<dd><p>From the <ref id="SubsetWindow">Subset Window</ref> using the
    <label>Add New Subset</label> (&IMG.ADD;) button will pop up 
    the <ref id="SyntheticSubsetQueryWindow">Algebraic Subset Window</ref>
    which allows you to define a new subset using an algebraic expression
    based on the values of the cells in each row.
    </p></dd>

<dt>Visible plotted points</dt>
<dd><p>In the <ref id="PlotWindow">Plot Window</ref> you can plot columns
    against each other, and subsequently zoom in and out using the
    mouse.  If you zoom to display only some of the plotted points and
    then use the <label>New Subset From Visible</label> (&IMG.VISIBLE_SUBSET;)
    button then a new subset will be
    created containing only rows represented by points in the field of
    view of the plot at the time.
    </p></dd>

<dt>Boolean columns</dt>
<dd><p>Any column which has a boolean (true/false) type value can be used
    as a subset; rows in which it has a true value are in the subset
    and others are not.  Any boolean column in a table is made available
    as a row subset with the same name when the table is imported.
    </p></dd>

</dl>
</p>

<p>In all these cases you will be asked to assign a name for the subset.
As with column names, it is a good idea to follow a few rules for these
names.  They should be:
<ul>
<li>Different from other subset and column names, 
    even apart from upper/lower case distinctions</li>
<li>In the form of a java identifier (starts with a letter, continues with
    alphanumerics including underscore)</li>
<li>Not too long</li>
</ul>
</p>

<p>In the first two subset definition methods above, 
the <label>current</label> subset will be set immediately to the
newly created one.
</p>

</subsubsect>

</subsect>

<subsect id="order">
<subhead><title>Row Order</title></subhead>

<p>You can sort the rows of each table according to the
values in a selected column.
Normally you will want to sort on
a numeric column, but other values may be sortable too, for instance
a String column will sort alphabetically.
Some kinds of columns (e.g. array ones) don't have any well-defined
order, and it is not possible to select these for sorting on.
</p>

<p>At any time, each table has a <label>current</label> row order,
and this affects the <ref id="apparent">Apparent Table</ref>.
You can always see what it is by looking under the "Sort Order" item
in the <ref id="ControlWindow">Control Window</ref> when that table
is selected; by default it is "(none)", which means the rows have the
same order as that of the table they were loaded in from.
The little arrow (&IMG.UP_TRIM;/&IMG.DOWN_TRIM;) indicates whether
the sense of the sort is up or down.  You can change the sort order
by selecting a column name from this control, and change the sense
by clicking on the arrow.  The sort order can also be changed
by using menu items in the 
<ref id="ColumnInfoWindow">Columns Window</ref> or right-clicking
popup menus in the <ref id="TableViewerWindow">Data Window</ref>.
</p>

<p>Selecting a column to sort by calculates the new row order 
by performing a sort on the cell values there and then.
If the table data changes somehow (e.g. because you edit
cells in the table) then it is possible for the sort order 
to become out of date.
</p>

<p>The current row order affects the <ref id="apparent">Apparent Table</ref>,
and hence determines the order of rows in tables which are exported 
in any way (e.g. written out) from TOPCAT.  You can always see the
rows in their currently sorted order in the 
<ref id="TableViewerWindow">Data Window</ref>.
</p>

</subsect>

<subsect id="columns">
<subhead><title>Column Set</title></subhead>

<p>When each table is imported it has a list of columns.
Each column has header information which determines the kind of 
data which can fill the cells of that column as well as a name,
and maybe some additional information like units and UCD.
All this information can be viewed, and in some cases modified,
in the <ref id="ColumnInfoWindow">Columns Window</ref>.
</p>

<p>During the lifetime of the table within TOPCAT, 
this list of columns can be
changed by adding new columns, hiding (and perhaps subsequently 
revealing) existing columns, and changing their order.  The 
current state of which columns are present and visible and what order 
they are in is collectively known as the <label>Column Set</label>,
and affects the <ref id="apparent">Apparent Table</ref>.
The current Column Set is always reflected in the order in which 
columns are displayed in the <ref id="TableViewerWindow">Data Window</ref>
and <ref id="StatsWindow">Statistics Window</ref>.
The <ref id="ColumnInfoWindow">Columns Window</ref> shows all the
known columns, including hidden ones, in Column Set order;
whether they are currently visible is indicated by the (leftmost)
"Visible" column.
</p>

<p>You can affect the current Column Set in the following ways:
<dl>

<dt>Hide/Reveal columns</dt>
<dd><p>In the Columns Window you can toggle columns between hidden and
    visible by clicking on their box in the <label>Visible</label> column.
    To make a group of columns hidden or visible at once,
    select the corresponding rows (drag the mouse over them to select
    a contiguous group; hold the Control button down to add
    more single rows or contiguous groups to the selection) and hit the 
    <label>Hide Selected</label> (&IMG.HIDE;) or
    <label>Reveal Selected</label> (&IMG.REVEAL;)
    button in the toolbar or menu.
    Note when selecting rows, don't drag the mouse over the Visible 
    column, do it somewhere in the middle of the table.
    </p>

    <p>You can also hide a column by right-clicking on it in the 
    <ref id="TableViewerWindow">Data Window</ref>, which brings up 
    a popup menu - select the <label>Hide</label> option.
    To make it visible again you have to go to the Columns Window as above.
    </p></dd>

<dt>Move Columns</dt>
<dd><p>In the Data Window you can move columns around by dragging the
    grey column header left or right to a new position (as usual in a 
    <ref id="JTable">JTable</ref>).  This affects the Column Set, as
    you can see if you watch the Columns Window while you do it.
    </p></dd>

<dt>Add a Synthetic Column</dt>
<dd><p>You can use the 
    <label>New Synthetic Column</label> (&IMG.ADD;) button in the
    Columns Window or the (right-click) popup menu in the 
    Data Window to bring up the 
    <ref id="SyntheticColumnQueryWindow">Synthetic Column Window</ref>,
    which allows you to define a new column defined algebraically from
    the values of existing columns.  This gives you functionality a 
    bit like that of a column-oriented spreadsheet.
    </p></dd>

<dt>Add a Subset Column</dt>
<dd><p>If you have defined a <ref id="subsets">Row Subset</ref> somehow
    and you want it to appear explicitly in the table 
    (for instance so that when you write the table out the selection is saved)
    you can select that subset in the 
    <ref id="SubsetWindow">Subsets Window</ref> and use the 
    <label>To Column</label> (&IMG.TO_COLUMN;) button, which will add
    a new boolean column to the table with the value <label>true</label> 
    for rows part of that subset and <label>false</label> for the other rows.
    </p></dd>

</dl>
</p>

</subsect>

</sect>

<sect>
<subhead><title>Table Formats</title></subhead>

<p>TOPCAT supports a wide variety of tabular data formats.
In most cases these are file formats for tables stored as single files
on a disk or at the end of a URL, but there are other possibilities,
for instance a "loaded" table could 
be the result of an SQL query on a database.
</p>

<p>The program has no "native" file format, but if you have no particular
preference about which format to save tables to, you should probably
use either <ref id="outFits">FITS</ref> or <ref id="outVotable">VOTable</ref>.
FITS tables can be accessed without loading all the data into memory, 
which makes them good for very large tables (fast load and no
running out of memory).
VOTables have good storage of metadata (table parameters and column
information such as UCDs and descriptions), but large tables stored as pure
XML (<label>votable-tabledata</label> format) 
can be verbose and slow to save/load.
The <label>votable-fits-href</label> format is a good
compromise between the two, but it writes to two separate files
(metadata in an XML file and data in a FITS file), so if you move
files around you have to remember to keep track of both.
</p>

<p>Since you can load a table from one format and save it in a different
one, TOPCAT can be used to convert a table from one format to another.
If this is all you want to do however, you may find it more 
convenient to use the command line utility 
<ref id="tablecopy" plaintextref="yes">tablecopy</ref>.
</p>

<p>The format handling is extensible, so new formats can
be added fairly easily.  All the table input/output is handled by 
<webref url="http://www.starlink.ac.uk/stil/">STIL</webref>
(the Starlink Tables Infrastructure Library); more detailed 
descriptions of the I/O capabilities can be found in its documentation.
</p>


<p>The following subsections describe the available formats for reading
and writing tables.  The two operations are separate, so not all the
supported input formats have matching output formats and vice versa.
</p>

<subsect id="inFormats">
<subhead><title>Supported Input Formats</title></subhead>

<p>Loading tables into TOPCAT is done 
using the <ref id="LoadQueryWindow">Load Table</ref> dialogue;
the file format (and any compression) is automatically detected.
The following sections describe the table formats which TOPCAT
can read.</p>

<subsubsect>
<subhead><title>FITS</title></subhead>

<p>FITS BINARY and ASCII tables can be read.
Unless told otherwise, TOPCAT will display the first TABLE or BINTABLE
extension in a given FITS file.
If a later extension is required, this is indicated by giving the
extension number after a '#' at the end of the table location.
The first extension (first HDU after the primary HDU) is numbered 1.
Thus in a compressed FITS table called "spec23.fits.gz"
with one primary HDU and two BINTABLE extensions,
you would view the first one using the name "spec23.fits.gz"
or "spec23.fits.gz#1" and the second one using the name "spec23.fits.gz#2".
The suffix "#0" is never used for a legal
FITS file, since the primary HDU cannot contain a table.
</p>

<p>You can select which extension to use more conveniently than
by specifying the HDU numbers if you use the
<ref id="StarTableNodeChooser">Hierarchy Browser</ref> to load the table.
</p>

<p>If the table is stored in a FITS binary table extension in a file
on local disk in uncompressed form, then any size table can be
accessed (TOPCAT does not load the table into memory in this case).
</p>

<p>Compressed FITS files, or ones referred to as URLs, may be used.
</p>

</subsubsect>

<subsubsect id="inVotable">
<subhead><title>VOTable</title></subhead>

<p>VOTable is an XML-based format for tabular data endorsed by the
<webref url="http://www.ivoa.net/"
        >International Virtual Observatory Alliance</webref>;
while the tabular data which can be encoded is by design close to
what FITS allows, it provides for much richer encoding of structure 
and metadata.
TOPCAT ought to read any table which conforms to the
<webref url="&URL.VOTABLE;">VOTable 1.0 specification</webref>.
This includes tables in which the cell data is
included in-line as XML elements (VOTable/TABLEDATA format),
or included/referenced as a FITS table (VOTable/FITS)
or included/referenced as a raw binary stream (VOTable/BINARY).
</p>

<p>VOTable documents can have a complicated hierarchical structure,
and may contain more than one actual table.
Unless told otherwise, TOPCAT will load the first table it finds
in the document, so in the (common) case that the document holds
exactly one table, giving the filename will load that sole table.
To display a table other than the first, you must indicate the
zero-based index of the TABLE element in a breadth-first search
after a '#' character at the end of the table specification.
Here is an example VOTable document:
<verbatim><![CDATA[
   <VOTABLE>
     <RESOURCE>
       <TABLE name="Star Catalogue"> ... </TABLE>
       <TABLE name="Galaxy Catalogue"> ... </TABLE>
     </RESOURCE>
   </VOTABLE>
]]></verbatim>
If this is available in a file called "cats.xml"
then open the Star Catalogue using the name "cats.xml"
or "cats.xml#0", and the Galaxy Catalogue using the name
"cats.xml#1".
</p>

<p>Compressed VOTable documents, or ones referred to as URLs, may be used.
</p>

</subsubsect>

<subsubsect id="inAscii">
<subhead><title>ASCII</title></subhead>

<p>In many cases tables are stored in some sort of unstructured plain
text format, with cells separated by spaces or some other delimiters.
There is a wide variety of such formats depending on what delimiters
are used, how columns are identified, whether blank values are permitted
and so on.  It is impossible to cope with them all, but TOPCAT
attempts to make a good guess about how to interpret a given ASCII file as
a table, which in many cases is successful.  In particular, if you just
have columns of numbers separated by something that looks like spaces,
you should be just fine.
</p>

<p>The way the text-format table reader is written currently
makes it unsuitable for reading enormous text-format tables
(its scalability may be improved in future, especially if users 
request this).
</p>

<p>Here are the detailed rules for how the ASCII-format tables are 
interpreted:
<ul>
<li>Bytes in the file are interpreted as ASCII characters 
    (UTF-8-encoded Unicode)</li>
<li>Each table row is represented by a single line of text</li>
<li>Lines are terminated by one or more contiguous line termination
    characters: line feed (0x0A) or carriage return (0x0D)</li>
<li>Within a line, fields are separated by one or more whitespace
    characters: space (" ") or tab (0x09)</li>
<li>A field is either an unquoted sequence of non-whitespace characters,
    or a sequence of non-newline characters between matching quote
    characters: either single quotes (') or double quotes (")</li>
<li>Within a quoted field, whitespace characters are permitted and are
    treated literally</li>
<li>Within a quoted field, any character preceded by a backslash character
    ("\") is treated literally.  This allows quote characters to appear
    within a quoted string.</li>
<li>An empty quoted string represents the null value</li>
<li>All data lines must contain the same number of fields (this is the
    number of columns in the table)</li>
<li>The data type of a column is guessed according to the fields that
    appear in the table.  If all the fields in one column can be parsed
    as integers (or null values), then that column will turn into an
    integer-type column.  The types that are tried, in order of
    preference, are:
       <code>Boolean</code>,
       <code>Integer</code>,
       <code>Float</code>,
       <code>Double</code>,
       <code>Long</code>,
       <code>String</code>
    </li>
<li>Empty lines are ignored</li>
<li>Anything after a hash character "#" on a line is ignored as far as
    table data goes.  However, lines which start with a "#" at the
    start of the table (before any data lines) will be interpreted
    as metadata as follows:
    <ul>
    <li>The last "#"-starting line before the first data line may contain
        the column names.  If it has the same number of fields as
        there are columns in the table, each field will be taken to be
        the title of the corresponding column.  Otherwise, it will be
        taken as a normal comment line.</li>
    <li>Any comment lines before the first data line not covered by the
        above will be concatenated to form the "description" parameter
        of the table.</li>
    </ul>
    </li>
</ul>
</p>

<p>If the list of rules above looks frightening, don't worry,
in many cases it ought
to make sense of a table without you having to read the small print.
Here is an example of a suitable ASCII-format table:
<verbatim>
    #
    # Here is a list of some animals.
    #
    # RECNO  SPECIES         NAME         LEGS   HEIGHT/m
      1      pig             "Pigling Bland"  4  0.8
      2      cow             Daisy        4      2
      3      goldfish        Dobbin       ""     0.05
      4      ant             ""           6      0.001
      5      ant             ""           6      0.001
      6      ant             ''           6      0.001
      7      "queen ant"     'Ma\'am'     6      2e-3
      8      human           "Mark"       2      1.8
</verbatim>
In this case it will identify the following columns:
<verbatim>
    Name       Type
    ----       ----
    RECNO      Integer
    SPECIES    String
    NAME       String
    LEGS       Integer
    HEIGHT/m   Float
</verbatim>
It will also use the text "<code>Here is a list of some animals</code>"
as the Description parameter of the table.
Without any of the comment lines, it would still interpret the table,
but the columns would be given the names <code>col1</code>..<code>col5</code>.
</p>

<p>If you understand the format of your files but they don't exactly
match the criteria above, the best thing is probably to write a
simple free-standing program or script which will convert them
into the format described here.
You may find Perl or awk suitable languages for this sort of thing.
</p>

</subsubsect>

<subsubsect id="inSql">
<subhead><title>SQL Database Queries</title></subhead>

<p>With appropriate configuration, TOPCAT can be used to examine the
results of queries on an SQL-compatible relational database.
</p>

<p>Database queries can be specified as a string in the form:
<verbatim>
   jdbc:<var>driver-specific-url</var>#<var>sql-query</var>
</verbatim>
The exact form is dependent on the driver.
Here is an example for MySQL:
<verbatim><![CDATA[
   jdbc:mysql://localhost/astro1?user=mbt#SELECT ra, dec FROM swaa WHERE vmag<18
]]></verbatim>
which would get a two-column table (the columns being "ra" and "dec"),
constructed from certain rows from the table "swaa" in the database
"astro1" on the local host, using the access privileges of user mbt.
</p>

<p>Fortunately you don't have to construct this by hand, there is
an <ref id="SQLReadDialog">SQL Query Dialogue</ref> to assist
in putting it together.
</p>

<p>Note that TOPCAT does not view a table in the database directly,
but the result of an SQL query on that table.  If you want to view
the whole table you can use the query
<verbatim>
   SELECT * FROM table-name
</verbatim>
but be aware that such a query might be expensive on a large table.
</p>

<p>Use of SQL queries requires some additional configuration of TOPCAT;
see <ref id="jdbcConfig"/>.
</p>

</subsubsect>

<subsubsect>
<subhead><title>World Data Center</title></subhead>

<p>Some support is provided for files produced by the
<webref url="http://www.wdc.rl.ac.uk/">World Data Centre for
Solar Terrestrial Physics</webref>.
The format itself apparently has no name, but files in this format
look something like the following:
<verbatim><![CDATA[
  Column formats and units - (Fixed format columns which are single space seperated.)
  ------------------------
  Datetime (YYYY mm dd HHMMSS)            %4d %2d %2d %6d      -
                                          %1s
  aa index - 3-HOURLY (Provisional)       %3d                  nT

  2000 01 01 000000  67
  2000 01 01 030000  32
      ...
]]></verbatim>
</p>

<p>Compressed files, or ones referred to as URLs, may be used.
</p>

<p>This handler is experimental;
it has been reverse-engineered from looking at a couple of
data files in the target format, and may not be very robust.
</p>

</subsubsect>

</subsect>


<subsect id="outFormats">
<subhead><title>Supported Output Formats</title></subhead>

<p>Writing out tables from TOPCAT is done 
using the <ref id="StarTableSaver">Save Table Window</ref>.
In general you have to specify the format in which you want the table
to be output by selecting from the Save Window's
<label>Table Output Format</label> selector; 
the following sections describe the possible choices.
In some cases there are variants within each format - these are
described as well.
</p>

<subsubsect id="outFits">
<subhead><title>FITS</title></subhead>

<p>When saving in FITS format a new file is written consisting of two HDUs:
a primary one containing minimal headers, and a single extension of
type BINTABLE containing the table data.
</p>

</subsubsect>

<subsubsect id="outVotable">
<subhead><title>VOTable</title></subhead>

<p>When a table is saved to VOTable format, a document conforming to the
VOTable 1.0 specification containing a single TABLE element within
a single RESOURCE element is written.
</p>

<p>There are a number of variants which determine the form in which
the table data (DATA element) is written:
<dl>

<dt>votable-tabledata</dt>
<dd><p>TABLEDATA element (pure XML)
    </p></dd>

<dt>votable-binary-inline</dt>
<dd><p>BINARY element containing base64-encoded data within the document
    </p></dd>

<dt>votable-fits-href</dt>
<dd><p>FITS element containing a reference to an external newly-written FITS
    file (with a name derived from that of the VOTable document)
    </p></dd>

<dt>votable-binary-href</dt>
<dd><p>BINARY element containing a reference to an external newly-written
    binary file (with a name derived from that of the VOTable document)
    </p></dd>

<dt>votable-fits-inline</dt>
<dd><p>FITS element containing base64-encoded data within the document
    </p></dd>
</dl>
See the 
<webref url="&URL.VOTABLE;" plaintextref="yes">VOTable specification</webref> 
for more explanation of what these variants mean.
They can all be read by the 
<ref id="inVotable">VOTable input handler</ref>.
</p>

</subsubsect>

<subsubsect id="outAscii">
<subhead><title>ASCII</title></subhead>

<p>Tables can be written using a format which is compatible with
the <ref id="inAscii">ASCII input format</ref>.
It writes as plainly as possible, so should stand a good chance of
being comprehensible to other programs which require some sort of
plain text rendition of a table.  
</p>

<p>The first line is a comment (starting with a "<code>#</code>" character)
which names the columns, and
an attempt is made to line up data in columns using spaces.
Here is an example of a short table written in this format:
<verbatim>
   # index Species  Name   Legs Height Mammal
     1     pig      Bland  4    0.8    true  
     2     cow      Daisy  4    2.0    true  
     3     goldfish Dobbin 0    0.05   false 
     4     ant      ""     6    0.0010 false 
     5     ant      ""     6    0.0010 false 
     6     human    Mark   2    1.9    true  
</verbatim>
</p>

</subsubsect>


<subsubsect>
<subhead><title>Text</title></subhead>

<p>Tables can be written to a simple text-based format which is
designed to be read by humans.  No reader exists for this format.
</p>

<p>Here is an example of a short table written in this format:
<verbatim>
   +-------+----------+--------+------+--------+--------+
   | index | Species  | Name   | Legs | Height | Mammal |
   +-------+----------+--------+------+--------+--------+
   | 1     | pig      | Bland  | 4    | 0.8    | true   |
   | 2     | cow      | Daisy  | 4    | 2.0    | true   |
   | 3     | goldfish | Dobbin | 0    | 0.05   | false  |
   | 4     | ant      |        | 6    | 0.0010 | false  |
   | 5     | ant      |        | 6    | 0.0010 | false  |
   | 6     | human    | Mark   | 2    | 1.9    | true   |
   +-------+----------+--------+------+--------+--------+
</verbatim>
</p>

</subsubsect>


<subsubsect id="outSql">
<subhead><title>SQL Tables</title></subhead>

<p>With appropriate configuration, TOPCAT can write out tables as
new tables in an SQL-compatible relational database.
</p>

<p>For writing, the location is specified as the following URL:
<verbatim>
   jdbc:<var>driver-specific-url</var>#<var>new-table-name</var>
</verbatim>
The exact form is dependent on the driver.
Here is an example for MySQL:
<verbatim><![CDATA[
   jdbc:mysql://localhost/astro1?user=mbt#newtab
]]></verbatim>
which would write the current contents of the browser into a new table
called "newtab" in the database "astro1" on the local host with the
access privileges of user mbt.
</p>

<p>Fortunately you do not have to construct this URL by hand, there is
an <ref id="SQLWriteDialog">SQL dialogue box</ref> to assist
in putting it together.
</p>

<p>Use of SQL queries requires some additional configuration of TOPCAT;
see <ref id="jdbcConfig"/>.
</p>

</subsubsect>

<subsubsect>
<subhead><title>HTML</title></subhead>

<p>A table can be written out as an HTML 3.2
<webref url="http://www.w3c.org/TR/REC-html32#table">TABLE</webref> element,
suitable for use as a web page or insertion into one.
</p>

<p>There are two variants:
<dl>

<dt>HTML</dt>
<dd><p>A freestanding HTML document, complete with HTML, HEAD and BODY
    tags is output.
    </p></dd>

<dt>HTML-element</dt>
<dd><p>Only the TABLE element representing the table is output;
    this should normally be embedded in a larger HTML document before use.
    </p></dd>

</dl>
</p>

</subsubsect>

<subsubsect>
<subhead><title>LaTeX</title></subhead>

<p>A table can be written out as a LaTeX <code>tabular</code> environment,
suitable for insertion into a document intended for publication.
</p>

<p>There are two variants:
<dl>

<dt>LaTeX</dt>
<dd><p>The <code>tabular</code> element alone is output;
    this will have to be embedded in a larger LaTeX document before use.
    </p></dd>

<dt>LaTeX-document</dt>
<dd><p>A freestanding LaTeX document, consisting of the 
    <code>tabular</code> within a 
    <code>table</code> within a
    <code>document</code> is output.
    </p></dd>

</dl>
</p>

<p>Obviously, this isn't so suitable for very large tables.
</p>

</subsubsect>

<subsubsect id="mirage">
<subhead><title>Mirage Format</title></subhead>

<p><webref url="http://www.bell-labs.com/project/mirage/index.html"
           >Mirage</webref>
is a powerful standalone java tool developed at Bell Labs for analysis of
multidimensional data.  It uses its own file format for input.
TOPCAT can write tables in the input format which Mirage uses,
so that you can prepare tables in TOPCAT and write them out for
subsequent use by Mirage.
</p>

<p>It is also possible in principle to launch Mirage directly
from within TOPCAT, using the 
<label>Export To Mirage</label> item on the 
<ref id="ControlWindow">Control Window</ref>'s <label>File</label> menu;
this will cause Mirage to start up viewing the currently selected
<ref id="apparent">Apparent Table</ref>.
In order for this to work the Mirage classes must
be on your classpath (see <ref id="jvmClasspath"/>) when TOPCAT is run.
</p>

<p>There appears to be 
a bug in Mirage which means this does not always work -
sometimes Mirage starts up with no data loaded into it.
In this case you will have to save the data to disk in Mirage format,
start up Mirage separately, and load the data in using the
<label>New Dataset</label> item in Mirage's <label>Console</label> menu.
</p>

<p>Note that when Mirage has been launched from TOPCAT, exiting Mirage
or closing its window will exit TOPCAT as well.
</p>

</subsubsect>

</subsect>

</sect>

<sect id="join">
<subhead><title>Joins and Matches</title></subhead>

<p>TOPCAT allows you to join two or more tables together to 
produce a new one in a variety of ways, and also to identify
"similar" rows within a single table according to their cell contents.
This section describes the facilities for performing these related
operations.
</p>

<p>There are two basic ways to join tables together: top-to-bottom and
side-by-side.
A top-to-bottom join (which here I call <label>concatenation</label>)
is fairly straightforward in that it just requires you to decide
which columns in one table correspond to which columns in the other.
A side-by-side join is more complicated - it is rarely the case that
row <m>i</m> in the first table should correspond to row <m>i</m> in the
second one, so it is necessary to provide some criteria for 
deciding which (if any) row in the second table corresponds to a given
row in the first.  In other words, some sort of <label>matching</label>
between rows in different tables needs to take place.
Matching rows within a single table is a useful operation
which involves many of the same issues, so that is described here too.
</p>

<subsect id="concat">
<subhead><title>Concatenating Tables</title></subhead>

<p>Two tables can be concatenated using the 
<ref id="ConcatWindow">Concatenation Window</ref>,
which just requires you to specify the two tables to be joined,
and for each column in the first ("Base") table,
which column in the second ("Appended") table (if any) corresponds to it.
The <ref id="apparent">Apparent Table</ref> is used in each case.
The resulting table, which is added to the list of known tables in
the <ref id="ControlWindow">Control Window</ref>,
has the same columns as the Base table, and a number of rows 
equal to the sum of the number of rows in the Base and Appended tables.
</p>

<p>As a very simple example, concatenating these two tables:
<verbatim>
   Messier   RA       Dec      Name
   -------   --       ---      ----
   97        168.63   55.03    Owl Nebula
   101       210.75   54.375   Pinwheel Galaxy
   64        194.13   21.700   Black Eye Galaxy
</verbatim>
and
<verbatim>
   RA2000    DEC2000   ID
   ------    -------   --
   185.6     58.08     M40
   186.3     18.20     M85
</verbatim>
with the assignments RA->RA2000, Dec->DEC2000 and Messier->ID would give:
<verbatim>
   Messier   RA       Dec      Name
   -------   --       ---      ----
   97        168.63   55.03    Owl Nebula
   101       210.75   54.375   Pinwheel Galaxy
   64        194.13   21.700   Black Eye Galaxy
   M40       185.6    58.08
   M85       183.6    18.20
</verbatim>
Of course it is the user's responsibility to ensure that the 
correspondance of columns is sensible (that the two corresponding
columns mean the same thing).
</p>

<p>You can perform a concatenation using the 
<ref id="ConcatWindow">Concatenation Window</ref>;
obtain this using the <label>Concatenate Tables</label> (&IMG.CONCAT;) button
in the <ref id="ControlWindow">Control Window</ref>.
</p>

</subsect>

<subsect id="pairMatch">
<subhead><title>Matching Rows Between Tables</title></subhead>

<p>When joining two tables side-by-side you need to identify which
row(s) in one correspond to which row(s) in the other.
Conceptually, this is done by looking at each row in the first table,
somehow identifying in the second table which row
"refers to the same thing", and putting a new row in the joined table
which consists of all the fields of the row in the first table, 
followed by all the fields of its matched row in the second table.
The resulting table then has a number of columns equal to the 
sum of the number of columns in both input tables.
</p>

<p>In practice, there are a number of complications.  For one thing, each 
row in one table may be matched by zero, one or many rows in the 
the other.  
For another, defining what is meant by "referring to the same thing" 
may not be straightforward.  There is also the problem of 
actually identifying these matches
in a relatively efficient way (without explicitly comparing each
row in one table with each row in the other, which is far too slow
for large tables).
</p>

<p>A common example is the case of matching two object catalogues -
suppose we have the following catalogues:
<verbatim>
    Xpos       Ypos        Vmag
    ----       ----        ----
   1134.822    599.247     13.8
    659.68    1046.874     17.2
    909.613    543.293      9.3
</verbatim>
and
<verbatim>
    x           y          Bmag
    -           -          ---- 
   909.523     543.800     10.1
   1832.114    409.567     12.3
   1135.201    600.100     14.6
    702.622   1004.972     19.0
</verbatim>
and we wish to combine them to create one new catalogue with a row
for each object which appears in both tables.
To do this, you have to specify what counts as a match - in this
case let's say that a row in one table matches (refers to the same
object as) a row in the other if the distance between the positions
indicated by their X and Y coordinates matches to within one unit
(sqrt((Xpos-x)<sup>2</sup> + (Ypos-y)<sup>2</sup>)&lt;=1)).
Then the catalogue we will end up with is:
<verbatim>
    Xpos       Ypos        Vmag    x           y          Bmag
    ----       ----        ----    -           -          ---- 
   1134.822    599.247     13.8   1135.201    600.100     14.6
    909.613    543.293      9.3    909.523    543.800     10.1
</verbatim>
There are a number of variations on this however - your match criteria
might involve sky coordinates instead of Cartesian ones (or not be
physical coordinates at all), you might want to match more than two
tables, you might want to identify groups of matching objects in
a single table, you might want the output to include rows which
don't match as well...
</p>

<p>The <ref id="MatchWindow">Match Window</ref> allows you to specify
<ul>
<li>Which tables are to be matched</li>
<li>What the criteria are for matching rows</li>
<li>What to do for rows that don't have exactly one match</li>
</ul>
and to start the matching operation.
To match two tables, use the <label>Pair Match</label> (&IMG.MATCH2;) button
in the <ref id="ControlWindow">Control Window</ref>; 
to match more tables than two at once, use the other options on the
Control Window's <label>Join</label> menu.
</p>

</subsect>

<subsect>
<subhead><title>Matching Rows Within a Table</title></subhead>

<p>Although the effect is rather different, searching through a 
single table for rows which match each other (refer to the same
object, as explained above) is a similar process and requires much
of the same information to be specified, mainly, what counts as
a match.
You can do this using the <ref id="MatchWindow1">Internal Match Window</ref>,
obtained by using the <label>Internal Match</label> (&IMG.MATCH1;) button
in the <ref id="ControlWindow">Control Window</ref>.
</p>

</subsect>

<subsect>
<subhead><title>Notes on Matching</title></subhead>

<p>This section provides a bit more detail on the how the row matching is done.
It is designed to give a rough idea to interested parties;
it is <em>not</em> a tutorial description from 
first principles of how it all works.
</p>

<p>The basic algorithm for matching is based on dividing up the space
of possibly-matching rows into an (indeterminate) number of bins.  
These bins will typically correspond to disjoint cells of a physical
coordinate space, but need not do so.  In the first step, each
row of each table is assessed to determine which bins might contain
matches to it - this will generally be the bin that it falls into and
any "adjacent" bins within a distance corresponding to the matching
tolerance.  A reference to the row is associated with each such bin.
In the second step, each bin is examined, and if two or more 
rows are associated with it every possible pair of rows in the associated set
is assessed to see whether it does in fact consitute a matched pair.
This should correctly identify all and only those row pairs which 
are related according to the selected match criteria.
</p>

<p>Following this step, all the pairs are agglomerated into <em>groups</em>,
where a group is a maximal connected graph where 
the nodes represent table rows and
the edges represent matched pairs.
It follows that
each row is either a member of exactly one group, or it has no matches.
If a group has more than two members, then it is not guaranteed that
the selected match criteria hold for all pairs within it.
What happens after that is determined by the exact kind 
of match being performed.
</p>

<p>The matching algorithm is therefore basically an <m>O(N)</m> process, 
where <m>N</m> is the total number of rows in all the tables participating
in a match.  This can break down however if the matching
tolerance is such that the number of rows associated with some or most
gets large, in which case an <m>O(M<sup>2</sup>)</m> compenent can come to
dominate, where <m>M</m> is the number of rows per bin.
The average number of rows per bin is reported in the logging while a
match is proceeding, so you can keep an eye on this.
</p>

</subsect>

</sect>

<sect id="jel">
<subhead><title>Algebraic Expression Syntax</title></subhead>

<p>TOPCAT allows you to enter algebraic expressions in two contexts:
to define a new column in terms of existing columns,
and to define a new <ref id="subsets" plaintextref="yes">Row Subset</ref>
on the basis of table data,
in the <ref id="SyntheticColumnQueryWindow">Synthetic Column</ref>
and <ref id="SyntheticSubsetQueryWindow">Algebraic Subset</ref>
dialogues respectively.
This is a powerful feature which permits you to manipulate and select
table data in very flexible ways - you can think of it like a 
sort of column-oriented spreadsheet.
The syntax for entering these expressions is explained in this section.
</p>

<p>What you write are actually expressions in
the Java language, which are compiled into Java bytecode before
evaluation.  However, this does not mean that you need to be a
Java programmer to write them.  The syntax is pretty similar to C,
but even if you've never programmed in C most simple things, 
and some complicated ones, are quite intutitive.
</p>

<p>The following explanation gives
some guidance and <ref id="jelExamples">examples</ref>
for writing these expressions.
Unfortunately a complete tutorial on writing Java is beyond
the scope of this document, but it should provide enough information
for even a novice to write useful expressions.
</p>

<p>The expressions that you can write are basically any function
of all the column values and subset inclusion flags which apply
to a given row; the function result can then define the per-row 
value of a new column, or, if it the expression is boolean, 
the inclusion flag for a new subset.
If the built-in operators and functions are not sufficient,
or it's unwieldy to express your function in one line of code,
you can add new functions by writing your own classes -
see <ref id="jelExtend"/>.
</p>

<subsect>
<subhead><title>Referencing Cell Values</title></subhead>

<p>To create a useful expression for a cell in a column, you will
have to refer to other cells in different columns of the same table row.
You can do this in two ways:
<dl>
<dt>By Name</dt>
<dd><p>The Name of the column may be used if it is unique (no other column in
    the table has the same name) and if it has a suitable form.
    This means that it must have the form of a Java variable - basically
    starting with a letter and continuing with
    letters or numbers.  In particular it cannot have any spaces in it.
    The underscore and currency symbols count as
    letters for this purpose.
    Column names are treated case-insensitively.
    </p></dd>

<dt>By $ID</dt>
<dd><p>The "$ID" identifier of the column may always be used to refer to it.
    This is just a "$" sign followed by a unique integer assigned by the
    program to each column when it is first encountered.
    You can find out the $ID identifier by looking in the
    <ref id="ColumnInfoWindow">Columns Window</ref>.
    </p></dd>
</dl>
</p>
<p>There is a special column whose name is "Index" and whose ID is "$0".
The value of this is the same as the row number in the unsorted table
(the grey numbers on the left of the grid in the 
<ref id="TableViewerWindow">Data Window</ref>).
</p>

<p>The value of the variables so referenced will be a primitive
(boolean, byte, short, char, int, long, float, double) if the
column contains one of the corresponding types.  Otherwise it will
be an Object of the type held by the column.
</p>

</subsect>

<subsect>
<subhead><title>Referencing Row Subset Flags</title></subhead>

<p>If you have any <ref id="subsets">Row Subsets</ref> defined
you can also access the value
of the boolean (true/false) flag indicating whether the current row
is in each subset.  Again there are two ways of doing this:
<dl>
<dt>By Name</dt>
<dd><p>The name assigned to the subset when it was created can be used
    if it is unique and if it has a suitable form.  The same comments
    apply as to column names above.
    </p></dd>

<dt>By #ID</dt>
<dd><p>The "#ID" identifier of the subset may always be used to refer to it.
    Like the "$ID" identifier for columns above, this is a unique
    index preceded by a special symbol, this time "#".
    </p></dd>
</dl>
In either case, the value will be a boolean value; these can be useful
in conjunction with the ternary "<code>? :</code>" operator or
when combining existing subsets using logical operators to create
a new subset.
</p>
</subsect>

<subsect>
<subhead><title>Null Values</title></subhead>

<p>When no special steps are taken, if a null value (blank cell)
is encountered
in evaluating an expression (usually because one of the columns
it relies on has a null value in the row in question) then the
result of the expression is also null.
</p>

<p>It is possible to exercise more control than this, but it
requires a little bit of care,
because the expressions work in terms of primitive values
(numeric or boolean ones) which don't in general have a defined null
value.  The name "null" in expressions gives you the java <code>null</code>
reference, but this cannot be matched against a primitive value
or used as the return value of a primitive expression.
</p>

<p>For most purposes, the following two tips should enable you to
work with null values:

<dl>
<dt>Testing for null</dt>
<dd><p>To test whether a column contains a null value, prepend the
    string "<code>NULL_</code>"
    (use upper case) to the column name or $ID.  This
    will yield a boolean value which is true if the column contains
    a blank or a floating point NaN (not-a-number) value,
    and false otherwise.
    </p></dd>

<dt>Returning null</dt>
<dd><p>To return a null value from a numeric expression, use the name
    "<code>NULL</code>"
    (upper case).  To return a null value from a non-numeric expression
    (e.g. a String column) use the name "<code>null</code>" (lower case).
    </p></dd>
</dl>
</p>

<p>Null values are often used in conjunction with the ternary conditional
operator, "<code>? :</code>"; the expression
<verbatim>
   test ? tval : fval
</verbatim>
returns the value <code>tval</code> if the boolean expression <code>test</code>
evaluates true, or <code>fval</code> if <code>test</code> evaluates false.
So for instance the following expression:
<verbatim>
   Vmag == -99 ? NULL : Vmag
</verbatim>
can be used to define a new column which has the same value as the Vmag
column for most values, but if Vmag has the "magic" value -99 the new
column will contain a blank.
The opposite trick (substituting a blank value with a magic one) can
be done like this:
<verbatim>
   NULL_Vmag ? -99 : Vmag
</verbatim>
Some more examples are given in <ref id="jelExamples"/>.
</p>

</subsect>

<subsect>
<subhead><title>Operators</title></subhead>

<p>The operators are pretty much the same as in the C language.
The common ones are:
<dl>
<dt>Arithmetic</dt>
<dd><p>
  <dl>
  <dt><code>+</code> (add)</dt>
  <dt><code>-</code> (subtract)</dt>
  <dt><code>*</code> (multiply)</dt>
  <dt><code>/</code> (divide)</dt>
  <dt><code>%</code> (modulus)</dt>
  </dl>
</p></dd>

<dt>Logical</dt>
<dd><p>
  <dl>
  <dt><code>!</code> (not)</dt>
  <dt><code>&amp;&amp;</code> (and)</dt>
  <dt><code>||</code> (or)</dt>
  <dt><code>^</code> (exclusive-or)</dt>
  <dt><code>==</code> (numeric identity)</dt>
  <dt><code>!=</code> (numeric non-identity)</dt>
  <dt><code>&lt;</code> (less than)</dt>
  <dt><code>&gt;</code> (greater than)</dt>
  <dt><code>&lt;=</code> (less than or equal)</dt>
  <dt><code>&gt;=</code> (greater than or equal)</dt>
  </dl>
</p></dd>

<dt>Numeric Typecasts</dt>
<dd><p>
  <dl>
  <dt><code>(byte)</code>   (numeric -> signed byte)</dt>
  <dt><code>(short)</code>  (numeric -> 2-byte integer)</dt>
  <dt><code>(int)</code>    (numeric -> 4-byte integer)</dt>
  <dt><code>(long)</code>   (numeric -> 8-byte integer)</dt>
  <dt><code>(float)</code>  (numeric -> 4-type floating point)</dt>
  <dt><code>(double)</code> (numeric -> 8-byte floating point)</dt>
  </dl>
</p></dd>

<dt>Other</dt>
<dd><p>
  <dl>
  <dt><code>[]</code> (array dereferencing)</dt>
  <dt><code>?:</code> (conditional switch)</dt>
  <dt><code>instanceof</code> (class membership)</dt>
  </dl>
</p></dd>
</dl>
</p>

</subsect>

<subsect>
<subhead><title>Functions</title></subhead>

<p>All the static methods of Java's <code>Math</code> class
and some other classes are available.
You can see a full listing of these in the
<ref id="MethodWindow">Available Functions Window</ref>.
Some of the more useful ones are as follows:

<dl>
<dt>Math static methods</dt>
<dd><p>These can be used for general mathematical manipulations, and 
    include all the standard trigonometric functions etc, including:
    <dl>
    <dt><code>abs(x)</code>         (absolute value)</dt>
    <dt><code>cos(x)</code>         (cosine)</dt>
    <dt><code>sqrt(x)</code>        (square root)</dt>
    <dt><code>max(a,b)</code>       (maximum)</dt>
    <dt><code>min(a,b)</code>       (minimum)</dt>
    <dt><code>max(a,b)</code>       (maximum)</dt>
    <dt><code>pow(a,b)</code>       (exponentiation)</dt>
    <dt><code>toDegrees(rad)</code> (angle conversion)</dt>
    <dt><code>toRadians(deg)</code> (angle conversion)</dt>
    </dl>
    (full details in the 
    <webref url="&URL.J2SE_JAVADOCS;java/lang/Math.html">Math</webref> javadocs)
</p></dd>

<dt>Angle static methods</dt>
<dd><p>Most of these are concerned with converting angles between 
    sexagesimal format (a string representing either 
    hours:minutes:seconds or degrees:arcminutes:arcseconds)
    and a floating point number in radians.
    <dl>
    <dt><code>dmsToRadians(dms)</code> 
              (DD:MM:SS string to radians)</dt>
    <dt><code>hmsToRadians(hms)</code>
              (HH:MM:SS string to radians)</dt>
    <dt><code>dmsToRadians(deg,min,sec)</code>
              (degrees, arcmin, arcsec numbers to radians)</dt>
    <dt><code>hmsToRadians(hr,min,sec)</code>
              (hours, minutes, seconds numbers to radians)</dt>
    <dt><code>radiansToDms(rad)</code>
              (formats an angle in radians as a DD:MM:SS string)</dt>
    <dt><code>(radiansToDms(rad,precision)</code>
              (formats an angle as a DD:MM:SS.S string with a given number
               of decimal places)</dt>
    <dt><code>radiansToHms(rad)</code>
              (formats an angle in radians as a HH:MM:SS string)</dt>
    <dt><code>radiansToDms(rad,precision)</code>
              (formats an angle as a HH:MM:SS.S string with a given number
               of decimal places)</dt>
    <dt><code>skyDistance(ra1,dec1,ra2,dec2)</code>
              (separation of points in radians along a great circle)</dt>
    <dt><code>degreesToRadians(deg)</code>
              (converts degrees to radians)</dt>
    <dt><code>radiansToDegrees(rad)</code>
              (converts radians to degrees)</dt>
    </dl>
    When decoding a DD:MM:SS or HH:MM:SS string, the separators may be
    colons, spaces, or some other things.
</p></dd>

<dt>Boolean String instance methods</dt>
<dd><p>These perform tests on strings.  Note you should use the
    <code>equals</code> method listed here 
    to test string equality rather than the
    <code>==</code> operator.
    <dl>
    <dt><code>startsWith(s)</code>        (comparison)</dt>
    <dt><code>endsWith(s)</code>          (comparison)</dt>
    <dt><code>equals(s)</code>            (equality)</dt>
    <dt><code>equalsIgnoreCase(s)</code>  (case-insensitive)</dt>
    <dt><code>matches(regex)</code>       (regular expression matching)</dt>
    </dl>
    (full details in the 
    <webref url="&URL.J2SE_JAVADOCS;java/lang/String.html">String</webref>
    javadocs)
</p></dd>

<dt>String instance methods returning Strings</dt>
<dd><p>These can be used to modify strings.
    <dl>
    <dt><code>substring(begin)</code>     (extract end of string)</dt>
    <dt><code>substring(begin,end)</code> (extract from middle of string)</dt>
    <dt><code>toUpper(s)</code>           (case folding)</dt>
    <dt><code>toLower(s)</code>           (case folding)</dt>
    </dl>
    (full details in the 
    <webref url="&URL.J2SE_JAVADOCS;java/lang/String.html">String</webref>
    javadocs)
    </p>

    <p>Note that since these ones are, in the java jargon, 
    <em>instance methods</em>,
    they are applied by appending them after a dot to the string they 
    are going to operate on.  Thus, to test whether the values in the
    column "Name" start with the letters "NGC", you would write
    <verbatim>
      Name.startsWith("NGC")
    </verbatim>
</p></dd>

<dt>Numeric wrapper class static methods</dt>
<dd><p>These methods convert between strings and the various numeric
    types:
    <dl>
    <dt><code>toString(n)</code>    (numeric -> String)</dt>
    <dt><code>parseByte(s)</code>   (String -> signed byte)</dt>
    <dt><code>parseShort(s)</code>  (String -> 2-byte integer)</dt>
    <dt><code>parseInt(s)</code>    (String -> 4-byte integer)</dt>
    <dt><code>parseLong(s)</code>   (String -> 8-byte integer)</dt>
    <dt><code>parseFloat(s)</code>  (String -> 4-byte floating point)</dt>
    <dt><code>parseDouble(s)</code> (String -> 8-byte floating point)</dt>
    </dl>
    (full details in the javadocs for subclasses of 
    <webref url="&URL.J2SE_JAVADOCS;java/lang/Number.html">Number</webref>)
</p></dd>
</dl>
</p>

<p>Technical note for Java programmers: the public static methods of
these classes are imported into the expression namespace, so unlike
java you should write "<code>sqrt(x)</code>" and not
"<code>Math.sqrt(x)</code>".  Namespace clashes are a possibility.
</p>

</subsect>

<subsect id="jelExamples">
<subhead><title>Examples</title></subhead>

<p>Here are some examples for synthetic columns 
(i.e. expressions which return values to appear in the table):
<dl>
<dt>Average</dt>
<dd><p><verbatim>
    (first + second) * 0.5
</verbatim></p></dd>

<dt>Square root</dt>
<dd><p><verbatim>
    sqrt(variance)
</verbatim></p></dd>

<dt>Angle conversion</dt>
<dd><p><verbatim>
    toDegrees(DEC_radians)
    toRadians(RA_degrees)
</verbatim></p></dd>

<dt>Conversion from string to number</dt>
<dd><p><verbatim>
    parseInt($12)
    parseDouble(ident)
</verbatim></p></dd>

<dt>Conversion from number to string</dt>
<dd><p><verbatim>
    toString(index)
</verbatim></p></dd>

<dt>Conversion between numeric types</dt>
<dd><p><verbatim>
    (short) obs_type
    (double) range
</verbatim></p></dd>

<dt>Conversion from sexagesimal to radians</dt>
<dd><p><verbatim>
    hmsToRadians(RA1950)
    dmsToRadians(decDeg,decMin,decSec)
</verbatim></p></dd>

<dt>Conversion from radians to sexagesimal</dt>
<dd><p><verbatim>
    radiansToDms($3)
    radiansToHms(RA,2)
</verbatim></p></dd>

<dt>Outlier clipping</dt>
<dd><p><verbatim>
    min(1000, max(value, 0))
</verbatim></p></dd>

<dt>Converting a magic value to null</dt>
<dd><p><verbatim>
    jmag == 9999 ? NULL : jmag
</verbatim></p></dd>

<dt>Converting a null value to a magic one</dt>
<dd><p><verbatim>
    NULL_jmag ? 9999 : jmag
</verbatim></p></dd>
</dl>

and here are some examples of boolean expressions that could be used
to define <ref id="subsets">row subsets</ref>
(or to create boolean synthetic columns):

<dl>
<dt>Within a numeric range</dt>
<dd><p><verbatim>
    <![CDATA[RA > 100 && RA < 120 && Dec > 75 && Dec < 85]]>
</verbatim></p></dd>

<dt>Within a circle near the origin</dt>
<dd><p><verbatim>
    $2*$2 + $3*$3 &lt; 1
</verbatim></p></dd>

<dt>First 100 rows</dt>
<dd><p><verbatim>
    index &lt;= 100
</verbatim></p></dd>

<dt>Every tenth row</dt>
<dd><p><verbatim>
    index % 10 == 0
</verbatim></p></dd>

<dt>String equality/matching</dt>
<dd><p><verbatim>
    CONSTELLATION.equals("CYGNUS")
    CONSTELLATION.equalsIgnoreCase("cygnus")
    CONSTELLATION.startsWith("CYG")
</verbatim></p></dd>

<dt>String regular expression matching</dt>
<dd><p><verbatim>
    name.matches("M[0-9]+")
</verbatim></p></dd>

<dt>Combining subsets</dt>
<dd><p><verbatim>
    (#1 &amp;&amp; #2) &amp;&amp; ! #3
</verbatim></p></dd>

<dt>Test for non-blank value</dt>
<dd><p><verbatim>
    ! NULL_ellipticity
</verbatim></p></dd>
</dl>
</p>

</subsect>

<subsect id="jelExtend">
<subhead><title>Adding User-Defined Functions</title></subhead>

<p>The functions provided by default for use with algebraic expressions,
while powerful, may not provide all the expressions you need.
For this reason, it is possible to write your own extensions to the
expression language.  In this way you can specify abritrarily complicated
functions.
Note however that this will only allow you to define new columns or subsets
where each cell is a function only of the other cells in the same
row - it will not allow values in one row to be functions of values
in another.
</p>

<p>In order to do this, you have to write and compile a 
(probably short) program
in the Java language.  A full discussion of how to go about this
is beyond the scope of this document, so if you are new 
to Java and/or programming you may need to find a friendly local 
programmer to assist (or mail the author or Starlink's 
<webref url="http://www.starlink.ac.uk/quick/">QUICK</webref> service).
The following explanation is aimed at Java programmers, but may not
be incomprehensible to non-specialists.
</p>

<p>The steps you need to follow are:
<ol>
<li>Write and compile a class containing one or more static public 
    methods representing the function(s) required</li>
<li>Make this class available on the application's classpath at runtime
    as described in <ref id="jvmClasspath"/></li>
<li>Specify the class's name to the application,
    <em>either</em> as the value of the
    <code>gnu.jel.static.classes</code> system property (colon-separated
    if there are several) as described in <ref id="jvmProperties"/>
    <em>or</em> during a run using the 
    <ref id="MethodWindow">Available Function Window</ref>'s
    <label>Add Class</label> (&IMG.ADD;) button</li>
</ol>
</p>

<p>Any public static methods defined in the classes thus specified
will be available for use in the 
<ref id="SyntheticColumnQueryWindow">Synthetic Column</ref> or 
<ref id="SyntheticSubsetQueryWindow">Algebraic Subset</ref> windows.
They should be defined to take and return the relevant primitive or
Object types for the function required.
For instance a class written as follows would define a three-value average:
<verbatim>
    public class AuxFuncs {
        public static double average3( double x, double y, double z ) {
            return ( x + y + z ) / 3.0;
        }
    }
</verbatim>
and the expression "<code>average3($1,$2,$3)</code>" could then
be used to define a new synthetic column, giving the average of
the first three existing columns.
Exactly how you would build this is dependent on your system, 
but it might involve doing something like the following:
<ol>
<li>Writing a file called "AuxFuncs.java" containing the above code</li>
<li>Compiling it using a command like "<code>javac AuxFuncs.java</code>"</li>
<li>Starting up TOPCAT with the flags: 
    "<code>topcat -Dgnu.jel.static.classes=AuxFuncs -classpath .</code>"</li>
</ol>
</p>

</subsect>

</sect>

<sect id="invoke">
<subhead><title>Invoking TOPCAT</title></subhead>

<p>Starting up TOPCAT may just be a case of typing "<code>topcat</code>" or
clicking on an appropriate icon and watching the
<ref id="ControlWindow">Control Window</ref> pop up.
If that is the case, and it's running happily for you, 
you can probably ignore this section.
What follows is a description of how to start the program up, 
and various command line arguments and configuration options which can't be 
changed from within the program.
Actually obtaining the program is not covered here; please see
the TOPCAT web page <webref url="http://www.starlink.ac.uk/topcat/"/>.
</p>

<p>There are various ways of starting up TOPCAT depending on how (and whether)
it has been installed on your system; some of these are described below.
</p>

<p>There may be some sort of short-cut icon on your desktop which
starts up the program - in this case just clicking on it will probably work.
Failing that you may be able to locate the
jar file (<code>topcat.jar</code> or <code>topcat-full.jar</code>)
and click on that.  These files would be located in the
<code>java/lib/topcat/</code> directory in a standard Starjava installation.
Note that when you start by clicking on something
you may not have the option of entering
any of the command line options described below.
</p>

<p>Alternatively you will have to invoke the program from the command line.
If you have the full starjava installation on a Unix-like operating
system, you can use the <code>topcat</code> script, which should
be in the <code>java/bin/</code> directory.  So if that directory is
on your path, you can write:
<verbatim>
   topcat [java-args] [topcat-args]
</verbatim>
In this case any arguments which start <code>-D</code> or <code>-X</code>
are assumed to be arguments to the java command,
a <code>-classpath</code> <var>path</var> defines a class path to
be used in addition to the TOPCAT classes,
and any remaining arguments are used by TOPCAT.
</p>

<p>If you don't have the starjava Unix installation to start from the
command line you will have to use the <code>java</code> command itself.
The most straightforward way of doing this will look like:
<verbatim>
   java [java-args] -jar path/to/topcat.jar [topcat-args]
</verbatim>
(or the same for <code>topcat-full.jar</code>).
However <strong>NOTE</strong>: using java's <code>-jar</code> flag ignores
any other class path information, such as the CLASSPATH environment
variable or java's <code>-classpath</code> flag - see <ref id="jvmClasspath"/>.
</p>

<p>Note that Java
<webref url="http://java.sun.com/products/javawebstart/">Web Start</webref>
can also be used to invoke the program
without requiring any prior download/installation - sorry, this isn't
documented properly here yet.
</p>

<p>The meaning of the optional 
<code>[topcat-args]</code> 
and 
<code>[java-args]</code>
sequences are described in 
<ref id="topcatArgs"/> and 
<ref id="jvmOpt"/> below respectively.
</p>

<subsect id="topcatArgs">
<subhead><title>TOPCAT Command-line Arguments</title></subhead>

<p>You can start TOPCAT from the command line with no arguments -
in this case it will just pop up the command window from which you
can load in tables.  However you may specify flags and/or table locations.
</p>

<p>Curently the only defined flags are these:
<dl>
<dt>-h</dt>
<dd><p>If the <code>-h</code> flag is given, TOPCAT will write a short usage
    message and exit straight away.
</p></dd>
<dt>-demo</dt>
<dd><p>The <code>-demo</code> flag causes the program to start up with
    a few demonstration tables loaded in.  You can use these to play
    around with its facilities.
</p></dd>
</dl>
</p>

<p>Other arguments on the command line are taken to be the locations
of tables.  Any tables so specified will be loaded into TOPCAT at startup.
These locations are typically filenames, but could also
be URLs or SQL queries, or perhaps something else.  In addition
they may contain "fragment identifiers" (with a "#") to locate a table within
a given resource, so that for instance the location
<verbatim>
   /my/data/cat1.fits#2
</verbatim>
means the second extension in the multi-extension FITS file
<code>/my/data/cat1.fits</code>.
</p>

<p>Note that options to Java itself may also be specified on the command-line,
as described in <ref id="jvmOpt">the next section</ref>.
</p>

</subsect>

<subsect id="jvmOpt">
<subhead><title>Java Options</title></subhead>

<p>As described above, depending on how you
invoke TOPCAT you may be able to specify arguments to Java itself
(the "Java Virtual Machine") which affect how it runs.
These may be defined on the command line or in some other way.
The following subsections describe how to control Java in ways 
which may be relevant to TOPCAT;
they are however somewhat dependent on
the environment you are running in, so you may experience 
OS-dependent variations.
</p>

<subsubsect id="jvmClasspath">
<subhead><title>Class Path</title></subhead>

<p>The classpath is the list of places that Java looks to find 
the bits of compiled code that it uses to run an application.
When running TOPCAT this always has to include the TOPCAT classes
themselves - this is part of the usual invocation 
and is described in <ref id="invoke"/>.  
However, for certain things Java might need to find some other classes, 
in particular for:
<ul>
<li>JDBC drivers (see <ref id="jdbcConfig"/>)</li>
<li>Providing extended algebraic functions (see <ref id="jelExtend"/>)</li>
<li>Launching Mirage (see <ref id="mirage"/>)</li>
</ul>
</p>

<p>If you are going to use these facilities you will need to start the
program with additional class path elements that point to the location
of the classes required.  How you do this depends on how you 
are invoking TOPCAT.
If you are using tht <code>topcat</code> startup script, you can write:
<verbatim>
    topcat -classpath <var>other-paths</var> ...
</verbatim>
(this adds the given paths to the standard ones required for TOPCAT itself).
If you are invoking java directly, then you can either write on the
command line:
<verbatim>
    java -classpath path/to/topcat.jar:<var>other-paths</var>
         uk.ac.starlink.topcat.Driver ...
</verbatim>
or set the CLASSPATH environment variable something like this:
<verbatim>
    setenv CLASSPATH path/to/topcat.jar:<var>other-paths</var>
</verbatim>
In any case, multiple (extra) paths should be separated by colons
in the <var>other-paths</var> string.
</p>

<p>Note that if you are running TOPCAT using java's <code>-jar</code>
flag, any attempt you make to specify the classpath will be ignored!
This is to do with Java's security model.
If you need to specify a classpath which includes more than the
TOPCAT classes themselves, you can't use <code>java -jar</code>.
</p>

</subsubsect>

<subsubsect id="jvmMemory">
<subhead><title>Memory Size</title></subhead>

<p>If TOPCAT fails during operation with a message that says something
about a <code>java.lang.OutOfMemoryError</code>, then your heap
size is too small for what you are trying to do.  You will have to
run java with a bigger heap size using the <code>-Xmx</code> flag.
Invoking TOPCAT from the <code>topcat</code> script you would write
something like:
<verbatim>
    topcat -Xmx256M ...
</verbatim>
or using java directly:
<verbatim>
    java -Xmx256M ...
</verbatim>
which means use up to 256 megabytes of memory (don't forget the "M"
for megabyte).  JVMs typically default to a heap size of 64M.
You probably don't want to specify a heap size larger than the
physical memory of the machine that you are running on.
</p>

<p>There are other types of memory and tuning options controlled 
using options of the form <code>-X&lt;something-or-other&gt;</code>;
if you're feeling adventurous you may be able to find out about these
by typing "<code>java -X</code>".
</p>

</subsubsect>

<subsubsect id="jvmProperties">
<subhead><title>System properties</title></subhead>

<p>System properties are a way of getting information into Java
(they are the Java equivalent of environment variables).
The following ones have special significance within TOPCAT:
<ul>
<li><code>jdbc.drivers</code>:
    The JDBC driver classes using which SQL databases can be accessed
    (see <ref id="jdbcConfig"/>)</li>
<li><code>gnu.jel.static.classes</code>:
    Classes containing static methods which define user-provided
    functions for synthetic columns or subsets
    (see <ref id="jelExtend"/>)</li>
</ul>
In both these cases, if the value has multiple elements they should
be separated by colons.
</p>

<p>To define these properties on the command line
you use the <code>-D</code> flag, which has the form
<verbatim>
    -D&lt;property-name&gt;=&lt;value&gt;
</verbatim>
If you're using the TOPCAT startup script, you can write something like:
<verbatim>
    topcat -Djdbc.drivers=org.postgresql.Driver ...
</verbatim>
or if you're using the <code>java</code> command directly:
<verbatim>
    java -Djdbc.drivers=org.postgresql.Driver ...
</verbatim>
</p>

<p>Alternatively you may find it more convenient to 
write these definitions in a file called
<code>.starjava.properties</code> in your home directory; the above
command-line flag would be equivalent to inserting the line:
<verbatim>
    jdbc.drivers=org.postgresql.Driver
</verbatim>
in your <code>.starjava.properties</code> file.
</p>

</subsubsect>

</subsect>

<subsect id="jdbcConfig">
<subhead><title>JDBC Configuration</title></subhead>

<p>This section describes additional configuration which must be
done to allow TOPCAT to access SQL-compatible relational databases
for reading (see <ref id="inSql"/>) or
writing (see <ref id="outSql"/>) tables.
If you don't need to talk to SQL-type databases, 
you can ignore the rest of this section.
The steps described here are the standard ones
for configuring JDBC (which sort-of stands for Java Database Connectivity),
described in more detail on 
<webref url="http://java.sun.com/j2se/1.4/docs/guide/jdbc/"
        >Sun's JDBC web page</webref>.
</p>

<p>To use TOPCAT with SQL-compatible databases you must:
<ul>
<li>Have access to an SQL-compatible database locally or over the network</li>
<li>Have a JDBC driver appropriate for that database</li>
<li>Install this driver for use with TOPCAT</li>
<li>Know the format the driver uses for URLs to access database tables</li>
<li>Have appropriate privileges on the database to perform the
    desired operations</li>
</ul>
Installing the driver consists of two steps:
<ol>
<li>Set the <code>jdbc.drivers</code> system property to the name of the
    driver class as described in <ref id="jvmClasspath"/></li>
<li>Ensure that the classpath you are using includes this driver class
    as described in <ref id="jvmProperties"/></li>
</ol>
</p>

<p>These steps are all standard for use of the
<webref url="http://java.sun.com/j2se/1.4/docs/guide/jdbc/">JDBC</webref>
system.
</p>

<p>To the author's knowledge, TOPCAT has so far successfully been used
with the following RDBMSs and corresponding JDBC drivers:
<dl>

<dt><webref url="http://www.mysql.org/">MySQL</webref></dt>
<dd><p>MySQL 3.23.55 on Linux has been tested with the
    <webref url="http://www.mysql.com/products/connector/j/"
            >Connector/J</webref>
    driver version 3.0.8 and seems to work, though tables with very many 
    (hundreds of) columns cannot be written owing to SQL statement 
    length restrictions.
    Note there is known to be a column metadata bug in version 3.0.6 of the
    driver which can cause a ClassCastException error when tables are written.
    </p></dd>

<dt><webref url="http://www.postgresql.org/">PostgreSQL</webref></dt>
<dd><p>PostgreSQL 7.4.1 apparently works with the driver it comes with.
    Thanks to Jonathan Irwin for writing a patch to fix a problem with
    this driver.
    </p></dd>
</dl>
Other RDBMSs and drivers may or may not work - please let us know the
results of any experiments you carry out.
</p>

</subsect>

</sect>

<sect>
<subhead><title>Acknowledgements</title></subhead>

<p>TOPCAT and the table-handling classes on which it relies 
(<webref url="http://www.starlink.ac.uk/stil/">STIL</webref>) 
have mostly been written by
<webref url="http://www.star.bristol.ac.uk/~mbt/">Mark Taylor</webref> in the
<webref url="http://www.star.bristol.ac.uk/"
        >Bristol Univesity astrophysics group</webref>
for the <webref url="http://www.starlink.ac.uk/">Starlink</webref> project.
</p>

<p>Inspiration for many of its features has been taken from the
following pre-existing tools:
<ul>
<li><webref url="http://cm.bell-labs.com/who/tkh/mirage/index.html"
            >Mirage</webref>
    (Bell labs)</li>
<li><webref url="http://vo.iucaa.ernet.in/~voi/voplot.htm">VOPlot</webref>
    (VO-India)</li>
</ul>
</p>

<p>Apart from Java itself, the following external libraries provide
important bits of its functionality:
<ul>
<li><webref url="http://ptolemy.eecs.berkeley.edu/java/ptplot5.2/ptolemy/plot/doc/index.htm">Ptplot</webref>
    (Ptolemy) for plotting</li>
<li><webref url="http://galaxy.fzu.cz/JEL/">JEL</webref>
    (GNU) for algebraic expression evaluation</li>
<li><webref url="http://www.sdss.jhu.edu/htm/">HTM</webref>
    (Sloan Digital Sky Survey) for celestial sphere row matching</li>
</ul>
</p>

<p>The following users, testers and programmers have supplied useful
comments (apologies for any missed out):
<ul>
<li>Clive Page (AstroGrid, Leicester)</li>
<li>David Giaretta (Starlink, RAL)</li>
<li>Malcolm Currie (Starlink, RAL)</li>
<li>Clive Davenhall (Royal Observatory Edinburgh)</li>
<li>Peter Draper (Starlink, Durham)</li>
<li>Alasdair Allan (Starlink, Exeter)</li>
<li>Tim Jenness (JACH)</li>
<li>Roy Platon (RAL)</li>
<li>Norman Gray (Starlink, Glasgow)</li>
<li>Jonathan Irwin (Cambridge)</li>
<li>Mark Allen (Strasbourg)</li>
<li>Bob Mann (Edinburgh/Strasbourg)</li>
<li>Mike Read (ROE)</li>
<li>David Mills (Bristol)</li>
<li>Douglas Morgan (Bristol)</li>
<li>James Price (Bristol)</li>
<li>Francois Ochsenbein (Strasbourg)</li>
</ul>
</p>

</sect>


<sect id="release">
<subhead><title>Release Notes</title></subhead>

<p>This is TOPCAT, Tool for OPerations on Catalogues And Tables.
It is a general purpose viewer and editor for astronomical tabular
data developed by <webref url="http://www.starlink.ac.uk/">Starlink</webref>.
<dl>
<dt>Author</dt>
<dd><p>Mark Taylor (Starlink, Bristol University)</p></dd>

<dt>Email</dt>
<dd><p><webref url="mailto:m.b.taylor@bristol.ac.uk"
                          >m.b.taylor@bristol.ac.uk</webref></p></dd>

<dt>WWW</dt>
<dd><p><webref url="http://www.starlink.ac.uk/topcat/"/></p></dd>

</dl>
User comments, suggestions, requests and bug reports to the above address
are welcomed.
</p>

<p>Releases to date have been as follows:
<dl>
<dt>Version 1.1-3 (5 May 2004)</dt>
<dd><p>
<ul>
<li>Functions provided for radians&lt;-&gt;sexagesimal conversion</li>
</ul>
</p></dd>

<dt>Version 1.1-0 (21 April 2004)</dt>
<dd><p>
<ul>
<li>User interface redesigned - now based around Control Window 
    not table browser (much easier to work with multiple tables).</li>
<li>Extensive facilities for table joining by matching rows between 
    multiple tables or within a single one.</li>
<li>Documentation much improved and available on- or off-line as &SUN.253;.</li>
<li>Self-contained table access library 
    <webref url="http://www.starlink.ac.uk/stil/">STIL</webref> now provided
    as a separate product.</li>
<li>Tables can be concatenated.</li>
<li>Better top-level control over window proliferation.</li>
<li>Columns can now be hidden/revealed not just deleted.</li>
<li>Additional output formats/variants supported:
    <ul>
    <li>VOTable using BINARY or FITS encoding, inline or by reference</li>
    <li>Machine-readable plain ASCII stream</li>
    <li>HTML &lt;TABLE&gt; element or document</li>
    </ul>
</li>
<li>Hybrid DOM/SAX parsing of VOTables for improved efficiency/memory usage.</li>
<li>New flag <code>-demo</code> starts up with demo data.</li>
<li>Miscellaneous efficiency improvements and bug fixes.</li>
</ul>
</p></dd>

<dt>Version 0.5-1 (18 November 2003)</dt>
<dd><p>
<ul>
<li>Rewrite of FITS binary table access for big efficiency improvements.</li>
<li>It's now possible to plug in user-defined algebraic methods at runtime.</li>
<li>Improved unit testing leads to some bugfixes.</li>
</ul>
</p></dd>

<dt>Version 0.5b (20 October 2003)</dt>
<dd><p>
<ul>
<li>Can now read plain text format tables.</li>
<li>FITS files of arbitrary size can now be read
    (they are not loaded into memory).</li>
<li>TOPCAT can now run without errors in a secure environment
    (e.g. as an unsigned jar file under WebStart).  Of course some actions
    such as Save Table are unavailable in this context.</li>
<li>Files compressed with Unix <code>compress</code> now work
    (as well as gzip and bzip2).</li>
<li>Added hierarchy browser to load dialog.</li>
<li>Added integral demo data (accessible from load dialog).</li>
<li>Can now drag tables from
    <webref url="http://www.starlink.ac.uk/treeview/">Treeview</webref>
    into TOPCAT load dialog (or load button).</li>
<li>Some bugfixes.</li>
</ul>
</p></dd>

<dt>Version 0.4-1b (10 July 2003)</dt>
<dd><p>
<ul>
<li>Fixed a VOTable output bug (not escaping XML special characters).</li>
<li>Fixed a serious FITS output bug.</li>
<li>Improved bad value handling for FITS tables.</li>
</ul>
</p></dd>

<dt>Version 0.4b (8 July 2003)</dt>
<dd><p>
<ul>
<li>Row subset count column in subsets window.</li>
<li>Fixed and improved broken Parameter window.</li>
<li>Fixed output of table name and parameters.</li>
<li>Output to LaTeX <code>tabular</code> environment now available.</li>
<li>SQL access buttons now greyed out when no JDBC drivers are present.</li>
<li>UCD selection now available from New Synthetic Column dialogue.</li>
<li>Column metadata display made more logical and flexible.</li>
<li>Column cardinality now calculated in Stats window.</li>
<li>Sythetic column expressions and most other column metadata now
    editable.</li>
<li>Null value support in evaluated expressions.</li>
<li>Integral example data provided.</li>
<li>Hierarchical browser for tables available in load dialogue.</li>
</ul>
</p></dd>

<dt>Version 0.3b (4 June 2003)</dt>
<dd><p>First public release
</p></dd>

</dl>
</p>

</sect>

<appendices>

<sect id="windows">
<subhead><title>TOPCAT Windows</title></subhead>

<p>This appendix gives a tour of all the windows that form the
TOPCAT application, explaining the anatomy of the windows and
the various tools, menus and other controls.
Attributes common to many or all windows are described in
<ref id="commonFeatures"/>, and the subsequent sections describe
each of the windows individually.
</p>

<p>When the application is running, the <label>Help For Window</label>
(&IMG.HELP;) toolbar button will display the appropriate description 
for the window on which it is invoked.
</p>


<subsect id="commonFeatures">
<subhead><title>Common Window Features</title></subhead>

<p>This section describes some features which are common to many or
all of the windows used in the TOPCAT program.
</p>

<subsubsect>
<subhead><title>Toolbar</title></subhead> 

<p>Each window has a toolbar at the top containing various buttons
representing actions that can be invoked from the window.
Most of them contain the following buttons:
<dl>

<dt>&IMG.CLOSE; Close</dt> 
<dd><p>Closes the window.  This convenience button 
    has the same effect as closing the window
    in whatever way your graphics platform normally allows.
    In most cases, closing the window does not lose state associated with
    it (such as fields filled in); if you recover the window later it
    will look the same as when you closed it.
    </p></dd>

<dt>&IMG.HELP; Help</dt>
<dd><p>Pops up a <ref id="HelpWindow">Help browser</ref> window, or makes
    sure it is visible if it has already been opened.
    The window will display help information relevant to the window in
    which you pushed this button.
    </p></dd> 

</dl>
</p>

<p>Buttons in the toolbar often appear in menus of the same window as well;
you can identify them because they have the same icon.
This is a convenience; invoking the action from the toolbar or from
the menu will have the same effect.
</p>

<p>Often an action will only be possible in certain circumstances, 
for instance if some rows in the associated <ref id="JTable">JTable</ref> 
have been selected.
If the action is not possible (i.e. it would make no sense to invoke it)
then the button in the toolbar and the menu option will be greyed out,
indicating that it cannot be invoked in the current state.
</p>

</subsubsect>

<subsubsect id="commonMenus">
<subhead><title>Menus</title></subhead>

<p>Most windows have a menu bar at the top containing one or more menus.
These menus will usually provide the actions available from the 
toolbar (identifiable because they have the same icons), and
may provide some other less-commonly-required actions too.
</p>

<p>Here are some of the menus common to several windows:
<dl>

<dt>File menu</dt>
<dd><p>Nearly all windows have this menu.
    At least the following options are available:
    <dl>

    <dt>&IMG.CLOSE; Close</dt>
    <dd><p>Closes the window.  This convenience button 
        has the same effect as closing the window
        in whatever way your graphics platform normally allows.
        In most cases, closing the window does not lose state associated with
        it (such as fields filled in); if you recover the window later it
        will look the same as when you closed it.
        </p></dd>

    <dt>&IMG.EXIT; Exit</dt>
    <dd><p>Exits TOPCAT.  You will be prompted to confirm this action,
        since it might result in loss of data.
        </p></dd>

    </dl>
    </p></dd>

<dt>Help menu</dt>
<dd><p>Nearly all windows have this menu.
    The following options are available:
    <dl>

    <dt>Help</dt>
    <dd><p>Pops up the <ref id="HelpWindow">Help Window</ref>.
        </p></dd>

    <dt>&IMG.HELP; Help For Window</dt>
    <dd><p>Pops up the <ref id="HelpWindow">Help Window</ref>;
        the window will display help information relevant to the window in
        which the menu appears.
        </p></dd>

    <dt>About TOPCAT</dt>
    <dd><p>Pops up a little window giving information on the version and
        authorship of the program.
        </p></dd>

    </dl>
    </p></dd>

<dt>Display menu</dt>
<dd><p>This menu is available for most windows which display their data
    using a <ref id="JTable">JTable</ref> component.
    If present, it contains a list of the columns in the JTable with 
    tickboxes next to them - clicking on a column name in this menu
    toggles whether the column is visible in the window.
    </p></dd>

</dl>
</p>

</subsubsect>

<subsubsect id="JTable">
<subhead><title>JTables</title></subhead>

<figure>
<caption><px>An example JTable</px></caption>
<figureimage src="&FIG.JTable;"/>
</figure>

<p>Many of the windows, including the 
<ref id="TableViewerWindow">Data Window</ref>,
display their data in a Java widget called a <label>JTable</label>.
This displays a grid of values, with headings for each column, in
a window which you can scroll around.  Although JTables are used for
a number of different things (for instance, showing the table data itself
in the <ref id="TableViewerWindow">Data Window</ref>
and showing the column metadata in the 
<ref id="ColumnInfoWindow">Columns Window</ref>), 
the fact that the same widget is
used provides a common look and feel.
</p>

<p>Here are some of the things you can do with a JTable:
<dl>
<dt>Scroll around</dt>
<dd><p>Using the scrollbars which may appear to the right and below the
    table you can scroll around it to see parts which are not initially
    visible.  
    You can grab the sliders and drag them around by holding the mouse
    button down while you move it, or click in the slider "trough" one side
    or other of the current slider position to move a screenful.
    Under some circumstances the cursor arrow keys and PageUp/PageDown
    keys may move the table too.
    If the JTable is small enough to fit within the window the scrollbars
    may not appear.
    </p></dd>

<dt>Move columns</dt>
<dd><p>By clicking on the header (grey title bit at the top) of a column
    and dragging it left or right, you can change the order of columns
    as displayed.  In some cases 
    (the <ref id="TableViewerWindow">Data Window</ref>)
    this actually has the effect of changing the order of the columns
    in the table; in other cases it is just cosmetic.
    </p></dd>

<dt>Resize columns</dt>
<dd><p>By dragging on the line between row headers you can change the width
    of the columns in the table.
    </p></dd>

<dt>Edit cells</dt>
<dd><p>In some cases, cells are editable.  If they are, then double-clicking
    in the cell will begin an edit session for that cell, and pressing
    Return will confirm that the edit has been made.
    </p></dd>

<dt>Select rows</dt>
<dd><p>Sometimes rows can be highlighted; you can select one row by clicking
    on it or a number of contiguous rows by clicking and dragging from the
    first to the last.
    To add further rows to a set already selected without deselecting
    the first lot, hold the "Control" key down while you do it.
    </p></dd>
</dl>
</p>

<p>In some cases where a JTable is displayed, there will be a menu
on the menu bar called <label>Display</label>.
This permits you to select which columns are visible and which are hidden.
Clicking on the menu will give you a list of all the available columns
in the table, each with a checkbox by it; click the box to toggle
whether the column is displayed or not.
</p>

</subsubsect>

</subsect>

<subsect id="ControlWindow">
<subhead><title>Control Window</title></subhead>

<figure>
<caption><px>The Control Window</px></caption>
<figureimage src="&FIG.ControlWindow;"/>
</figure>

<p>The Control Window is the main window from which all of TOPCAT's
activities are controlled.  It lists the known tables, summarises
their characteristics, and allows you to open other windows for
more specialised tasks.
When TOPCAT starts up you will see this window - it may or may not have
some tables loaded into it according to how you invoked the program.
</p>

<p>The window consists of two main parts:
the <label>Table List</label> panel on the left, and
the <label>Current Table Properties</label> panel on the right.
Tables loaded into TOPCAT are shown in the Table List,
each identified by an index number which never changes for a given table,
and a label which is initially set from its location, but can be changed
for convenience.
</p>

<p>One of the tables in the list is highlighted, 
which means it is the currently selected table;
you can change the selection by clicking on an item in the list.
Information about the selected table is shown
in the properties panel on the right.  This shows such things as the
number of rows and columns, current sort order, current row subset
selection and so on.  It contains some controls which allow you to
change these properties.
Additionally, many of the buttons in the toolbar relate to the
currently selected table.
</p>

<p>The Table List, Current Table Properties panel, and
actions available from the Control Window's toolbar and menus 
are described in the following subsections.
</p>

<subsubsect>
<subhead><title>Table List</title></subhead>

<p>The Table List panel on the left of the Control Window is 
pretty straightforward - it lists all the tables currently known
to TOPCAT.  If a new table is introduced by loading it from the 
<ref id="LoadQueryWindow">Load Window</ref> or as a result of 
some action such as <ref id="join">table joining</ref> then its
name and number will appear in this list.
The currently selected table is highlighted - clicking on a different
table name (or using the arrow keys if the list has keyboard focus) 
will change the selection.  The properties of the
selected table are displayed in the Current Table Properties panel
to its right.
</p>

<p>If you double-click on a table in the list, or press Return
while it is selected, that table's 
<ref id="TableViewerWindow">Data Window</ref> will appear.
</p>

<p>Certain other applications
(<webref url="http://www.starlink.ac.uk/treeview/">Treeview</webref>,
 <webref url="http://www.starlink.ac.uk/frog/">FROG</webref>,
 or even another instance of TOPCAT)
can interoperate with TOPCAT using drag-and-drop, and for these the
table list is a good place to drag/drop tables.
For instance you can drag a table node off of the main panel of 
Treeview and drop it onto the table list of TOPCAT, and you will
be able to use that table as if it had been loaded from disk.
</p>

</subsubsect>

<subsubsect>
<subhead><title>Current Table Properties panel</title></subhead>

<p>The <label>Current Table Properties</label> panel on the right hand
side of the Control Window contains a number of
controls which relate to the currently selected table and its 
<ref id="apparent" plaintextref="yes">Apparent properties</ref>;
they will be blank if no table is selected.
Here is what the individual items mean:
<dl>
<dt>Label</dt>
<dd><p>The short name associated with the selected table.
    It is used in the
    Table List panel and in labelling view windows so you can see which
    table they refer to.  It usually set initially according to where
    the table came from, but you can change it by typing into the text field.
    </p></dd>

<dt>Location</dt>
<dd><p>The original source of the selected table.
    This is typically a filename or URL (perhaps abbreviated), 
    but may be something else depending
    on where the table came from.
    </p></dd>

<dt>Name</dt>
<dd><p>A name associated with the selected table.
    This may be derived from the table's filename if it had one or from
    some naming string stored within the table metadata.
    </p></dd>

<dt>Rows</dt>
<dd><p>The number of rows in the selected table.
    If the current <ref id="subsets">Row Subset</ref> does not include all the
    rows, then an indication of how many are visible within that subset
    will be given too.
    </p></dd>

<dt>Columns</dt>
<dd><p>The number of columns in the selected table.
    If some are currently hidden 
    (not included in the current <ref id="columns">Column Set</ref>),
    an indication of how many are visible will be given too.
    </p></dd>

<dt>Sort Order</dt>
<dd><p>The column (if any) which determines the current
    <ref id="order">Row Order</ref>.
    A selector shows the column (if any) on which the rows of the 
    Apparent Table are sorted
    and allows you to choose a different one.  
    The little arrow beside it
    indicates whether the sort is ascending or descending.
    </p></dd>

<dt>Row Subset</dt>
<dd><p>The name of the current <ref id="subsets">Row Subset</ref>.
    A selector shows the name of the subset which determines which 
    rows are part of the Apparent Table
    and allows you to choose another one.  "All" indicates that all
    rows are included.
    </p></dd>

</dl>
</p>

</subsubsect>


<subsubsect id="controlTools">
<subhead><title>Toolbar Buttons</title></subhead>

<p>The following buttons deal with table import and export:
<dl>

<dt>&IMG.LOAD; Load Table</dt>
<dd><p>Pops up the <ref id="LoadQueryWindow">Load Table</ref> dialogue
    which allows you to load a table into TOPCAT.
    If a table is loaded it becomes the new current table.
    </p></dd>

<dt>&IMG.SAVE; Save Table</dt>
<dd><p>Pops up the <ref id="StarTableSaver">Save Table</ref> dialogue
    which allows you to write out the current 
    <ref id="apparent">Apparent Table</ref>.
    </p></dd>

<dt>&IMG.COPY; Duplicate Table</dt>
<dd><p>Adds a new copy of the current <ref id="apparent">Apparent Table</ref>
    to the list of known tables.  This is like loading in the current table
    again, except that its apparent characteristics 
    become the basic characteristics of the copied one, so for instance
    whatever is the current row order becomes the natural order of the 
    new one.
    </p></dd>

</dl>
</p>

<p>The following buttons display various views of the current table;
these views are described in more details in <ref id="views"/>.
<dl>

<dt>&IMG.VIEWER; <ref id="TableViewerWindow">Data Window</ref></dt>
<dd><p>Displays the table rows and columns in a scrollable viewer so you
    can see the cell contents themselves.
    </p></dd>

<dt>&IMG.PARAMS; <ref id="ParameterWindow">Parameters Window</ref></dt>
<dd><p>Displays table "parameters", that is metadata which applies to the
    whole table.
    </p></dd>

<dt>&IMG.COLUMNS; <ref id="ColumnInfoWindow">Columns Window</ref></dt>
<dd><p>Displays metadata about each column such as data type, units, UCDs etc.
    </p></dd>

<dt>&IMG.SUBSETS; <ref id="SubsetWindow">Subsets Window</ref></dt>
<dd><p>Displays the currently defined 
    <ref id="subsets" plaintextref="yes">row subsets</ref>
    and enables new ones to be defined.
    </p></dd>

<dt>&IMG.STATS; <ref id="StatsWindow">Statistics Window</ref></dt>
<dd><p>Displays a window for calculating 
    statistical quantities for the values in each
    column of the table.
    </p></dd>

<dt>&IMG.PLOT; <ref id="PlotWindow">Plot window</ref></dt>
<dd><p>Permits plotting of columns against each other.
    </p></dd>

</dl>
</p>

<p>The following buttons deal with matching and joining tables
(see <ref id="join"/> for discussion of these functions):
<dl>

<dt>&IMG.CONCAT; <ref id="ConcatWindow">Concatenation Window</ref></dt>
<dd><p>Displays a dialog for joining tables top-to-bottom.
    </p></dd>

<dt>&IMG.MATCH1; <ref id="MatchWindow1">Internal Match Window</ref></dt>
<dd><p>Displays a dialog for finding internal matches between the rows
    of a table.
    </p></dd>

<dt>&IMG.MATCH2; <ref id="MatchWindow">Pair Match Window</ref></dt>
<dd><p>Displays a dialog for joining tables side-by-side by locating
    rows which match between them.
    </p></dd>

</dl>
</p>

</subsubsect>

<subsubsect id="controlMenus">
<subhead><title>Menu Items</title></subhead>

<p>This section describes actions available from the Control Window
menus additional to those also available from the toolbar
(described in <ref id="controlTools">the previous section</ref>) 
and those common to other windows (described in <ref id="commonMenus"/>).
</p>

<p>The <label>File</label> menu contains the following additional actions:
<dl>

<dt>&IMG.DELETE; Discard Table</dt>
<dd><p>Removes the current table from the list and closes and forgets any 
    view windows associated with it.  A discarded table cannot be reinstated.
    You will be prompted to confirm this action.
    Discarding a table in this way <em>may</em> free up memory, for other 
    operations, but often will not; 
    whether it does or not depends on the details of
    where the table comes from.
    </p></dd>

<dt>Export to Mirage</dt>
<dd><p>Starts up the external Mirage application on the current apparent table.
    This action is only available if Mirage is on your classpath.
    See <ref id="mirage"/>.
    </p></dd>

</dl>
</p>

<p>The <label>Windows</label> menu contains actions for controlling which
<ref id="views" plaintextref="yes">table view windows</ref>
are currently visible on the screen.
If you have lots of tables and are using various different views of 
several of them, the number of windows on the screen can get out of
hand and it's easy to lose track of what window is where.
The actions on this menu do some combination of 
either hiding or revealing all the various view windows associated
with either the selected table or all the other ones.
Windows hidden are removed from the screen but if reactivated
(e.g. by using the appropriate toolbar button) will come back in the same
place and the same state.  Revealing all the windows associated with
a given table means showing all the view windows which have been opened
before (it won't display windows which have never explicitly been opened).
<dl>

<dt>Show Selected Views Only</dt>
<dd><p>Reveal all view windows associated with the currently selected 
    table and hide all others.
    </p></dd>

<dt>Show Selected Views</dt>
<dd><p>Reveal all view windows which are associated with the currently
    selected table.
    </p></dd>

<dt>Show All Views</dt>
<dd><p>Reveal all view windows associated with all tables.
    </p></dd>

<dt>Hide Unselected Views</dt>
<dd><p>Hide all view windows associated with tables other than the 
    currently selected one.
    </p></dd>

<dt>Hide Selected Views</dt>
<dd><p>Hide all view windows associated with the currently selected table.
    </p></dd>

<dt>Hide All Views</dt>
<dd><p>Hide all the view windows.
    If you get really confused, this is a good one to select to clear up 
    your screen prior to reinstating the ones that you actually want to
    look at.
    </p></dd>

</dl>
</p>

<p>The <label>Joins</label> menu, as well as containing the actions
for table concatenation, internal matching and pair matching which 
are available from the toolbar, also gives you the option to join
three or four tables at once by matching rows.
These windows works pretty much the same as the 
<ref id="MatchWindow">Pair Matching Window</ref>,
but with more tables.
</p>

</subsubsect>

</subsect>

<subsect id="views">
<subhead><title>Table View Windows</title></subhead>

<p>Many of the windows you will see within TOPCAT display information
about a single table. 
There are several of these, each displaying a different aspect of
the table data - cell contents, statistics, column metadata, 
plotted values etc.
There is one of each type for each of the tables currently loaded,
though they won't necessarily all be displayed at once.
The title bar of these windows will say something like
<label>TOPCAT(3): Table Columns</label>,
which indicates that it is displaying information about the column 
metadata for the table labelled "3:" in the
<ref id="ControlWindow">Control Window</ref>.
</p>

<p>To open any of these windows, select the table of interest in
the Control Window and click the appropriate toolbar button
(or the equivalent item in the <label>Table Views</label> menu).
This will either open up a new window of the sort you have requested,
or if you have opened it before, will make sure it's visible.
</p>

<p>If you have lots of tables and are using various different views of 
several of them, the number of windows on the screen can get out of
hand and it's easy to lose track of what window is where.
In this case the Control Window's <label>Windows</label> menu
(described in <ref id="controlMenus"/>) can be handy to keep them
under control.
</p>

<p>The following sections describe each of these table view windows in turn.
</p>

<subsubsect id="TableViewerWindow">
<subhead><title>Data Window</title></subhead>

<figure>
<caption><px>Data Window</px></caption>
<figureimage src="&FIG.TableViewerWindow;"/>
</figure>

<p>The Data Window presents a <ref id="JTable">JTable</ref>
containing the actual cells of the 
<ref id="apparent" plaintextref="yes">Apparent Table</ref>.
You can display it using the <label>Table Data</label> (&IMG.TABLE;) 
button when the chosen table is selected in the
<ref id="ControlWindow">Control Window</ref>'s Table List.
</p>

<p>You can scroll around the table in the usual way. 
In most cases you can edit cells by double-clicking in them, though
some cells (e.g. ones containing arrays rather than scalars) cannot
currently be edited.  If it looks like an edit has taken place, it has.
</p>

<p>There is a grey column of numbers on the left of the JTable 
which gives the row index of each row.  This is the value of the
special Index column, which numbers each row of the original 
(not apparent) table starting at 1.
If the table has been <ref id="order">sorted</ref> these numbers 
may not be in order.
</p>

<p>Note that reordering the columns by dragging their headings around
will change the order of columns in the table's 
<ref id="columns">Column Set</ref> and hence the Apparent Table.
</p>

<p>The following buttons are available in the toolbar:
<dl> 
<dt>&IMG.INCLUDE_ROWS; Subset From Selected Rows</dt>
<dd><p>Defines a new <ref id="subsets">Row Subset</ref> consisting of those
    rows which are currently highlighted.  You can highlight a  
    contiguous group of rows by dragging the mouse over them; 
    further contiguous groups can be added by holding the  
    Control key down while dragging. 
    This action is only available when some rows have been selected.
    </p></dd>

<dt>&IMG.EXCLUDE_ROWS; Subset From Unselected Rows</dt>
<dd><p>Defines a new Row Subset consisting of those rows which are visible
    but currently not highlighted.  You can highlight a
    contiguous group of rows by dragging the mouse over them;
    further contiguous groups can be added by holding the
    Control key down while dragging.
    This action is only available when some rows have been selected.
    </p></dd>
</dl>
</p>

<p>As well as the normal menu, right-clicking over one of the columns
in the displayed table will present a
<label>Column Popup Menu</label>, which provides a convenient
way to do some things with the column in question:
<dl>

<dt>Hide</dt>
<dd><p>Hides the column.  It can be reinstated from the
    <ref id="ColumnInfoWindow">Columns window</ref>.
    </p></dd>

<dt>Synthetic Column</dt>
<dd><p>Pops up a 
    <ref id="SyntheticColumnQueryWindow">Synthetic Column dialogue</ref> 
    to insert a new synthetic column just after this one.
    </p></dd>

<dt>Sort up</dt>
<dd><p>Sorts the table rows according to ascending value of the contents of
    the column.  Only available if some kind of order (e.g. numeric or
    alphabetic) can sensibly be applied to the column.
    </p></dd>

<dt>Sort down</dt>
<dd><p>Sorts the table rows according to descending value of the contents of
    the column.  Only available if some kind of order (e.g. numeric or
    alphabetic) can sensibly be applied to the column.
    </p></dd>

</dl>
</p>

</subsubsect>


<subsubsect id="ParameterWindow">
<subhead><title>Parameters Window</title></subhead>

<figure>
<caption><px>Parameters Window</px></caption>
<figureimage src="&FIG.ParameterWindow;"/>
</figure>

<p>The Parameters Window displays metadata which applies to the whole table
(rather than that for each column).  
You can display it using the <label>Table Parameters</label> (&IMG.PARAMS;)
button when the chosen table is selected in the
<ref id="ControlWindow">Control Window</ref>'s Table List.
</p>

<p>In table/database parlance, an item of
per-table metadata is often known as a "parameter" of the table.
The number of rows and columns will always be listed; many table file
formats (VOTable excepted) 
don't have facilities for storing other table parameter metadata,
so there may not be much of interest displayed in this window.
</p>

<p>The display is a <ref id="JTable">JTable</ref> with one row for each
parameter.  It indicates the parameter's name, its value, the type of
item it is (integer, string etc) and other items of interest such as
units, dimensionality or UCD if they are defined.
If a column of the table has no entries
(for instance, the Units column might be empty because none of the
parameters has had units defined for it) then that column may be absent
from the display - in this case the <label>Display</label> menu can be
used to reveal it.
</p>

<p>You can edit some paramenter values and descriptions by double-clicking
on them as usual.  
It is not currently possible to add parameters; this should be added in
a future release.
</p>

</subsubsect>


<subsubsect id="ColumnInfoWindow">
<subhead><title>Columns Window</title></subhead>

<figure>
<caption><px>Columns Window</px></caption>
<figureimage src="&FIG.ColumnInfoWindow;"/>
</figure>

<p>The Columns Window displays a <ref id="JTable">JTable</ref>
giving all the information (metadata)
known about each column in the table.  
You can display it using the <label>Column Info</label> (&IMG.COLUMNS;)
button when the chosen table is selected in the 
<ref id="ControlWindow">Control Window</ref>'s Table List.
</p>

<p>The display may take a little bit
of getting used to, since each <var>column</var> in the main data table
is represented by a <var>row</var> in the JTable displayed here.
The order and widths of the columns of JTable widget can be
changed in the same way as those for the
<ref id="TableViewerWindow">Data Window</ref> JTable,
but this has no effect on the data.
</p>

<p>The leftmost column, labelled "Visible", contains a checkbox in
each row (one for each column of the data table).
Initially, these are all ticked.
By clicking on those boxes, you can toggle them between ticked and
unticked.  When unticked, the column in question will become hidden.
The row can still be seen in this window, but the corresponding data
column is no longer a part of
the <ref id="apparent">Apparent Table</ref>, so will not be seen
in the <ref id="TableViewerWindow">Data Window</ref> or appear in
exported versions of the table.
You can tick/untick multiple columns at once by highlighting a set of
rows by dragging the mouse over them and then using the
<label>Hide Selected</label> (&IMG.HIDE;) or 
<label>Reveal Selected</label> (&IMG.REVEAL;) 
toolbar buttons or menu items.
</p>

<p>Each column in the displayed JTable corresponds to one piece of
information for each of the columns in the data table -
column name, description, UCD etc.
Tables of different types (e.g. ones read from different input formats)
can have different categories of metadata.  By default a metadata
category is displayed in this JTable if at least one
table column has a non-blank
value for that metadata category, so for instance if no table columns
have a defined UCD then the UCD column will not appear.
Categories can be made to appear and disappear however by using the
<label>Display</label> menu.
The metadata items are as follows:
<dl>

<dt>Visible</dt>
<dd><p>Indicates whether the column is part of the Apparent Table.
    If this box is not filled in,
    then for most purposes the column will be hidden from display.
    You can toggle visibility by clicking on this column.
    </p></dd>

<dt>Name</dt>
<dd><p>The name of the column.
    </p></dd>

<dt>$ID</dt>
<dd><p>A unique and unchanging ID value for each column.   These are useful
    in defining algebraic expressions (see <ref id="jel"/>) since they are
    guaranteed unique for each column.  Although the column Name can
    be used as well, the Name may not be unique and may not have the
    correct form for use in an algebraic expression.
    </p></dd>

<dt>Class</dt>
<dd><p>The Java class of the items in that column.  You don't have to know
    very much Java to understand these; they are Float or Double for
    floating point numbers; Byte, Short, Integer or Long for integer
    numbers, Boolean for a logical (true/false) flag,
    or String for a string of ASCII or Unicode characters.
    There are other possibilities, but these will cover most.
    The characters '[]' after the name of the class indicates that each
    cell in the column holds an array of the indicated type.
    </p></dd>

<dt>Shape</dt>
<dd><p>Cells of a table can contain arrays as well as scalars.
    If the column contains an array type, this indicates the shape that
    it should be interpreted as.  It gives the dimensions in column-major
    order.  The last element may be a '*' to indicate that the size
    of the array may be variable.  For scalar columns, this item will be blank.
    </p></dd>

<dt>Units</dt>
<dd><p>The units in which quantities in this column are expressed.
    </p></dd>

<dt>Expression</dt>
<dd><p>The algebraic expression defining the values in this column.
    This will only be filled in if the column in question is a
    <ref id="SyntheticColumnQueryWindow">synthetic column</ref> 
    which you have added, rather than one present in
    the data in its original loaded form.
    </p></dd>

<dt>Description</dt>
<dd><p>A textual description of the function of this column.
    </p></dd>

<dt>UCD</dt>
<dd><p>The UCD associated with this column, if one is specified.
    UCDs are <webref url="http://vizier.u-strasbg.fr/doc/UCD.htx">Uniform
    Content Descriptors</webref>, and indicate the semantics
    of the values in this column.
    </p></dd>

<dt>UCD Description</dt>
<dd><p>If the string in the UCD column is the identifier of a known UCD,
    the standard description associated with that UCD is shown here.
    </p></dd>

</dl>
There may be other items in the list specific to the table in question.
</p>

<p>You can edit column names and some other entries in this JTable by 
double-clicking on them as usual.
</p>

<p>The order in which the rows are presented is determined
by the table's current <ref id="columns" plaintextref="yes">Column Set</ref>,
so can be changed by dragging the column headers around in the 
<ref id="TableViewerWindow">Data Window</ref>.
</p>

<p>The following buttons are available in the toolbar:
<dl>

<dt>&IMG.ADD; New Synthetic Column</dt>
<dd><p>This pops up a 
    <ref id="SyntheticColumnQueryWindow">Synthetic Column Window</ref>
    which allows you to define a new column in terms of the existing ones
    by writing an algebraic expression.
    The new column will be added by default after the last selected
    column, or at the end if none is selected.
    </p></dd>

<dt>&IMG.HIDE;  Hide Selected Column(s)</dt>
<dd><p>If any of the JTable rows are selected, then clicking this button
    will hide them, that is, remove them from the
    current <ref id="columns">Column Set</ref>.
    This has the same effect as deselecting all the checkboxes corresponding
    to these columns in the <label>Visible</label> column.
    Only available if some rows are selected.
    </p></dd>

<dt>&IMG.REVEAL; Reveal Selected Column(s)</dt>
<dd><p>If any of the JTable rows are selected, then clicking this button
    will make sure they are visible, that is, that they appear in
    the current <ref id="columns">Column Set</ref>.
    This has the same effect as selecting all the checkboxes corresponding
    to these columns in the <label>Visible</label> column.
    Only available if some rows are selected.
    </p></dd>

<dt>&IMG.UP; Sort Selected Up</dt>
<dd><p>If a single column is selected then the table's current 
    <ref id="order">Sort Order</ref> will be set to sort ascending on 
    that column.  Otherwise this action is not available.
    </p></dd>

<dt>&IMG.DOWN; Sort Selected Down</dt>
<dd><p>If a single column is selected then the table's current
    <ref id="order">Sort Order</ref> will be set to sort descending on
    that column.  Otherwise this action is not available.
    </p></dd>

</dl>
</p>

</subsubsect>

<subsubsect id="SubsetWindow">
<subhead><title>Subsets Window</title></subhead>

<figure>
<caption><px>Subsets Window</px></caption>
<figureimage src="&FIG.SubsetWindow;"/>
</figure>

<p>The Subsets Window displays the 
<ref id="subsets" plaintextref="yes">Row Subsets</ref>
which have been defined.
You can display it using the <label>Row Subsets</label> (&IMG.SUBSETS;)
button when the chosen table is selected in the
<ref id="ControlWindow">Control Window</ref>'s Table List.
</p>

<p>The subsets are displayed in a <ref id="JTable">JTable</ref>
widget with a row for each subset.  The columns of the JTable
are as follows:
<dl>
<dt>#ID</dt>
<dd><p>A unique and unchanging identifier for the subset, which consists of
    a "#" character followed by an integer.  This can be used to refer
    to it in <ref id="jel" plaintextref="yes">expressions</ref>
    for synthetic columns or other subsets.
    </p></dd>

<dt>Name</dt>
<dd><p>A name used to identify the subset.  It is ideally, but not necessarily,
    unique.
    </p></dd>

<dt>Size</dt>
<dd><p>The number of rows in this subset.  This column is initially blank,
    and is not guaranteed to remain correct if the subset definitions
    or the table data change, since counting may be an expensive
    process so it is not automatically done with every change.
    A count can be forced by using the 
    <label>Count Subsets</label> (&IMG.COUNT;) button described below.
    </p></dd>

<dt>Expression</dt>
<dd><p>If the subset has been defined by an algebraic expression, this will be
    here.  It can be edited (double-click on the cell) 
    to change the expression.
    </p></dd>

<dt>Column $ID</dt>
<dd><p>If the subset has been defined by equivalence with a boolean-valued
    column, this will show the $ID of the column that it came from.
    </p></dd>
</dl>
</p>

<p>Entries in the <label>Name</label> and <label>Expression</label> columns
can be edited by double-clicking on them in the normal way.
</p>

<p>The following toolbar buttons are available in this window:
<dl>

<dt>&IMG.ADD; New Subset</dt>
<dd><p>Pops up the 
    <ref id="SyntheticSubsetQueryWindow">Algebraic Subset Window</ref>
    to allow you to define a new subset algebraically.
    </p></dd>

<dt>&IMG.INVERT; Invert Subset</dt>
<dd><p>Creates a new subset which is the complement of the selected one.
    The new one will include all the rows which are excluded by the
    selected one (and vice versa).
    To use this action, first select a subset by clicking on its row
    in the JTable.
    </p></dd>

<dt>&IMG.TO_COLUMN; To Column</dt>
<dd><p>If one of the rows in the JTable is selected, this will turn that
    subset into a new column.  It will pop up the
    <ref id="SyntheticColumnQueryWindow">Synthetic Column Window</ref>, 
    filled in
    appropriately to add a new boolean column to the table based on
    the selected subset.  You can either accept it as is, or
    modify some of the fields.
    To use this action, first select a subset by clicking on its row
    in the JTable.
    </p></dd>

<dt>&IMG.COUNT; Count Subsets</dt>
<dd><p>Counts how many rows are in each subset and displays this in the
    <label>Size</label> column.  
    This forces a count or recount to fill in or update these values.
    </p></dd>

</dl>
</p>

</subsubsect>

<subsubsect id="StatsWindow">
<subhead><title>Statistics Window</title></subhead>

<figure>
<caption><px>Statistics Window</px></caption>
<figureimage src="&FIG.StatsWindow;"/>
</figure>

<p>The Statistics Window shows statistics for the values in each
of the table's columns.  
You can display it using the <label>Column Statistics</label> (&IMG.STATS;)
button when the chosen table is selected in the 
<ref id="ControlWindow">Control Window</ref>'s Table List.
</p>

<p>The calculated values are displayed in a
<ref id="JTable">JTable</ref>  widget with a row for each
column in the main table, and a column for each of a number of
statistical quantities calculated on <ref id="subsets">some or all</ref> of
the values in the data table column corresponding to that grid row.
The following columns are shown by default:
<dl>
<dt>Name</dt>
<dd><p>The name of the column in the main table represented by this grid row.
    </p></dd>

<dt>Mean</dt>
<dd><p>The mean value of the good cells.  For boolean columns, this is
    the proportion of good cells which are True.
    </p></dd>

<dt>S.D.</dt>
<dd><p>The standard deviation of the good cells.
    </p></dd>

<dt>Minimum</dt>
<dd><p>The minimum value.  For numeric columns the meaning of this is quite
    obvious.  For other columns, if an ordering can be reasonably defined
    on them, the 'smallest' value may be shown.  For instance string
    values will show the entry which would be first alphabetically.
    </p></dd>

<dt>Maximum</dt>
<dd><p>As minimum, but shows the largest values.
    </p></dd>

<dt>Good cells</dt>
<dd><p>The number of non-blank cells.
    </p></dd>

</dl>
Several additional items of statistical information are also calculated,
but the columns displaying these are hidden by default.
You can reveal these by using the <label>Display</label> menu:
<dl>

<dt>Index</dt>
<dd><p>The index of the column in the table, i.e. the order in which
    it is displayed.
    </p></dd>

<dt>$ID</dt>
<dd><p>The unique identifier label for the column in the main table.
    </p></dd>

<dt>Sum</dt>
<dd><p>The sum of all the values in the column.  For boolean columns this
    is a count of the number of True values in the column.
    </p></dd>

<dt>Variance</dt>
<dd><p>The variance of the good cells.
    </p></dd>

<dt>Row of min.</dt>
<dd><p>The index of the row in the main table at which the minimum value
    occurred.
    </p></dd>

<dt>Row of max.</dt>
<dd><p>The index of the row in the main table at which the maximum value
    occurred.
    </p></dd>

<dt>Bad cells</dt>
<dd><p>The number of blank cells; the sum of
    this value and the Good cells value will be the same for each
    column.
    </p></dd>

<dt>Cardinality</dt>
<dd><p>If the column contains a small number of distinct values
    then that number, the column's <em>cardinality</em> will be shown here.
    Cardinality is the number of distinct values which appear in that column.
    If the number of values represented is large (currently &gt;50) or
    a large proportion of the non-bad values (currently &gt;75%) then
    no value is shown.
    </p></dd>

</dl>
</p>

<p>The quantities displayed in this window are not necessarily those for
the entire table; they are those for a particular
<ref id="subsets" plaintextref="yes">Row Subset</ref>.
At the bottom of the window is the <label>Subset For Calculations</label>
selector, which allows you
to choose which subset you want the calculations to be done for.
By clicking on this you can calculate the statistics for different
subsets.
When the window is first opened, or when it is invoked from a menu
or the toolbar in the <ref id="ControlWindow">Control Window</ref>,
the subset will correspond to the current row subset.
</p>

<p>The toolbar contains the following extra button:
<dl>
<dt>&IMG.REDO; Recalculate</dt>
<dd><p>Once statistics have been calculated for a given subset they are
    cached and not normally recalculated again.
    Use this button if you want to force a recalculation because the
    data may have changed.
    </p></dd>
</dl>
</p>

<p>For a large table the calculations may take a while.  While they are
being performed you can interact with the window as normal,
but a progress bar is shown at the bottom of the window.
If you initiate a new calculation (by pushing the Recalculate button or
selecting a new subset) or close the window during a calculation,
the superceded calculation will be stopped.
</p>

</subsubsect>

<subsubsect id="PlotWindow">
<subhead><title>Plot Window</title></subhead>

<figure>
<caption><px>Plot Window</px></caption>
<figureimage src="&FIG.PlotWindow;"/>
</figure>

<p>The plot window allows you to plot the values in two table
columns against each other.
You can display it using the <label>Plot</label> (&IMG.PLOT;)
button when the chosen table is selected in the
<ref id="ControlWindow">Control Window</ref>'s Table List.
</p>

<p>On the plotting surface a marker is plotted for each item in the
selected <ref id="subsets" plaintextref="yes">Row Subsets</ref> 
at a position determined by the
values in the table columns selected to provide the X and Y values.
A marker will only be plotted if both the X and Y values are not blank.
If more than one subset is being plotted, they will be drawn using
different markers.  A key on the right hand side indicates the marker
being used for each subset.  The marker types can be changed using the
<label>Marker Type</label> item in the <label>Plot</label> menu.
</p>

<p>You can <label>zoom</label> in and out of the plot by dragging with the left mouse
button down and right (zoom in) or up and left (zoom out) - this takes
a little practice but is easy to use after a couple of goes.
If you get lost you can push the
<label>Rescale</label> button (&IMG.RESIZE;) 
to return the scaling to normal.
</p>

<p>Below the plot there are two sets of controls for selecting the
table column which will provide the X and Y axis values.
Each one consists of two parts:
<dl>
<dt>Column selector</dt>
<dd><p>A selection box from which column names in the main table can be
    selected.  Only columns which can be plotted from (i.e. scalar numeric
    ones) will be displayed in this selector.
    </p></dd>

<dt>Log checkbox</dt>
<dd><p>This checkbox can be clicked to toggle whether the axis in question
    is to be plotted logarithmically or not.  If it is logarithmic,
    any negative values are simply ignored (not plotted).
    </p></dd>
</dl>
</p>

<p>To the right is a set of checkboxes headed 
<label>Row Subsets</label>.
Click on these to choose which of the table's 
defined <ref id="subsets">Row Subsets</ref> should be plotted on this graph.
Different subsets are plotted
using different markers, so you can see where different groups of results
lie in relation to each other.
You can also use the <label>Subsets To Plot</label> item on the
<label>Subsets</label> menu.
</p>

<p>The following extra buttons are available on the toolbar:
<dl>

<dt>&IMG.PRINT; Print</dt>
<dd><p>Pops up a dialogue which will print the current plot as an EPS file
    The plot is currently not really of publication quality.
    </p></dd>

<dt>&IMG.REDO; Replot</dt>
<dd><p>Redraws the current plot from scratch.
    This may be useful if the data in the
    table has been changed.
    </p></dd>

<dt>&IMG.RESIZE; Rescale</dt>
<dd><p>Rescales the axes of the current plot so that it contains all
    the data points in the currently selected subsets.
    By default the plot will be scaled like this, but it it may have changed
    because of changes in the subset selection or from zooming in or out.
    </p></dd>

<dt>&IMG.GRID_ON; Grid</dt>
<dd><p>Toggles whether a grid is drawn over the plotting surface or not.
    </p></dd>

<dt>&IMG.VISIBLE_SUBSET; Subset From Visible</dt>
<dd><p>Defines a new <ref id="subsets">Row Subset</ref>
    consisting of only the points which
    are currently visible on the plotting surface.
    A dialogue will be popped up to ask for a name for the new subset.
    In this way points in a given region of the parameter space can
    be grouped together.
    </p></dd>

</dl>
</p>

<p>For a large table and/or many subsets the plotting may take a little while.
While it is being done you can see the points appearing in the plot
as they are done, and a progress bar is shown at the bottom of the window.
If you start a new plot (by changing the plot characteristics or pressing
the <label>Replot</label>  button &IMG.REDO;) or close the window while a plot is being done,
the superceded plot will be stopped.
</p>

</subsubsect>

</subsect>

<subsect id="LoadQueryWindow">
<subhead><title>Load Window</title></subhead>

<figure>
<caption><px>Load Window</px></caption>
<figureimage src="&FIG.LoadQueryWindow;"/>
</figure>

<p>The Load Window is used for loading tables from an external location
(e.g. disk or URL) into TOPCAT.  It is obtained using the 
<label>Load Table</label> button (&IMG.LOAD;) in the 
<ref id="ControlWindow">Control Window</ref> toolbar or File menu.
</p>

<p>This dialogue allows you to specify a new table to open in the
following ways, described in more detail in the following sections:
<ul>
<li>Type the location directly in the 
    <ref id="loadString" plaintextref="yes">Location field</ref></li>
<li>Use the <label>Browse Files</label> button to get a  
    <ref id="JFileChooserLoad" plaintextref="yes">standard
    file browser</ref></li>
<li>Use the <label>Browse Hierarchy</label> button to get a
    more sophisticated 
    <ref id="StarTableNodeChooser" plaintextref="yes">hierarchical
    table browser</ref></li>
<li>Use the <label>SQL Database</label> button to get the 
    <ref id="SQLReadDialog" plaintextref="yes">SQL Query Dialog</ref></li>
</ul>
</p>

<p>In most cases TOPCAT can happily read files or resources which are
compressed (using gzip, bzip2 or Unix compress).
You do not need to indicate what table format you are referring to,
TOPCAT will detect the format and any compression
based on the location given.
</p>

<p>If you successfully specify the location of a table in any of these ways,
a new entry will be added into the Table List in the Control Window,
which you can then use in the usual ways.
If you choose a location which can't be turned into a table
(for instance because the file doesn't exist),
a window will pop up telling you what went wrong.
</p>

<p>If you get an <code>OutOfMemoryError</code> while loading a table,
you will have to run TOPCAT with more memory, as described in
<ref id="jvmMemory"/> (though note that not all data formats require the
table to be loaded into memory).
</p>

<subsubsect id="loadString">
<subhead><title>Enter Location</title></subhead>

<p>You can load a table by typing its location into the <label>Location</label>
field of the <label>Load Table</label> window.
</p>

<p>In the simplest case this is the name of a file holding the
table in one of the formats TOPCAT understands.
However it may be a URL for remote data, and in some cases
may have an additional "fragment identifier" appended to the
filename after a "#" character to indicate where in the URL or
file the table is located;
The details of what such fragment identifiers mean can be found
in the relevant subsection within <ref id="inFormats"/>.
It may also be a location which does not correspond to a file
at all, such as the specification of an SQL query on a relational database.
For these more complicated cases you may find it easier to use
one of the other methods for specifying a table to load.
</p>

</subsubsect>

<subsubsect id="JFileChooserLoad">
<subhead><title>File Browser</title></subhead>

<figure>
<caption><px>File Browser window</px></caption>
<figureimage src="&FIG.JFileChooserLoad;"/>
</figure>

<p>By clicking the <label>Browse Files</label> button in the
<label>Load Table</label> window,
you can obtain a normal file browser which will
display the files in a given directory.
</p>

<p>The browser initially displays the current directory, but this can be
changed by typing a new directory into the <label>File Name</label> field,
or moving up the directory hierarchy using the selector box at the top,
or navigating the file system by clicking the up-directory button
or double-clicking on displayed directories.
</p>

<p>All files are shown, and there is no indication of which ones represent
tables and which do not.  To open one of the displayed files as a table,
double-click on it or select it by clicking once and click the
<label>Open Table</label> button.  If you pick a file which cannot be converted
into a table (it is not in a recognised input format) an error window
will pop up.
</p>

<p>Because this browser only works at the file level, there is a limit
to what tables it can access.  For instance if you select a FITS file,
the table opened will correspond to the first TABLE or BINTABLE
HDU within it.
For a more table-aware view of the file system, use the
<ref id="StarTableNodeChooser" plaintextref="yes">Hierarchy Browser</ref> 
instead.
</p>

</subsubsect>

<subsubsect id="StarTableNodeChooser">
<subhead><title>Hierarchy Browser</title></subhead>

<figure>
<caption><px>File load Hierarchy Browser window</px></caption>
<figureimage src="&FIG.StarTableNodeChooser;"/>
</figure>

<p>By clicking the <label>Browse Hierarchy</label> button in the
<label>Load Table</label> window,
you can obtain a browser which presents a table-aware
hierarchical view of the file system.
(Note that a freestanding version of this panel with additional
functionality is available in the separate
<webref url="http://www.starlink.ac.uk/treeview/">Treeview</webref>
application).
</p>

<p>This browser resembles the <ref id="JFileChooserLoad">File Browser</ref>
in some ways, but with important differences:
<ul>
<li>It shows the file system in a 'tree-like' fashion, so that multiple
    levels of the hierarchy are displayed at once</li>
<li>It understands which items in the hierarchy represent tables and
    which represent other kinds of object (for instance plain files)</li>
<li>It can look inside hierarchical files, so for instance it can
    investigate a Tar or Zip archive which may contain table entries,
    or display multiple tabular HDUs in a FITS file, or multiple
    TABLE elements at different levels in a VOTable document</li>
</ul>
</p>

<p>The main part of the window shows a "tree" representation of the
hierarchy, initially rooted at the current directory.
Each line displayed represents a "node" which may be a file or
some other type of item (for instance an HDU in a FITS file or an
entry in a tar archive).  The line contains a little icon
which indicates what kind of node it is and a short text string which
gives its name and maybe some description.
Tables which represent tables are indicated by the 
&IMG.TABLE; icon.
For nodes which have some internal structure there is also a
"handle" which indicates whether they are
collapsed (&IMG.COLLAPSED;) or expanded (&IMG.EXPANDED;).
</p>

<p>If you select a node by clicking on it, it will be highlighted
and some additional description will appear in the panel below the
hierarchy display.  The text is in <strong>bold</strong> if the node in
question can be opened as a table, and non-bold if it is some
non-table item.
</p>

<p>You can see how this browser works on an example directory of tables
as described in <ref id="demoData"/>.
</p>

<subsubsubsect>
<subhead><title>Navigation</title></subhead>

<p>Navigation is a bit different from navigation in the 
<label>File Browser</label> window.
To expand a node and see its contents, click on its handle
(clicking on the handle when it is expanded will collapse it again).
When you have identified the table you want to open, highlight it
by clicking on it, and then click the <label>Open Table</label> button
at the bottom.
</p>

<p>To move to a different directory, i.e. to change the root of the tree
which is displayed, use one of the buttons above the tree display:
<dl>
<dt>Selector box</dt>
<dd><p>Allows you to move straight to any directory higher up than the
    current one.
    </p></dd>

<dt>&IMG.TV_UP; Up</dt>
<dd><p>Moves to the parent of the current directory.
    </p></dd>

<dt>&IMG.TV_DOWN; Down</dt>
<dd><p>Moves to the currently selected (highlighted) node.
    </p></dd>

<dt>&IMG.HOME; Home</dt>
<dd><p>Moves to the user's home directory.
    </p></dd>
</dl>
Alternatively, you can type in a new directory
in the <label>Go to</label> field at the bottom of the window.
</p>

<p>(In fact the above navigation options are not restricted to changing
the root to a new directory, they can move to any node in the
tree, for instance a level in a Tar archive.)
</p>

</subsubsubsect>

<subsubsubsect>
<subhead><title>Table Searches</title></subhead>

<p>There are two more buttons in the browser, <label>Search Selected</label>
and <label>Search Tree</label>.  These do a recursive search for tables in all
the nodes starting at the currently selected one or the current
root respectively.
What this means is that the program will investigate the whole
hierarchy looking for any items which can be used as tables.
If it finds any it will open up the tree so that they are visible
(note that this doesn't mean that the only nodes revealed will
be tables, ancestors and siblings will be revealed too).
This can be useful if you believe there are a few tables buried
somewhere in a deep directory structure or Tar archive, but you're
not sure where.  Note that this may be time-consuming - a busy
cursor is displayed while the search is going on.
Changing the root of the tree will interrupt the search.
</p>

</subsubsubsect>

</subsubsect>

<subsubsect id="SQLReadDialog">
<subhead><title>SQL Query Dialogue</title></subhead>

<figure>
<caption><px>SQL Query Dialogue</px></caption>
<figureimage src="&FIG.SQLReadDialog;"/>
</figure>

<p>If you want to 
<ref id="inSql" plaintextref="yes">read a table from an SQL database</ref>,
you can use a specialised dialogue to specify the SQL query by clicking
the <label>SQL Database</label> button in the <label>Load Table</label>
window.
</p>

<p>This provides you with a list of fields to fill in which make
up the query, as follows:
<dl>
<dt>Protocol</dt>
<dd><p>The name of the appropriate JDBC sub-protocol.
    This is defined by the JDBC driver that you are using, and is
    for instance "<code>mysql</code>" for MySQL's Connector/J driver
    or "<code>postgresql</code>" for PostgreSQL's JDBC driver.
    </p></dd>

<dt>Host</dt>
<dd><p>The hostname of the machine on which the database resides
    (may be "<code>localhost</code>" if the database is local).
    </p></dd>

<dt>Database name</dt>
<dd><p>The name of the database.
    </p></dd>

<dt>SQL Query</dt>
<dd><p>The text of the query which will define the resulting table.
    If you want to look at a table called XXX as it exists in the database,
    you can write something like "<code>SELECT * from XXX</code>".
    In principle any SQL query on the database can be used here,
    but the details of what SQL syntax is permitted will be defined
    by the JDBC driver you are using.
    </p></dd>

<dt>User name</dt>
<dd><p>The username under which you wish to access the database.
    This is not strictly necessary if there is no access control for
    the database in question.
    </p></dd>

<dt>Password</dt>
<dd><p>The password for the given username.  Again, whether this is
    necessary depends on the access policy of the database.
    </p></dd>
</dl>
</p>

<p>There are a number of criteria which must be satisfied for SQL
access to work within TOPCAT (installation of appropriate drivers
and so on) - see <ref id="jdbcConfig"/>.  If you don't take
these steps, this dialogue may be inaccessible.
</p>

</subsubsect>

<subsubsect id="demoData">
<subhead><title>Example Tables</title></subhead>

<p>Some example table data is provided with TOPCAT.
which you can access in a number of ways:
<ul>
<li>The simplest thing is to supply the "<code>-demo</code>" flag on 
    the command line, which will cause the program to start up with
    a few demonstration tables already loaded in.</li>
<li>The <label>Browse Example Hierarchy</label> (&IMG.DEMO;)
    button in the <ref id="LoadQueryWindow">Load Window</ref>
    will pop up a 
    <ref id="StarTableNodeChooser" plaintextref="yes">Hierarchy Browser</ref>
    looking at a hierarchy of tables in different formats.
    This option is designed to show some of the organisational
    complexity which TOPCAT can handle when browsing tables.</li>
<li>The <label>Load Example Table</label> button in the 
    <label>Load Window</label>'s <label>Examples</label> menu will 
    just load a single example table into the program.</li>
</ul>
</p>

</subsubsect>

</subsect>

<subsect id="StarTableSaver">
<subhead><title>Save Window</title></subhead>

<figure>
<caption><px>Save Window</px></caption>
<figureimage src="&FIG.StarTableSaver;"/>
</figure>

<p>The Save Window is used to write tables out,
and it is accessed using the <label>Save Table</label> button (&IMG.SAVE;)
in the <ref id="ControlWindow">Control Window</ref>'s toolbar or File menu. 
Any table in the Control Window's table list can be
written at any time; what is written is the 
<ref id="apparent">Apparent Table</ref> corresponding to the currently
selected table, which takes into account any modifications you have
made to its data or apperance this session.
<ref id="subsets">Row Subsets</ref> 
which have been defined on the table in the current session
will not be saved themselves, but you can save information about
subset membership by creating new boolean columns based on subsets
using the "To Column" button (&IMG.TO_COLUMN;) from the
<ref id="SubsetWindow">Subsets Window</ref>.
</p>

<p>The Save Table window invites you to specify a format and
a location for the table to be written.
</p>

<p>You can use the <label>Table Output Format</label>
selector box to pick
the format in which the table will be written from one
of the <ref id="outFormats">supported output formats</ref>.
There is no default format, and it won't automatically save to the
same format it was loaded from, but if you leave it on "(auto)" it
will try to guess the format based on the filename given;
for instance if you specify the name "out.fits", a FITS binary table
will be written.
</p>

<p>You can specify the location of the output table in these ways,
which are described in the following sections:
<ul>
<li>Type in the location directly in the 
    <ref id="saveString" plaintextref="yes">Output Location field</ref></li>
<li>Use the <label>Browse files</label> button to get a
    <ref id="JFileChooserSave" plaintextref="yes">file browser</ref></li>
<li>Use the <label>SQL table</label> button to get the 
    <ref id="SQLWriteDialog" plaintextref="yes">SQL Output Dialogue</ref></li>
</ul>
In some cases, saving the table to the same name as it was loaded from
can cause problems (e.g. an application crash which loses the data
unrecoverably).
In other cases, it's perfectly OK.  The main case in which it's
problematic is when editing an uncompressed FITS binary table on disk.
TOPCAT will attempt to warn you if it thinks you are doing something
which could lead to trouble; ignore this at your own risk.
</p>

<p>There is no option
to compress files on output (though you can of course compress them
yourself once they have been written).
</p>

<p>If the table is large, a progress bar indicating how near the
save is to completion will appear in a popup window.
It is not advisable to edit the table during a save operation.
</p>

<p>In some cases, when saving a table to a format other than the one
from which it was loaded, or if some new kinds of metadata have been
added, it may not be possible to express all
the data and metadata from the table in the new format.
For instance a WDC table can contain data which represents epoch (date),
and this cannot be stored in a FITS table.  In this case the table
may be written with such columns missing.  Some message to this effect
may be output in this case.
</p>


<subsubsect id="saveString">
<subhead><title>Enter Location</title></subhead>

<p>You can specify where to save a table by typing its location
directly into the <label>Output Location</label> field of the
Save Table window.
This will usually be the name of a new file to
write to, but could in principle be a URL or a SQL specifier.
</p>

</subsubsect>

<subsubsect id="JFileChooserSave">
<subhead><title>File Browser</title></subhead>

<figure>
<caption><px>File Browser for table saving</px></caption>
<figureimage src="&FIG.JFileChooserSave;"/>
</figure>

<p>By clicking the <label>Browse Files</label> button in the
<label>Save Table</label> window,
you can obtain a file browser which will display the
files in a given directory.
</p>

<p>The browser initially displays the current directory, but this can be
changed by typing a new directory into the <label>File Name</label> field,
or moving up the directory hierarchy using the selector box at the top,
or navigating the file system by clicking the up-directory button
or double-clicking on displayed directories.
</p>

<p>To save to an existing file, select the file name and click the
<label>Save</label> button at the bottom; this will overwrite that file.
To save to a new file, type it into the <label>File Name</label> field;
this will save the table under that name into the directory which is displayed.
You can (re)set the format in which the file will be written using
the <label>Output Format</label> selector box on the right.
</p>

</subsubsect>

<subsubsect id="SQLWriteDialog">
<subhead><title>SQL Output Dialogue</title></subhead>

<figure>
<caption><px>SQL table writing dialogue</px></caption>
<figureimage src="&FIG.SQLWriteDialog;"/>
</figure>

<p>If you want to 
<ref id="outSql" plaintextref="yes">write a table to an SQL database</ref>,
you can use a specialised dialogue to specify the table destination by clicking
the <label>SQL Table</label> button in the <label>Save Table</label>
window.
</p>

<p>This provides you with a list of fields to fill in which define
the new table to write, as follows:
<dl>
<dt>Protocol</dt>
<dd><p>The name of the appropriate JDBC sub-protocol.
    This is defined by the JDBC driver that you are using, and is
    for instance "<code>mysql</code>" for MySQL's Connector/J driver
    or "<code>postgresql</code>" for PostgreSQL's JDBC driver.
    </p></dd>

<dt>Host</dt>
<dd><p>The hostname of the machine on which the database resides
    (may be "<code>localhost</code>" if the database is local).
    </p></dd>

<dt>Database name</dt>
<dd><p>The name of the database.
    </p></dd>

<dt>New table name</dt>
<dd><p>The name of a new table to write into the given database.
    Subject to user privileges,
    this will overwrite any existing table in the database which has the
    same name, so should be used with care.
    </p></dd>

<dt>User name</dt>
<dd><p>The username under which you wish to access the database.
    This is not strictly necessary if there is no access control for
    the database in question.
    </p></dd>

<dt>Password</dt>
<dd><p>The password for the given username.  Again, whether this is
    necessary depends on the access policy of the database.
    </p></dd>
</dl>
</p>

<p>There are a number of criteria which must be satisfied for SQL
access to work within TOPCAT (installation of appropriate drivers
and so on) - see the section on 
<ref id="jdbcConfig" plaintextref="yes">JDBC configuration</ref>.
If you don't take these steps, this dialogue may be inaccessible.
</p>

</subsubsect>

</subsect>

<subsect id="ConcatWindow">
<subhead><title>Concatenation Window</title></subhead>

<figure>
<caption><px>Concatenation Window</px></caption>
<figureimage src="&FIG.ConcatWindow;"/>
</figure>

<p>The Concatenation Window allows you to join two tables together
top-to-bottom.  It can be obtained using the 
<label>Concatenate Tables</label> button (&IMG.CONCAT;) in the
<ref id="ControlWindow">Control Window</ref> toolbar or Joins menu.
</p>

<p>When two windows are concatenated
all the rows of the first ("base") table are followed by all
the rows of the second ("appended") table.  The result is a new
table which has a number of rows equal to the sum of the two it has
been made from.  
The columns in the resulting table are the same as those of the base table.
To perform the concatenation, you have to specify which columns from the
appended table correspond to which ones in the base table.  Of course,
this sort of operation only makes sense if at least some of the columns in
both tables have the same meaning.
This process is discussed in more detail in <ref id="concat"/>.
</p>

<p>The concatenation window allows you to select the base and appended
tables, and for each column in the base table to specify which column
in the appended table corresponds to it.  You may select a blank for
this, in which case the column in question will have all null entries
in the resulting table.
In some cases these column selectors may have a value filled in
automatically if the program thinks it can guess appropriate ones,
but you should ensure that it has guessed correctly in this case.
Only suitable columns are available for choosing from these column
selectors; in most cases this means numeric ones.
</p>

<p>When you have filled in the fields to your satisfaction, hit
the <label>Concatenate</label> button at the bottom of the window,
and a new table will be created and added to the table list
in the <ref id="ControlWindow">Control Window</ref> 
(a popup window will inform you this has happened).
</p>

<p>The result is created from the 
<ref id="apparent" plaintextref="yes">Apparent</ref>
versions of the base and appended tables, so that any row subsets,
hidden columns, or sorts currently in force will be reflected in the
output.
</p>

</subsect>

<subsect id="MatchWindow">
<subhead><title>Pair Match Window</title></subhead>

<figure>
<caption><px>Pair Match Window</px></caption>
<figureimage src="&FIG.MatchWindow;"/>
</figure>

<p>The Pair Match Window allows you to join two tables together
side-by-side, aligning rows by matching values in some of their
columns between the tables.  It can be obtained using the
<label>Pair Match</label> (&IMG.MATCH2;) button in the 
<ref id="ControlWindow">Control Window</ref> toolbar or 
<label>Joins</label> menu.
</p>

<p>In a typical scenario you might have two tables each representing
a catalogue of astronomical objects, and you want a
third table with one row for each object which has an entry in both
of the original tables.  An object is defined as being the same one
in both tables if the co-ordinates in both rows are "similar",
for instance if the
difference between the positions indicated by RA and Dec columns
differ by no more than a specified angle on the sky.
Matching rows to produce the join requires you to specify the criteria
for rows in both tables to refer to the same object and
what to do when one is found - the options are discussed in
more detail in <ref id="pairMatch"/>.
</p>

<p>The result is created from the <ref id="apparent">Apparent</ref>
versions of the tables being joined, so that any row subsets,
hidden columns, or sorts currently in force will be reflected in the
output.
Progress information on the match, which may take some time,
is provided in the logging window and by a scrollbar at the bottom
of the window.  When it is completed, you will be informed by a
popup window which indicates that a new table has been created.
This table will be added to the list in the Control Window and can
be examined, manipulated and saved like any other.
</p>

<p>The Match Window provides a set of controls which allow you
to choose how the match is done and what the results will look like.
It consists of these main parts:
<dl>

<dt><ref id="matchCriteria">Match Criteria box</ref></dt>
<dd><p>Allows you to define what counts as a match between two rows.
    </p></dd>

<dt><ref id="matchColumnSelect">Column Selection boxes</ref></dt>
<dd><p>Allows you to select which tables are to be joined and which 
    columns in them supply the matching coordinates.
    </p></dd>

<dt><ref id="matchRowSelect">Output Rows selector</ref></dt>
<dd><p>Allows selection of which rows are to be included in the output
    table (for instance whether only those rows matching in both tables
    should be output or not).
    </p></dd>

<dt>Log window</dt>
<dd><p>Displays progress as the match is taking place.  The scrollbar
    at the bottom of the window also provides an indication of how
    far through each stage processing has got.
    </p></dd>

<dt>Control buttons</dt>
<dd><p>The <label>Go</label> button starts the search when you are
    happy with the selections that you have made, and the
    <label>Stop</label> button interrupts it midway if you decide
    you no longer want the results (closing the Match Window also
    interrupts the calculation).
    </p></dd>

</dl>
The following sections describe some of these components in more detail.


</p>

<subsubsect id="matchCriteria">
<subhead><title>Match Criteria</title></subhead>

<p>The match criteria box allows you to specify what counts as a match
between two rows.  The selection you make in this box will determine
which columns you have to fill in for the table(s) being matched
in the rest of the window.  In most cases what you are selecting here
is the coordinate space in which rows will be compared against each other,
and a numerical value to determine how close two rows have to be
in terms of a metric on that space to count as a match.
</p>

<p>The following match types are offered:
<dl>

<dt>Sky</dt>
<dd><p>Comparison of positions on the celestial sphere.
    In this case you will need to specify columns giving
    Right Ascension and Declination (in radians)
    for each table participating in the match
    The Error value you must fill in is the maximum separation of matched
    points in radians around a great circle.
    (For reference: 1 degree=.0174533 rad;
                    1 arcmin=2.90888e-4 rad;
                    1 arcsec = 4.84813e-6 rad).
    </p></dd>

<dt>Spherical Polar</dt>
<dd><p>Comparison of positions in the sky taking account of radial distance.
    In this case you will need to specify columns giving
    Right Ascension and Declination (in radians) and radial distance
    (in arbitrary units)
    for each table participating in the match.
    The Error value is a maximum spatial separation of matched points
    in the same units as the radial distance.
    (For reference: 1 degree=.0174533 rad;
                    1 arcmin=2.90888e-4 rad;
                    1 arcsec = 4.84813e-6 rad).
    </p></dd>

<dt>Exact Value</dt>
<dd><p>Requires exact matching of values.
    In this case you will need to specify the column containing the match key
    for each table participating in the match;
    this might typically be an object name or index number.
    Two rows count as matching if they have exactly the same entry in
    the specified field, except rows with a null value in that column,
    which don't match any other row.
    </p></dd>

<dt>N-dimensional Cartesian</dt>
<dd><p>Comparison of positions in an N-dimensional Cartesian space.
    In this case you will need to specify N columns giving Cartesian
    coordinates
    for each table participating in the match.
    The Error value is the maximum spatial separation of matched points.
    Currently the highest dimensionality you can select is 4-d -
    does anyone want a higher number?
    </p></dd>

</dl>
</p>

</subsubsect>

<subsubsect id="matchColumnSelect">
<subhead><title>Column Selection Boxes</title></subhead>

<p>The column selection boxes allow you to select which of the
columns in the tables you will be joining will provide the data
(the coordinates which have to match).
For each table you must select the names of the required columns;
the ones you need to select will depend on the 
<ref id="matchCriteria">match criteria</ref> you have chosen.
If a particular unit is required (e.g. radians for the RA and Dec
columns in a sky match) this will be noted by the column selector -
you must ensure that you use columns which have these units.
If the columns of your table are in different units, you will have
to create new synthetic columns (see <ref id="SyntheticColumnQueryWindow"/>)
in the right units - the <code>toRadians</code> function may be useful.
</p>

<p>In some cases these column selectors may have a value filled in
automatically (if the program thinks it can guess appropriate ones)
but you should ensure that it has guessed correctly in this case.
Only suitable columns are available for choosing from these column
selectors; in most cases this means numeric ones.
</p>

</subsubsect>

<subsubsect id="matchRowSelect">
<subhead><title>Output Rows Selector Box</title></subhead>

<p>When the match is complete a new table will be created which 
contains rows composed from the rows of the input tables - each
row will contain entries corresponding to a single match.
The Output Rows selector box allows you to choose on what basis
rows will be included in this output table.
In all cases each row will refer to only one matched "object"
(any columns in the output come from only rows in the input tables
which match according to the specified <ref id="matchCriteria">criteria</ref>),
but you may or may not wish to see output rows which don't have a
contribution from each of the input tables.
For each input table therefore, you can choose to see the
<label>Matched Rows Only</label> or <label>All Rows</label>.
If you have All Rows, then the columns for which a match can't be
found in one of the tables are just left blank.
</p>

<p>By way of example: if your input tables are these:
<verbatim>
      X          Y         Vmag
      -          -         ----
   1134.822    599.247     13.8
    659.68    1046.874     17.2
    909.613    543.293      9.3
</verbatim>
and
<verbatim>
     X           Y         Bmag
     -           -         ---- 
   909.523     543.800     10.1
   1832.114    409.567     12.3
   1135.201    600.100     14.6
    702.622   1004.972     19.0
</verbatim>
then requiring Matched Rows Only for both tables would give you a 
result like this:
<verbatim>
     X_1       Y_1         Vmag    X_2        Y_2         Bmag
     ---       ---         ----    ---        ---         ----
   1134.822    599.247     13.8   1135.201    600.100     14.6
    909.613    543.293      9.3    909.523    543.800     10.1
</verbatim>
while choosing All Rows for the first table would give you this:
<verbatim>
     X_1       Y_1         Vmag    X_2        Y_2         Bmag
     ---       ---         ----    ---        ---         ----
   1134.822    599.247     13.8   1135.201    600.100     14.6
    659.68    1046.874     17.2
    909.613    543.293      9.3    909.523    543.800     10.1
</verbatim>
</p>

<p>As in this example, if the join causes column names to be duplicated,
the offending columns are renamed to disambiguate them.
</p>

</subsubsect>

</subsect>


<subsect id="MatchWindow1">
<subhead><title>Internal Match Window</title></subhead>

<figure>
<caption><px>Internal Match Window</px></caption>
<figureimage src="&FIG.MatchWindow1;"/>
</figure>

<p>The Internal Match Window allows you to perform matching between
rows of the same table, grouping rows that have the same or similar 
values in specified columns and producing a new table as a result.
It can be obtained by using the <label>Internal Match</label>
(&IMG.MATCH1;) button in the <ref id="ControlWindow">Control Window</ref>
toolbar or <label>Joins</label> menu.
</p>

<p>You might want to use this functionality to remove all rows which
refer to the same object from an object catalogue, 
or to ensure that only one entry exists for each object,
or to identify groups of several "nearby" objects in some way.
</p>

<p>The result is created from the <ref id="apparent">Apparent</ref>
versions of the tables being joined, so that any row subsets,
hidden columns, or sorts currently in force will be reflected in the
output.
Progress information on the match, which may take some time,
is provided in the logging window and by a scrollbar at the bottom
of the window.  When it is completed, you will be informed by a
popup window which indicates that a new table has been created.
This table will be added to the list in the Control Window and can
be examined, manipulated and saved like any other.
</p>

<p>The window has the following parts:
<dl>

<dt><ref id="matchCriteria">Match Criteria box</ref></dt>
<dd><p>Allows you to define what counds as a match between two rows
    (the same as for pair matching).
    </p></dd>

<dt><ref id="matchColumnSelect">Column Selection box</ref></dt>
<dd><p>Allows you to select which table to operate on and which columns
    supply the matching coordinates
    (the same as for pair matching).
    </p></dd>

<dt><ref id="matchInternalAction">Match Action box</ref></dt>
<dd><p>Allows you to select what will be done (what new table will be
    created) when the matching groups of rows have been identified.
    </p></dd>

<dt>Log Window</dt>
<dd><p>Displays progress as the match is taking place.  The scrollbar
    at the bottom of the window also provides an indication of how
    far through each stage processing has got.
    </p></dd>

<dt>Control buttons</dt>
<dd><p>The <label>Go</label> button starts the search when you are
    happy with the selections that you have made, and the
    <label>Stop</label> button interrupts it midway if you decide
    you no longer want the results (closing the Match Window also
    interrupts the calculation).
    </p></dd>

</dl>
</p>

<subsubsect id="matchInternalAction">
<subhead><title>Internal Match Action box</title></subhead>

<p>The Internal Match Action box gives a list of options for what
will happen when an internal match calculation has completed.
In each case a new table will be
created as a result of the match.  The options for what it will look like
are these:
<dl>

<dt>Mark Groups of Rows</dt>
<dd><p>The result is a table the same as the input table but with two
    additional columns: <label>MatchID</label> and <label>MatchCount</label>.
    Each group of rows which matched is assigned a unique integer,
    recorded in the MatchId column, and the size of each group is
    recorded in the MatchCount column.
    Rows which don't match any others (singles) have null values in
    both these columns.
    So for example by sorting the resulting table
    on MatchID you can group rows that match next to each other;
    or by sorting on MatchCount you can see all the pairs, followed by
    all the triples, ...
    </p>
    <p>You can use this information in other ways, for instance if you
    create a new <ref id="subsets">Row Subset</ref> using the expression
    "<code>MatchID == 5</code>" you could select only those
    rows which form part of 5-object clusters.
    </p>
    <p>If columns called MatchID or MatchCount already exist in the
    input table, they are renamed to MatchID_old/MatchCount_old in the
    result table.
    </p></dd>

<dt>Eliminate All Grouped Rows</dt>
<dd><p>The result is a new table containing only "single" rows, that is
    ones which don't match any other rows in the table according to the
    match criteria.  Any rows which match are thrown out.
    </p></dd>

<dt>Eliminate All But First of Each Group</dt>
<dd><p>The result is a new table in which only one row (the first in the
    input table order) from each group of matching ones is retained.
    A subsequent internal match with the same criteria would therefore
    show no matches.
    </p></dd>

<dt>New Table With Groups of Size N</dt>
<dd><p>The result is a new "wide" table consisting of matched rows in
    the input table stacked next to each other.
    Only groups of exactly N rows in the input table are used to
    form the output table; each row of the output table consists of
    the columns of the first group member, followed by the columns of
    the second group member and so on.  The output table therefore has
    N times as many columns as the input table.
    The column names in the new table have "_1", "_2", ...
    appended to them to avoid duplication.
    </p></dd>

</dl>
</p>

</subsubsect>

</subsect>

<subsect id="HelpWindow">
<subhead><title>Help Window</title></subhead>

<figure>
<caption><px>Help Window</px></caption>
<figureimage src="&FIG.HelpWindow;"/>
</figure>

<p>The help window is a browser for displaying help information on TOPCAT.
It views the text contained in this document, so it may be what you are
looking at now.
The panel on the left hand side gives a hierarchical
view of the available help topics, and the panel on the right hand
side displays the help text itself.  The bar in between the two
can be dragged with the mouse to affect the relative sizes of
these windows.
</p>

<p>The toolbar contains these extra buttons:
<dl>
<dt>&IMG.BACKWARD; Back</dt>
<dd><p>Moves backward through the list of topics in the order you have
    looked at them.
    </p></dd>

<dt>&IMG.FORWARD; Forward</dt>
<dd><p>Moves forward through the list of topics in the order you have
    looked at them.
    </p></dd>

<dt>&IMG.PRINT; Print</dt>
<dd><p>Pops up a dialogue to permit printing of the current page to a
    file or printer (but see below).
    </p></dd>

<dt>&IMG.PAGE_SETUP; Page Setup</dt>
<dd><p>Pops up a dialogue to do printer setup.
    </p></dd>
</dl>
</p>

<p>Although the printing buttons work, if you want to print out the
whole of this document rather than just a few sections you may be better off
locating the version which is formatted as a single HTML file, and
printing it through a web browser.
The most recent version of the single HTML file should be available
on the web at
<webref url="http://www.starlink.ac.uk/topcat/sun253/sun253.html"/>;
you can also find the it in the topcat jar file at
<code>uk/ac/starlink/topcat/help/sun253.html</code>
or, if you have a full TOPCAT installation, in 
<code>docs/topcat/sun253/sun253.html</code>
(<webref url="sun253.html"
         hypertext="here"
         plaintext="available directly from the HTML file"/>).
</p>

<p>The help browser is an HTML browser and some of the hyperlinks in
the help document point to locations outside of the help document
itself.  Selecting these links will go to the external documents.
When the viewer is displaying an external document, its URL will
be displayed in a line at the bottom of the window.  You can cut
and paste from this using your platform's usual mechanisms for this.
</p>

</subsect>

<subsect id="SyntheticColumnQueryWindow">
<subhead><title>Synthetic Column Window</title></subhead>

<figure>
<caption><px>Synthetic Column dialogue window</px></caption>
<figureimage src="&FIG.SyntheticColumnQueryWindow;"/>
</figure>

<p>The Synthetic Column Window allows you to define a new "Synthetic" column,
that is one whose values are defined using an algebraic expression 
based on the values of other columns in the same row.
The idea is that the value of the cells in a given row in this column
will be calculated on demand as a function of the values of cells
of other columns in that row.  You can think of this as providing
functionality like that of a column-oriented spreadsheet.
You can activate the dialogue using the 
<label>Add Column</label> (&IMG.ADD;) button in the
<ref id="ColumnInfoWindow">Columns Window</ref> or from the 
(right-click) popup menu in the <ref id="TableViewerWindow">Data Window</ref>.
</p>

<p>The window consists of a number of fields you must fill in to 
define the new column:
<dl>
<dt>Name</dt>
<dd><p>The name of the new column.  This should preferably be unique
    (different from all the other column names).  It will be easier to
    use it in other expressions if it is also:
    <ul>
    <li>Different from other columns even apart from upper/lower case
        distinctions</li>
    <li>In the form of a java identifier (starts with a letter, continues
        with alphanumerics including underscore)</li>
    <li>Not too long</li>
    </ul>
    </p></dd>

<dt>Units</dt>
<dd><p>The units of the column.  If the quantity it represents is dimensionless
    or you don't know the units, this can be left blank.  It would be
    a good idea to use a similar format for the units to that used for
    the existing columns in the table.
    </p></dd>

<dt>Description</dt>
<dd><p>A short textual description of what the values contained by this
    column are.  May be left blank.
    </p></dd>

<dt>Expression</dt>
<dd><p>This is the algebraic expression which defines the values that the
    cells in the new column of the table will have.  It may be any
    legal expression which returns a primitive or object.  Broadly
    speaking you can use mathematical operators to combine values
    taken from the same row in other columns which are referred to
    by the names or $ID identifiers of those columns.
    The rules are explained in <ref id="jel"/>.
    </p></dd>
<dt>UCD</dt>
<dd><p>A <webref url="http://vizier.u-strasbg.fr/doc/UCD.htx"
                 >Unified Content Descriptor</webref>
    for the column; a UCD is a semantic label
    attached to the column indicating what kind of quantity it contains
    by picking one option from a list defined by the
    <webref url="http://cdsweb.u-strasbg.fr/">CDS</webref>.
    The list of known UCDs is available via a selection box, or you
    can type a UCD in by hand.  You may leave this blank if the you do not
    wish to assign a UCD to the column.
    A brief description of the UCD selected is visible below
    selection box itself.
    </p></dd>

<dt>Index</dt>
<dd><p>Determines the position in the displayed table at which the new
    column will initially appear.
    </p></dd>
</dl>
Of these, the <label>Expression</label> is the only one which must be
filled in.  The rules for writing algebraic expressions are
detailed in <ref id="jel"/>, 
and a summary of the (built-in and user-defined)
functions available can be seen in the 
<ref id="MethodWindow">Available Functions Window</ref>
which you can view using the 
<label>Show Functions</label> (&IMG.FUNCTION;) button on the toolbar.
</p>

<p>Having filled in the form to your satisfaction, hit the
<label>OK</label> button at the bottom and the new column will be
added to the table.  If you have made some mistake in filling in 
the fields, a popup window will give you a message describing the
problem.  This message may be a bit arcane - try not to panic and
see if you can rephrase the expression in a way that the parser might
be happier with.  If you can't work out the problem, it's time to
consult your friendly local Java programmer (failing that, your
friendly local C programmer may be able to help) or, by all means,
contact the author or Starlink's 
<webref url="http://www.starlink.ac.uk/quick/">QUICK</webref> service.
</p>

<p>If you wish to add more metadata items you can edit the appropriate
cells in the <ref id="ColumnInfoWindow">Columns Window</ref>.
You can edit the expression of an existing synthetic column in the same way.
</p>

<p>Once created, a synthetic column is added to the
<ref id="apparent">Apparent Table</ref> and behaves just like any other;
it can be moved, hidden/revealed, used in expressions for other
synthetic columns and so on.
If the table is saved the new column and its contents will
be written to the new output table.
</p>

</subsect>


<subsect id="SyntheticSubsetQueryWindow">
<subhead><title>Algebraic Subset Window</title></subhead>

<figure>
<caption><px>Algebraic Subset dialogue window</px></caption>
<figureimage src="&FIG.SyntheticSubsetQueryWindow;"/>
</figure>

<p>The Algebraic Subset Window allows you to define a new 
<ref id="subsets">Row Subset</ref> which uses an algebraic expression
to define which rows are included.  The expression must be a 
boolean one, i.e. its value is either true or false for each row of
the table.
You can activate this dialogue using the
<label>Add Subset</label> button in the
<ref id="SubsetWindow">Subsets Window</ref>.
</p>

<p>The window consists of two fields which must be filled in to 
define the new subset:
<dl>

<dt>Subset Name</dt>
<dd><p>The name of the new subset.  This should preferably be unique
    (different from existing subset names).  It will be easier to
    use it in other expressions if it is also:
    <ul>
    <li>Different from other columns even apart from upper/lower case
        distinctions</li>
    <li>In the form of a java identifier (starts with a letter, continues
        with alphanumerics including underscore)</li>
    <li>Not too long</li>
    </ul>
    </p></dd>

<dt>Expression</dt>
<dd><p>This is a boolean expression which defines the subset;
    it is a function of the values of any combination of the columns;
    only rows for which it evaluates to true will be included in the subset.
    The values of the other columns in the same row are referenced
    using their names or $ID identifiers, and other subsets may be
    referenced using their names of #ID identifiers.
    A range of logical and mathematical operators can be used;
    the rules for expression syntax are explained in <ref id="jel"/>.
    </p></dd>

</dl>
A summary of the (built-in and user-defined)
functions available can be seen in the 
<ref id="MethodWindow">Available Functions Window</ref>
which you can view using the 
<label>Show Functions</label> (&IMG.FUNCTION;) button on the toolbar.
</p>

<p>Having filled in the form to your satisfaction, hit the
<label>OK</label> button at the bottom and the new subset will be
added to the list that can be seen in the 
<ref id="SubsetWindow">Subsets Window</ref> where it behaves like any other.
If you have made some mistake in filling in
the fields, a popup window will give you a message describing the
problem.
</p>


</subsect>

<subsect id="MethodWindow">
<subhead><title>Available Functions Window</title></subhead>

<figure>
<caption><px>Available Functions Window</px></caption>
<figureimage src="&FIG.MethodWindow;"/>
</figure>

<p>This window displays all the functions (Java methods) which are
available for use when writing 
<ref id="jel" plaintextref="yes">algebraic expressions</ref>.
This includes both the built-in expressions and any 
<ref id="jelExtend">extended ones</ref> you might have added.
They are grouped by the class which defines them, and displayed
in a tree-like structure.
You can find this window by using the 
<label>Show Functions</label> (&IMG.FUNCTION;) button in the
<ref id="SyntheticColumnQueryWindow">Synthetic Column</ref> or 
<ref id="SyntheticSubsetQueryWindow">Algebraic Subset</ref>
window toolbars.
</p>

<p>When initially displayed, the window shows just the names of
the classes which provide methods.
By double-clicking on these names (or equivalently
by clicking on their 'handle': &IMG.COLLAPSED;)
you can open them up to see the methods they contain.
The listing here doesn't describe what these methods do, but the
name and list of arguments may give you a clue.
</p>

<p>Each method has a listing something like this:
<verbatim>
   float average( int, int )
</verbatim>
which means that there is a function called "average" which takes two
arguments of type <code>int</code> (= integer), and returns a value of
type <code>float</code> (= floating point).
</p>

<p>For those that want it, full 
<em>Javadoc</em> documentation is available on the web for the
standard included classes:
<webref url="&URL.J2SE_JAVADOCS;java/lang/Math.html"
        >Math</webref>,
<webref url="&URL.J2SE_JAVADOCS;java/lang/Integer.html"
        >Integer</webref>,
<webref url="&URL.J2SE_JAVADOCS;java/lang/Float.html"
        >Float</webref> &amp;
<webref url="&URL.J2SE_JAVADOCS;java/lang/Double.html"
        >Double</webref>.
</p>

<p>Using the Add button (&IMG.ADD;)
you can specify the name of a class to add to those available.
You should enter the fully-qualified class name (i.e. including the
dot-separated package path).  The class that you specify must be
on the class path which was current when TOPCAT was started,
as explained in <ref id="jvmClasspath"/>.
Note however it would be more usual to specify these using
the system property <code>gnu.jel.static.classes</code> at startup,
as described in <ref id="jelExtend"/>.
</p>

</subsect>

</sect>

<sect id="tablecopy">
<subhead><title>Tablecopy</title></subhead>

<p>By loading a table in one format and saving it to another
it is possible to use TOPCAT to convert tabular data between
supported 
<ref id="inFormats">input</ref> and 
<ref id="outFormats">output</ref> formats.
</p>

<p>However, if this is all that you want to do, there is a a
more convenient way of doing it from the command line.  This
avoids the overhead of starting up the GUI, prevents you having to
point and click, and may also make more efficient use of memory.
</p>

<p>Tables can be copied between formats using the '<code>tablecopy</code>'
command.  If you have the full Unix installation this can be invoked
using the <code>bin/tablecopy</code> shell script.
Alternatively, it can be invoked from the jar file by doing
<verbatim>
   java -classpath topcat.jar  uk.ac.starlink.table.TableCopy [args]
</verbatim>
(the <code>topcat-full.jar</code> or <code>table.jar</code> jarfiles
can be used instead if those are what you have).
All the commments about classpaths and arguments to Java itself
described in the section on 
<ref id="invoke" plaintextref="yes">Invoking TOPCAT</ref>
apply here as well.
</p>

<p>The command is straightforward to use.  Typing
<verbatim>
    tablecopy -help
</verbatim>
(or 
<code>java -classpath topcat.jar uk.ac.starlink.table.TableCopy -help</code>)
produces the following usage message:
<verbatim><![CDATA[
   Usage: tablecopy [-ofmt <out-format>] <in-table> <out-table>

   Known out-formats:
      jdbc
      fits
      votable-tabledata
      votable-binary-inline
      votable-fits-href
      votable-binary-href
      votable-fits-inline
      text
      ascii
      html
      html-element
      latex
      latex-document
      mirage
]]></verbatim>
The input format is sensed by examining the in-table argument, and the
output format can be supplied using the "<code>-ofmt</code>" flag.
If the <code>-ofmt</code> flag is not used, 
the tool may be able to work out the required format
by looking at the out-table argument (for instance one ending in ".FIT"
is assumed to be a FITS table); if not it will fail with an error message
and you will have to specify the format explicitly.
For some output formats the special output name "-" can be used to
represent standard output.
</p>

<p>Here are some examples of use:
<ul>
<li>Copy a FITS table to a VOTable:
    <verbatim>
    tablecopy stars.fits stars.xml
    </verbatim>
</li>

<li>Do the same thing but to a VOTable with the data base64-encoded
    inline in BINARY format:
    <verbatim>
    tablecopy -ofmt votable-binary stars.fits stars.vot
    </verbatim>
</li>

<li>Print the contents of the fifth TABLE element in a VOTable
    document to the screen:
    <verbatim>
    tablecopy -ofmt text vizier.xml#4 -
    </verbatim>
</li>

<li>Write the results of an SQL query on a MySQL database to
a FITS binary table:
    <verbatim>
    java -Djdbc.drivers=com.mysql.jdbc.Driver
         -classpath topcat.jar:mysql-connector-java-3.0.6-stable-bin.jar
         uk.ac.starlink.table.TableCopy
         -ofmt fits
         "jdbc:mysql://localhost/astro1#SELECT ra, dec, Imag, Kmag FROM dqc"
         wfslist.cat
    </verbatim>
</li>

</ul>
</p>

</sect>

</appendices>

</docbody>

</sun>
