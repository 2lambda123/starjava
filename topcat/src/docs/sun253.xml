<?xml version='1.0'?>
<!DOCTYPE sun SYSTEM "docs.dtd" [

  <!-- Import entity definitions for icons used by the TOPCAT application. -->
  <!ENTITY % image-defs SYSTEM "image.defs">
  %image-defs;

  <!-- Define automatically generated text entities. -->
  <!ENTITY general.runtime.method.docs SYSTEM "general-javadocs.xml">
  <!ENTITY activation.runtime.method.docs SYSTEM "activation-javadocs.xml">
  <!ENTITY topcat.usage SYSTEM "topcat.usage">

  <!-- Define some character constants. -->
  <!ENTITY column.id.char '$'>
  <!ENTITY subset.id.char '_'>

  <!-- Define illustrations -->
  <!ENTITY figs '../figures/'>
  <!ENTITY FIG.ControlWindow '&figs;ControlWindow.gif'>
  <!ENTITY FIG.ColumnInfoWindow '&figs;ColumnInfoWindow.gif'>
  <!ENTITY FIG.JTable '&figs;JTable.gif'>
  <!ENTITY FIG.ParameterWindow '&figs;ParameterWindow.gif'>
  <!ENTITY FIG.TableViewerWindow '&figs;TableViewerWindow.gif'>
  <!ENTITY FIG.SubsetWindow '&figs;SubsetWindow.gif'>
  <!ENTITY FIG.StatsWindow '&figs;StatsWindow.gif'>
  <!ENTITY FIG.PlotWindow '&figs;PlotWindow.gif'>
  <!ENTITY FIG.PlotWindow_blob '&figs;PlotWindow_blob.gif'>
  <!ENTITY FIG.LoadQueryWindow '&figs;LoadQueryWindow.gif'>
  <!ENTITY FIG.FilestoreTableLoadDialog '&figs;FilestoreTableLoadDialog.gif'>
  <!ENTITY FIG.TreeTableLoadDialog '&figs;TreeTableLoadDialog.gif'>
  <!ENTITY FIG.SQLReadDialog '&figs;SQLReadDialog.gif'>
  <!ENTITY FIG.ConeSearchDialog '&figs;ConeSearchDialog.gif'>
  <!ENTITY FIG.SaveQueryWindow '&figs;SaveQueryWindow.gif'>
  <!ENTITY FIG.FilestoreTableSaveDialog '&figs;FilestoreTableSaveDialog.gif'>
  <!ENTITY FIG.SQLWriteDialog '&figs;SQLWriteDialog.gif'>
  <!ENTITY FIG.ConcatWindow '&figs;ConcatWindow.gif'>
  <!ENTITY FIG.MatchWindow '&figs;MatchWindow.gif'>
  <!ENTITY FIG.MatchWindow1 '&figs;MatchWindow1.gif'>
  <!ENTITY FIG.ActivationQueryWindow '&figs;ActivationQueryWindow.gif'>
  <!ENTITY FIG.SoG '&figs;SoG.gif'>
  <!ENTITY FIG.ImageWindow '&figs;ImageWindow.gif'>
  <!ENTITY FIG.Splat '&figs;Splat.gif'>
  <!ENTITY FIG.HelpWindow '&figs;HelpWindow.gif'>
  <!ENTITY FIG.ParameterQueryWindow '&figs;ParameterQueryWindow.gif'>
  <!ENTITY FIG.SyntheticColumnQueryWindow 
           '&figs;SyntheticColumnQueryWindow.gif'>
  <!ENTITY FIG.SyntheticSubsetQueryWindow 
           '&figs;SyntheticSubsetQueryWindow.gif'>
  <!ENTITY FIG.MethodWindow '&figs;MethodWindow.gif'>
  <!ENTITY FIG.HtmlWindow '&figs;HtmlWindow.gif'>
  <!ENTITY FIG.LogWindow '&figs;LogWindow.gif'>

  <!-- Define external URLs. -->
  <!ENTITY URL.VOTABLE "http://www.ivoa.net/Documents/latest/VOT.html">
  <!ENTITY URL.J2SE_DOCS "http://java.sun.com/j2se/1.4.2/docs/">
]>

<sun>

<docinfo>

<title>TOPCAT - Tool for OPerations on Catalogues And Tables</title>

<authorlist>
<author id="mbt" 
        email="m.b.taylor@bristol.ac.uk"
        webpage="http://www.star.bristol.ac.uk/~mbt/"
        affiliation="Starlink, University of Bristol"
        >Mark Taylor</author>
</authorlist>

<docnumber>253</docnumber>

<history><version><px>$Id$</px></version></history>
<docdate>30 June 2005</docdate>

<contactlist>
<contact>TOPCAT web page:
         <webref url="http://www.starlink.ac.uk/topcat/"/></contact>
<contact>Author email:
         <webref url="mailto:m.b.taylor@bristol.ac.uk"
                 >m.b.taylor@bristol.ac.uk</webref></contact>
<contact>Starlink: <webref url="http://www.starlink.ac.uk/"/></contact>
</contactlist>

</docinfo>

<!-- ............................................................... -->
<docbody>

<abstract>
<px>TOPCAT is an interactive graphical viewer and editor for tabular data.
It has been designed for use with astronomical tables such as object 
catalogues, but is not restricted to astronomical applications.
It understands a number of different astronomically important formats,
and more formats can be added.
It is designed to cope well with large tables; 
a million rows by a hundred columns should not present a problem 
even with modest memory and CPU resources.
</px>

<px>It offers a variety of ways to view and analyse the data,
including a browser for the cell data themselves, 
viewers for information about table and column metadata,
and facilities for plotting, calculating statistics and joining tables
using flexible matching algorithms.
Using a powerful and extensible Java-based expression language
new columns can be defined and row subsets selected for separate analysis.
Selecting a row can be configured to trigger an action, for instance
displaying an image of the catalogue object in an external viewer.
Table data and metadata can be edited and the resulting modified table
can be written out in a wide range of output formats.
</px>

<px>TOPCAT is written in pure Java and is available under the 
GNU General Public Licence.  Its underlying table processing facilities
are provided by the Starlink Tables Infrastructure Library.
</px>

</abstract>

<sect id="intro">
<subhead><title>Introduction</title></subhead>

<p>TOPCAT is a graphical program which can examine, analyse, combine, edit and
write out tables.  A table is, roughly, something with columns and rows;
each column contains objects of the same type
(for instance floating point numbers) and each row has an entry for
each of the columns (though some entries might be blank).
A common astronomical example of a table is an object catalogue.
</p>

<p>TOPCAT can read in tables in a number of formats from various sources, 
allow you to
inspect and manipulate them in various ways, and if you have
edited them optionally write them out in the modified state for later use,
again in a variety of formats.
Here is a summary of its main capabilities:
<ul>
<li>View/edit table data in a scrollable browser</li>
<li>View/edit table metadata (parameters)</li>
<li>View/edit column metadata (column names, units, UCDs...)</li>
<li>Re-order and hide/reveal columns</li>
<li>Insert 'synthetic' columns defined by algebraic expression</li>
<li>Sort rows on the values in a given column</li>
<li>Define row subsets in various ways, including algebraically 
    and graphically</li>
<li>Plot columns against each other, distinguishing different subsets</li>
<li>Calculate statistics on each column for some or all rows</li>
<li>Trigger a configurable action (e.g. object image display) when a 
    column is selected</li>
<li>Perform flexible matching of rows in the same or different tables</li>
<li>Concatenate the rows of existing tables to create new ones</li>
<li>Acquire tables from web services, external filestores or other 
    customisable sources</li>
<li>Write modified tables out in original or different format</li>
</ul>
</p>

<p>The general idea of the program is quite straightforward.
At any time, it has a list of tables it knows about - these are 
displayed in the <ref id="ControlWindow">Control Window</ref> which 
is the first thing you see when you start up the program.
You can add to the list by <ref id="LoadQueryWindow">loading tables in</ref>,
or by some actions which create new tables from the existing ones.
When you select a table in the list by clicking on it, 
you can see general information
about it in the control window, and you can also open more specialised 
<ref id="views">view windows</ref> which allow you to 
inspect it in more detail or edit it.
Some of the actions you can take, 
such as changing the current 
<ref id="order">Sort Order</ref>,
<ref id="subsets">Row Subset</ref> or
<ref id="columns">Column Set</ref>
change the <ref id="apparent" plaintextref="yes">Apparent Table</ref>, 
which is a view
of the table used for things such as saving it and performing row matches.
Changes that you make do not directly modify the tables on disk 
(or wherever they came from), 
but if you want to save the changes you have made,
you can <ref id="SaveQueryWindow">write</ref> 
the modified table(s) to a new location.
</p>

<p>The main body of this document explains these ideas and capabilities
in more detail, and 
<ref id="windows"/> gives a full description of all the windows which
form the application.
While the program is running, this document is available via the
online help system - clicking the <label>Help</label> (&IMG.HELP;)
toolbar button in any window will pop up a help browser open at
the page which describes that window.
This document is heavily hyperlinked, so you may find it easier to
read in its HTML form than on paper.
</p>

<p>Recent news about the program can be found on the
<webref url="http://www.starlink.ac.uk/topcat/" plaintextref="yes"
        >TOPCAT web page</webref>.
It has been written by the
<webref url="http://www.starlink.ac.uk/">Starlink</webref> project.
The underlying table handling facilities are supplied by
the Starlink Tables Infrastructure Library
<webref url="http://www.starlink.ac.uk/stil/" plaintextref="yes">STIL</webref>,
which is documented more fully in <docxref doc="sun252"/>.
It is written in pure Java (the current version requires J2SE1.4; 
it will run under version 1.5/5.0, but certain features don't work correctly)
which makes it highly portable, since it can run on any machine which has
a suitable Java installation; however some of the external viewer 
applications it talks to rely on non-Java code though so one or 
two facilities, such as displaying spectra, may be absent in some cases.
TOPCAT is available under the terms of the 
GNU <webref url="http://www.gnu.org/copyleft/gpl.html"
            >General Public License</webref>.
</p>

</sect>


<sect id="apparent">
<subhead><title>Apparent Table</title></subhead>

<p>The <label>Apparent Table</label> 
is a particular view of a table which can be
influenced by some of the viewing controls.
</p>

<p>When you load a table into TOPCAT it has a number of characteristics
like the number of columns and rows it contains, the order of the rows
that make up the data, the data and metadata themselves, and so on.
While manipulating it you can modify the way that the table appears
to the program, by changing or adding data or metadata, 
or changing the order or selection of columns or rows that are visible.
For each table its "apparent table" is a table which corresponds to
the current state of the table according to the changes that you have made.
</p>

<p>In detail, the apparent table consists of the table as it was originally
imported into the program plus any of the following changes that you
have made:
<ul>
<li>Changes to the current 
    <ref id="columns" plaintextref="yes">Column Set</ref> caused
    by adding, hiding or moving columns</li>
<li>Changes to the current 
    <ref id="order" plaintextref="yes">Row Order</ref> caused by 
    doing a sort</li>
<li>Selection of rows changed by changing the current
    <ref id="subsets" plaintextref="yes">Row Subset</ref></li>
<li>Changes to cell data by editing cells in the 
    <ref id="TableViewerWindow">Data window</ref></li>
<li>Changes to table metadata by editing cells in the 
    <ref id="ParameterWindow">Parameter window</ref></li>
<li>Changes to column metadata by editing cells in the 
    <ref id="ColumnInfoWindow">Columns window</ref></li>
</ul>
</p>

<p>The apparent table is used in the following contexts:
<dl>

<dt>Data Window</dt>
<dd><p>The <ref id="TableViewerWindow">Data window</ref>
    always shows the rows and columns of the apparent table, 
    so if you are in doubt about what
    form a table will get exported in, you can see what it looks like there.
    </p></dd>

<dt>Exports</dt>
<dd><p>When you save a table, or export it by dragging it off the
    Table List panel in the <ref id="ControlWindow">Control Window</ref>,
    or create a duplicate table,
    it is the apparent table which is copied.
    So for instance if you define a subset containing only the first
    ten rows of a table
    and then save it to a new table, or create a duplicate within TOPCAT
    using the <label>Duplicate Table</label> (&IMG.COPY;) toolbar button,
    the resulting table will contain only those ten rows.
    </p></dd>

<dt>Joins</dt>
<dd><p>When you use the <ref id="MatchWindow">Match Window</ref> or
    <ref id="ConcatWindow">Concatenation Window</ref> to construct a
    new table on the basis of one or more existing ones,
    the new table will be built on the basis of the apparent versions
    of the tables being operated on.
    </p></dd>

</dl>
Some of the other table view windows are affected too, for instance
the <ref id="ColumnInfoWindow">Columns window</ref> 
displays its columns in the order that they appear in the Apparent Table.
</p>

<subsect id="subsets">
<subhead><title>Row Subsets</title></subhead>

<p>An important feature of TOPCAT is the ability to define and use 
<label>Row Subsets</label>.  A Row Subset is a selection of the 
rows within a whole table being viewed within the application, 
or equivalently a new table composed from some subset of its rows.
You can define these and use them in several different ways;
the usefulness comes from defining them in one context and using them
in another.
The <ref id="SubsetWindow">Subset Window</ref> displays the currently
defined Row Subsets and permits some operations on them.
</p>

<p>At any time each table has a <label>current</label> row subset,
and this affects the <ref id="apparent">Apparent Table</ref>.
You can always see what it is by looking at the "Row Subset" selector
in the <ref id="ControlWindow">Control Window</ref> when that table
is selected; by default it is one containing all the rows.
You can change it by choosing from this selector
or as a result of some other actions.
</p>

<p>Other contexts in which subsets can be used are picking a selection
of rows from which to calculate in the
<ref id="StatsWindow">Statistics Window</ref>
and marking groups of rows to plot using different markers in the
<ref id="PlotWindow">Plot Window</ref>.
</p>

<subsubsect id="subsetDef">
<subhead><title>Defining Subsets</title></subhead>

<p>You can define a Row Subset in one of the following ways:

<dl>
<dt>Selecting rows in the browser</dt>
<dd><p>You can select a single row in the 
    <ref id="TableViewerWindow">Data Window</ref> by
    clicking on it, or select a group of adjacent rows by dragging
    the mouse over them.  You can add more rows to the selection by
    keeping the &lt;Control&gt; button pressed while you do it.
    Once you have a set of rows selected you can use the
    <label>Subset From Selected Rows</label> (&IMG.INCLUDE_ROWS;) or
    <label>Subset From Unselected Rows</label> (&IMG.EXCLUDE_ROWS;)
    buttons to create a new subset based
    on the set of highlighted rows or their complement.
    </p>

    <p>Combining this with <ref id="order">sorting</ref> 
    the rows in the table can be useful; 
    if you do a Sort Up on a given column and then drag out the
    top few rows of the table you can easily create a subset consisting
    of the highest values of a given column.
    </p></dd>

<dt>Defining an algebraic expression</dt>
<dd><p>From the <ref id="SubsetWindow">Subset Window</ref> using the
    <label>Add New Subset</label> (&IMG.ADD;) button will pop up 
    the <ref id="SyntheticSubsetQueryWindow">Algebraic Subset Window</ref>
    which allows you to define a new subset using an algebraic expression
    based on the values of the cells in each row.
    The format of such expressions is described in <ref id="jel"/>.
    </p></dd>

<dt>Visible plotted points</dt>
<dd><p>In the <ref id="PlotWindow">Plot Window</ref> you can plot columns
    against each other, and subsequently zoom in and out using the
    mouse.  If you zoom to display only some of the plotted points and
    then use the <label>New Subset From Visible</label> (&IMG.VISIBLE_SUBSET;)
    button then a new subset will be
    created containing only rows represented by points in the field of
    view of the plot at the time.
    </p></dd>

<dt>Selected plotted points</dt>
<dd><p>For more control over which plotted points are to be included in
    a subset, you can use the <label>Draw Subset Region</label> 
    (&IMG.BLOB_SUBSET;) button in the Plot Window.  This allows you 
    to trace out with the mouse a region or regions of any shape, 
    creating a new subset containing only those rows represented by 
    the points within those regions.
    </p></dd>

<dt>Boolean columns</dt>
<dd><p>Any column which has a boolean (true/false) type value can be used
    as a subset; rows in which it has a true value are in the subset
    and others are not.  Any boolean column in a table is made available
    as a row subset with the same name when the table is imported.
    </p></dd>

</dl>
</p>

<p>In all these cases you will be asked to assign a name for the subset.
As with column names, it is a good idea to follow a few rules for these
names so that they can be used in <ref id="jel">algebraic expressions</ref>.  
They should be:
<ul>
<li>Different from other subset and column names, 
    even apart from upper/lower case distinctions</li>
<li>In the form of a java identifier (starts with a letter, continues with
    alphanumerics including underscore, no spaces)</li>
<li>Not too long</li>
</ul>
</p>

<p>In the first two subset definition methods above, 
the <label>current</label> subset will be set immediately to the
newly created one.
</p>

</subsubsect>

</subsect>

<subsect id="order">
<subhead><title>Row Order</title></subhead>

<p>You can sort the rows of each table according to the
values in a selected column.
Normally you will want to sort on
a numeric column, but other values may be sortable too, for instance
a String column will sort alphabetically.
Some kinds of columns (e.g. array ones) don't have any well-defined
order, and it is not possible to select these for sorting on.
</p>

<p>At any time, each table has a <label>current</label> row order,
and this affects the <ref id="apparent">Apparent Table</ref>.
You can always see what it is by looking under the "Sort Order" item
in the <ref id="ControlWindow">Control Window</ref> when that table
is selected; by default it is "(none)", which means the rows have the
same order as that of the table they were loaded in from.
The little arrow (&IMG.UP_TRIM;/&IMG.DOWN_TRIM;) indicates whether
the sense of the sort is up or down.  You can change the sort order
by selecting a column name from this control, and change the sense
by clicking on the arrow.  The sort order can also be changed
by using menu items in the 
<ref id="ColumnInfoWindow">Columns Window</ref> or right-clicking
popup menus in the <ref id="TableViewerWindow">Data Window</ref>.
</p>

<p>Selecting a column to sort by calculates the new row order 
by performing a sort on the cell values there and then.
If the table data change somehow (e.g. because you edit
cells in the table) then it is possible for the sort order 
to become out of date.
</p>

<p>The current row order affects the <ref id="apparent">Apparent Table</ref>,
and hence determines the order of rows in tables which are exported 
in any way (e.g. written out) from TOPCAT.  You can always see the
rows in their currently sorted order in the 
<ref id="TableViewerWindow">Data Window</ref>.
</p>

</subsect>

<subsect id="columns">
<subhead><title>Column Set</title></subhead>

<p>When each table is imported it has a list of columns.
Each column has header information which determines the kind of 
data which can fill the cells of that column as well as a name,
and maybe some additional information like units and 
<webref url="http://vizier.u-strasbg.fr/doc/UCD.htx"
         >Unified Content Descriptor</webref>.
All this information can be viewed, and in some cases modified,
in the <ref id="ColumnInfoWindow">Columns Window</ref>.
</p>

<p>During the lifetime of the table within TOPCAT, 
this list of columns can be
changed by adding new columns, hiding (and perhaps subsequently 
revealing) existing columns, and changing their order.  The 
current state of which columns are present and visible and what order 
they are in is collectively known as the <label>Column Set</label>,
and affects the <ref id="apparent">Apparent Table</ref>.
The current Column Set is always reflected in the order in which 
columns are displayed in the <ref id="TableViewerWindow">Data Window</ref>
and <ref id="StatsWindow">Statistics Window</ref>.
The <ref id="ColumnInfoWindow">Columns Window</ref> shows all the
known columns, including hidden ones, in Column Set order;
whether they are currently visible is indicated by the (leftmost)
"Visible" column.
</p>

<p>You can affect the current Column Set in the following ways:
<dl>

<dt>Hide/Reveal columns</dt>
<dd><p>In the Columns Window you can toggle columns between hidden and
    visible by clicking on their box in the <label>Visible</label> column.
    To make a group of columns hidden or visible at once,
    select the corresponding rows (drag the mouse over them to select
    a contiguous group; hold the Control button down to add
    more single rows or contiguous groups to the selection) and hit the 
    <label>Hide Selected</label> (&IMG.HIDE;) or
    <label>Reveal Selected</label> (&IMG.REVEAL;)
    button in the toolbar or menu.
    Note when selecting rows, don't drag the mouse over the Visible 
    column, do it somewhere in the middle of the table.
    </p>

    <p>You can also hide a column by right-clicking on it in the 
    <ref id="TableViewerWindow">Data Window</ref>, which brings up 
    a popup menu - select the <label>Hide</label> option.
    To make it visible again you have to go to the Columns Window as above.
    </p></dd>

<dt>Move Columns</dt>
<dd><p>In the Data Window you can move columns around by dragging the
    grey column header left or right to a new position (as usual in a 
    <ref id="JTable">JTable</ref>).  This affects the Column Set, as
    you can see if you watch the Columns Window while you do it.
    </p></dd>

<dt>Add a Synthetic Column</dt>
<dd><p>You can use the 
    <label>New Synthetic Column</label> (&IMG.ADD;) button in the
    Columns Window or the (right-click) popup menu in the 
    Data Window to bring up the 
    <ref id="SyntheticColumnQueryWindow">Synthetic Column Window</ref>,
    which allows you to define a new column defined algebraically from
    the values of existing columns.  The expression syntax is 
    described in <ref id="jel"/>.  This gives you functionality a 
    bit like that of a column-oriented spreadsheet.
    </p></dd>

<dt>Replace a Column</dt>
<dd><p>If a column is selected in the Columns Window or from the 
    Data Window popup menu you can use the 
    <label>Replace Column with Synthetic</label> (&IMG.MODIFY;) button.
    This is similar to the <label>Add a Synthetic Column</label> 
    described in the previous item, but it pops up a new column 
    dialogue with similar characteristics (name, units etc) 
    to those of the column that's being replaced, and when completed 
    it slots the new column in to the table hiding the old one.
    </p></dd>

<dt>Add a Subset Column</dt>
<dd><p>If you have defined a <ref id="subsets">Row Subset</ref> somehow
    and you want it to appear explicitly in the table 
    (for instance so that when you write the table out the selection is saved)
    you can select that subset in the 
    <ref id="SubsetWindow">Subsets Window</ref> and use the 
    <label>To Column</label> (&IMG.TO_COLUMN;) button, which will add
    a new boolean column to the table with the value <label>true</label> 
    for rows part of that subset and <label>false</label> for the other rows.
    </p></dd>

</dl>
</p>

</subsect>

</sect>

<sect>
<subhead><title>Table Formats</title></subhead>

<p>TOPCAT supports a wide variety of tabular data formats.
In most cases these are file formats for tables stored as single files
on a disk or at the end of a URL, but there are other possibilities,
for instance a table you have opened could 
be the result of an SQL query on a database.
</p>

<p>Since you can load a table from one format and save it in a different
one, TOPCAT can be used to convert a table from one format to another.
If this is all you want to do however, you may find it more 
convenient to use the <code>tcopy</code> command line utility in the 
<webref url="http://www.starlink.ac.uk/stilts/">STILTS</webref> package.
</p>

<p>The format handling is extensible, so new formats can
be added fairly easily.  All the table input/output is handled by 
STIL, the Starlink Tables Infrastructure Library;
more detailed descriptions of the I/O capabilities can be found in its
<webref plaintextref="yes" url="http://www.starlink.ac.uk/stil/"
        >documentation</webref>.
</p>

<p>The following subsections describe the available formats for reading
and writing tables.  The two operations are separate, so not all the
supported input formats have matching output formats and vice versa.
</p>

<subsect id="inFormats">
<subhead><title>Supported Input Formats</title></subhead>

<p>Loading tables into TOPCAT is done either from the command line
when you start the program up or
using the <ref id="LoadQueryWindow">Load Table</ref> dialogue.
For FITS and VOTable formats
the file format can be detected automatically
(note this is done by looking at the file content, it has nothing
to do with filename extensions).
For other formats though, for instance ASCII or Comma-Separated Values,
you will have to specify the format that the file is in.
In the Load Window, there is a selection box from which you can
choose the format, and from the command line you use the
<code>-f</code> flag - see <ref id="invoke"/> for details.
You can always specify the format rather than using automatic detection
if you prefer - this can be a good idea if a table appears to 
be failing to load in a surprising way, since it may give you 
a more detailed error message.
</p>

<p>In either case, table locations may be given as filenames or
as URLs, and any data compression (gzip, unix compress and bzip2)
will be automatically detected and dealt with.
</p>

<p><strong>Note:</strong> in some earlier versions of TOPCAT, ASCII
format tables could be detected automatically, so you could load
them by typing something like "<code>topcat table.txt</code>".
In the current version, you have to signal that this is an 
ASCII table, for instance by typing "<code>topcat -f ascii table.txt</code>".
</p>

<p>The following sections describe the table formats which TOPCAT can read.</p>

<subsubsect>
<subhead><title>FITS</title></subhead>

<p>FITS binary and ASCII table extensions can be read.
Unless told otherwise, TOPCAT will display the first TABLE or BINTABLE
extension in a given FITS file.
If a later extension is required, this is indicated by giving the
extension number after a '#' at the end of the table location.
The first extension (first HDU after the primary HDU) is numbered 1.
Thus in a compressed FITS table named "spec23.fits.gz"
with one primary HDU and two BINTABLE extensions,
you would view the first one using the name "spec23.fits.gz"
or "spec23.fits.gz#1" and the second one using the name "spec23.fits.gz#2".
The suffix "#0" is never used for a legal
FITS file, since the primary HDU cannot contain a table.
</p>

<p>You can select which extension to use more conveniently than
by specifying the HDU numbers if you use the
<ref id="TreeTableLoadDialog">Hierarchy Browser</ref> to load the table.
</p>

<p>If the table has been written using TOPCAT's "<code>fits-plus</code>"
output format (see <ref id="outFits"/>) then the metadata will be
read in from the primary HDU as well.
</p>

<p>If the table is stored in a FITS binary table extension in a file
on local disk in uncompressed form, then the table is 'mapped' into
memory - this generally means fast loading and low memory use, 
even in the absence of TOPCAT's <code>-disk</code> flag
(<ref id="topcatArgs"/>).
</p>

</subsubsect>

<subsubsect id="inVotable">
<subhead><title>VOTable</title></subhead>

<p>VOTable is an XML-based format for tabular data endorsed by the
<webref url="http://www.ivoa.net/"
        >International Virtual Observatory Alliance</webref>;
while the tabular data which can be encoded is by design close to
what FITS allows, it provides for much richer encoding of structure 
and metadata.
TOPCAT is believed to read any table which conforms to the
VOTable 1.0 or VOTable 1.1
<webref plaintextref="yes" url="&URL.VOTABLE;">specification</webref>.
This includes tables in which the cell data are
included in-line as XML elements (VOTable/TABLEDATA format),
or included/referenced as a FITS table (VOTable/FITS)
or included/referenced as a raw binary stream (VOTable/BINARY).
TOPCAT does not attempt to be fussy about input VOTable documents,
and it will have a good go at reading VOTables which 
violate the standards in various ways.
</p>

<p>VOTable documents can have a complicated hierarchical structure,
and may contain more than one actual table.
Unless told otherwise, TOPCAT will load the first table it finds
in the document, so in the (common) case that the document holds
exactly one table, giving the filename will load that sole table.
To display a table other than the first, you must indicate the
zero-based index of the TABLE element in a breadth-first search
after a '#' character at the end of the table specification.
Here is an example VOTable document:
<verbatim><![CDATA[
   <VOTABLE>
     <RESOURCE>
       <TABLE name="Star Catalogue"> ... </TABLE>
       <TABLE name="Galaxy Catalogue"> ... </TABLE>
     </RESOURCE>
   </VOTABLE>
]]></verbatim>
If this is available in a file named "cats.xml"
then open the Star Catalogue using the name "cats.xml"
or "cats.xml#0", and the Galaxy Catalogue using the name
"cats.xml#1".
</p>

</subsubsect>

<subsubsect id="inAscii">
<subhead><title>ASCII</title></subhead>

<p>In many cases tables are stored in some sort of unstructured plain
text format, with cells separated by spaces or some other delimiters.
There is a wide variety of such formats depending on what delimiters
are used, how columns are identified, whether blank values are permitted
and so on.  It is impossible to cope with them all, but TOPCAT
attempts to make a good guess about how to interpret a given ASCII file as
a table, which in many cases is successful.  In particular, if you just
have columns of numbers separated by something that looks like spaces,
you should be just fine.
</p>

<p>Here are the detailed rules for how the ASCII-format tables are 
interpreted:
<ul>
<li>Bytes in the file are interpreted as ASCII characters</li>
<li>Each table row is represented by a single line of text</li>
<li>Lines are terminated by one or more contiguous line termination
    characters: line feed (0x0A) or carriage return (0x0D)</li>
<li>Within a line, fields are separated by one or more whitespace
    characters: space (" ") or tab (0x09)</li>
<li>A field is either an unquoted sequence of non-whitespace characters,
    or a sequence of non-newline characters between matching
    single (') or double (") quote characters -
    spaces are therefore allowed in quoted fields</li>
<li>Within a quoted field, whitespace characters are permitted and are
    treated literally</li>
<li>Within a quoted field, any character preceded by a backslash character
    ("\") is treated literally.  This allows quote characters to appear
    within a quoted string.</li>
<li>An empty quoted string (two adjacent quotes) 
    or the string "<code>null</code>" (unquoted) represents
    the null value</li>
<li>All data lines must contain the same number of fields (this is the
    number of columns in the table)</li>
<li>The data type of a column is guessed according to the fields that
    appear in the table.  If all the fields in one column can be parsed
    as integers (or null values), then that column will turn into an 
    integer-type column.  The types that are tried, in order of 
    preference, are:
       <code>Boolean</code>,
       <code>Short</code>
       <code>Integer</code>,
       <code>Long</code>,
       <code>Float</code>,
       <code>Double</code>,
       <code>String</code>
    </li>
<li>Empty lines are ignored</li>
<li>Anything after a hash character "#" (except one in a quoted string)
    on a line is ignored as far as table data goes;
    any line which starts with a "!" is also ignored.
    However, lines which start with a "#" or "!" at the start of the table
    (before any data lines) will be interpreted as metadata as follows:
    <ul>
    <li>The last "#"/"!"-starting line before the first data line may
        contain
        the column names.  If it has the same number of fields as 
        there are columns in the table, each field will be taken to be 
        the title of the corresponding column.  Otherwise, it will be 
        taken as a normal comment line.</li>
    <li>Any comment lines before the first data line not covered by the
        above will be concatenated to form the "description" parameter
        of the table.</li>
    </ul>
    </li>
</ul>
</p>

<p>If the list of rules above looks frightening, don't worry,
in many cases it ought
to make sense of a table without you having to read the small print.
Here is an example of a suitable ASCII-format table:
<verbatim>
    #
    # Here is a list of some animals.
    #
    # RECNO  SPECIES         NAME         LEGS   HEIGHT/m
      1      pig             "Pigling Bland"  4  0.8
      2      cow             Daisy        4      2
      3      goldfish        Dobbin       ""     0.05
      4      ant             ""           6      0.001
      5      ant             ""           6      0.001
      6      ant             ''           6      0.001
      7      "queen ant"     'Ma\'am'     6      2e-3
      8      human           "Mark"       2      1.8
</verbatim>
In this case it will identify the following columns:
<verbatim>
    Name       Type
    ----       ----
    RECNO      Short
    SPECIES    String
    NAME       String
    LEGS       Short
    HEIGHT/m   Float
</verbatim>
It will also use the text "<code>Here is a list of some animals</code>"
as the Description parameter of the table.
Without any of the comment lines, it would still interpret the table,
but the columns would be given the names <code>col1</code>..<code>col5</code>.
</p>

<p>If you understand the format of your files but they don't exactly
match the criteria above, the best thing is probably to write a
simple free-standing program or script which will convert them
into the format described here.
You may find Perl or awk suitable languages for this sort of thing.
</p>

<p>This format is not detected automatically - you must specify that
you wish to load a table in <code>ascii</code> format.
</p>

</subsubsect>

<subsubsect id="inCsv">
<subhead><title>Comma-Separated Values</title></subhead>

<p>Comma-separated value ("CSV") format is a common semi-standard 
text-based format in which fields are delimited by commas.
Spreadsheets and databases are often able to export data in some 
variant of it.  The intention is that TOPCAT can read tables in 
the version of the format spoken by MS Excel amongst other applications, 
though the documentation
on which it was based was not obtained directly from Microsoft.
</p>

<p>The rules for data which it understands are as follows:
<ul> 
<li>Each row must have the same number of comma-separated fields.
    </li>
<li>Whitespace (space or tab) adjacent to a comma is ignored.
    </li>
<li>Adjacent commas, or a comma at the start or end of a line
    (whitespace apart) indicates a null field.
    </li>
<li>Lines are terminated by any sequence of carriage-return or newline
    characters ('\r' or '\n')
    (a corollary of this is that blank lines are ignored).
    </li>
<li>Cells may be enclosed in double quotes; quoted values may contain
    linebreaks (or any other character); a double quote character within
    a quoted value is represented by two adjacent double quotes.
    </li>
<li>The first line <em>may</em> be a header line containing column names
    rather than a row of data.  Exactly the same syntactic rules are
    followed for such a row as for data rows.
    </li> 
</ul>
</p>

<p>This format is not detected automatically - you must specify that
you wish to load a table in <code>csv</code> format.
</p>

</subsubsect>

<subsubsect id="inSql">
<subhead><title>SQL Database Queries</title></subhead>

<p>With appropriate configuration, TOPCAT can be used to examine the
results of queries on an SQL-compatible relational database.
</p>

<p>Database queries can be specified as a string in the form:
<verbatim>
   jdbc:<var>driver-specific-url</var>#<var>sql-query</var>
</verbatim>
The exact form is dependent on the driver.
Here is an example for MySQL:
<verbatim><![CDATA[
   jdbc:mysql://localhost/astro1?user=mbt#SELECT ra, dec FROM swaa WHERE vmag<18
]]></verbatim>
which would get a two-column table (the columns being "ra" and "dec"),
constructed from certain rows from the table "swaa" in the database
"astro1" on the local host, using the access privileges of user mbt.
</p>

<p>Fortunately you don't have to construct this by hand, there is
an <ref plaintextref="yes" id="SQLReadDialog">SQL Query Dialogue</ref> 
to assist in putting it together.
</p>

<p>Note that TOPCAT does not view a table in the database directly,
but the result of an SQL query on that table.  If you want to view
the whole table you can use the query
<verbatim>
   SELECT * FROM table-name
</verbatim>
but be aware that such a query might be expensive on a large table.
</p>

<p>Use of SQL queries requires some additional configuration of TOPCAT;
see <ref id="jdbcConfig"/>.
</p>

</subsubsect>

<subsubsect>
<subhead><title>World Data Center</title></subhead>

<p>Some support is provided for files produced by the
<webref url="http://www.wdc.rl.ac.uk/">World Data Centre for
Solar Terrestrial Physics</webref>.
The format itself apparently has no name, but files in this format
look something like the following:
<verbatim><![CDATA[
  Column formats and units - (Fixed format columns which are single space seperated.)
  ------------------------
  Datetime (YYYY mm dd HHMMSS)            %4d %2d %2d %6d      -
                                          %1s
  aa index - 3-HOURLY (Provisional)       %3d                  nT

  2000 01 01 000000  67
  2000 01 01 030000  32
      ...
]]></verbatim>
Support for WDC tables is experimental - it may not be very robust.
</p>

<p>This format is not detected automatically - you must specify that
you wish to load a table in <code>csv</code> format.
</p>

</subsubsect>

</subsect>


<subsect id="outFormats">
<subhead><title>Supported Output Formats</title></subhead>

<p>Writing out tables from TOPCAT is done 
using the <ref id="SaveQueryWindow">Save Table Window</ref>.
In general you have to specify the format in which you want the table
to be output by selecting from the Save Window's
<label>Table Output Format</label> selector; 
the following sections describe the possible choices.
In some cases there are variants within each format - these are
described as well.
</p>

<p>The program has no "native" file format, but if you have no particular
preference about which format to save tables to, 
<ref id="outFits">FITS</ref> is a good choice.
Uncompressed FITS tables do not in most cases have to be read all the
way through (they are 'mapped' into memory), which makes them very
fast to load up.
The FITS format which is written by default
(also known as "FITS-plus") also uses a trick to 
store extra metadata, such as table parameters and UCDs 
in a way TOPCAT can read in again later (see <ref id="outFits"/>). 
These files are quite usable as normal FITS tables by other applications, 
but they will only be able to see the limited metadata stored in the
FITS headers.
If you want to write to a format which retains all metadata in a portable
format, then one of the <ref id="outVotable"/> formats might be better.
</p>

<subsubsect id="outFits">
<subhead><title>FITS</title></subhead>

<p>When saving in FITS format a new file is written consisting of two HDUs
(Header+Data Units):
a primary one (required by the FITS standard), and a single extension of
type BINTABLE containing the table data.
</p>

<p>There are two variants of this format:
<dl>

<dt>fits-basic</dt>
<dd><p>The primary HDU contains only very minimal headers and no data.
    </p></dd>

<dt>fits-plus</dt>
<dd><p>The primary HDU contains an array of bytes
    which stores the full table metadata as the text of a VOTable document,
    along with headers that mark this has been done.
    Most FITS table readers will ignore this altogether and treat the
    file just as if it contained only the table.  
    When TOPCAT (or other 
    <webref url="http://www.starlink.ac.uk/stil/">STIL</webref>-based
    applications)
    read it however, they read out the metadata and make it available for use.
    In this way you can store your data in the efficient and widely portable
    FITS format without losing the additional metadata such as table parameters,
    column UCDs, lengthy column descriptions etc that may be attached
    to the table.  
    Other, more standard schemes exist for combining the benefits of FITS and
    VOTable, but suffer from some disadvantages: 
    <code>votable-fits-inline</code> is hard to process efficiently
    (in particular the data cannot easily be mapped into memory) and
    <code>votable-fits-href</code> requires that you keep your data in 
    two separate files, which can get separated from each other.
    If you want to ensure that the metadata are available to other VOTable-aware
    programs, you should use one of the normal
    <ref plaintextref="yes" id="outVotable">VOTable formats</ref>.
    </p></dd>

</dl>
In general, you can just let TOPCAT detect the format automatically
and not worry about which of these variants is being used - if 
<code>fits-plus</code> is being used you just get some hidden benefits.
</p>

</subsubsect>

<subsubsect id="outVotable">
<subhead><title>VOTable</title></subhead>

<p>When a table is saved to VOTable format, a document conforming to the
VOTable 1.0 specification containing a single TABLE element within
a single RESOURCE element is written.
</p>

<p>There are a number of variants which determine the form in which
the table data (DATA element) is written:
<dl>

<dt>votable-tabledata</dt>
<dd><p>TABLEDATA element (pure XML)
    </p></dd>

<dt>votable-binary-inline</dt>
<dd><p>BINARY element containing base64-encoded data within the document
    </p></dd>

<dt>votable-fits-href</dt>
<dd><p>FITS element containing a reference to an external newly-written FITS
    file (with a name derived from that of the VOTable document)
    </p></dd>

<dt>votable-binary-href</dt>
<dd><p>BINARY element containing a reference to an external newly-written
    binary file (with a name derived from that of the VOTable document)
    </p></dd>

<dt>votable-fits-inline</dt>
<dd><p>FITS element containing base64-encoded data within the document
    </p></dd>
</dl>
See the 
<webref url="&URL.VOTABLE;" plaintextref="yes">VOTable specification</webref> 
for more explanation of what these variants mean.
They can all be read by the 
<ref id="inVotable">VOTable input handler</ref>.
</p>

</subsubsect>

<subsubsect id="outAscii">
<subhead><title>ASCII</title></subhead>

<p>Tables can be written using a format which is compatible with
the <ref id="inAscii">ASCII input format</ref>.
It writes as plainly as possible, so should stand a good chance of
being comprehensible to other programs which require some sort of
plain text rendition of a table.  
</p>

<p>The first line is a comment (starting with a "<code>#</code>" character)
which names the columns, and
an attempt is made to line up data in columns using spaces.
Here is an example of a short table written in this format:
<verbatim>
   # index Species  Name   Legs Height Mammal
     1     pig      Bland  4    0.8    true  
     2     cow      Daisy  4    2.0    true  
     3     goldfish Dobbin 0    0.05   false 
     4     ant      ""     6    0.0010 false 
     5     ant      ""     6    0.0010 false 
     6     human    Mark   2    1.9    true  
</verbatim>
</p>

</subsubsect>


<subsubsect>
<subhead><title>Text</title></subhead>

<p>Tables can be written to a simple text-based format which is
designed to be read by humans.  No reader exists for this format.
</p>

<p>Here is an example of a short table written in this format:
<verbatim>
   +-------+----------+--------+------+--------+--------+
   | index | Species  | Name   | Legs | Height | Mammal |
   +-------+----------+--------+------+--------+--------+
   | 1     | pig      | Bland  | 4    | 0.8    | true   |
   | 2     | cow      | Daisy  | 4    | 2.0    | true   |
   | 3     | goldfish | Dobbin | 0    | 0.05   | false  |
   | 4     | ant      |        | 6    | 0.0010 | false  |
   | 5     | ant      |        | 6    | 0.0010 | false  |
   | 6     | human    | Mark   | 2    | 1.9    | true   |
   +-------+----------+--------+------+--------+--------+
</verbatim>
</p>

</subsubsect>

<subsubsect id="outCsv">
<subhead><title>Comma-Separated Values</title></subhead>

<p>Tables can be written to the semi-standard comma-separated value (CSV) 
format, described in more detail in <ref id="inCsv"/>.
This can be useful for importing into certain external applications,
such as some spreadsheets or databases.
The first row written contains the column names.
</p>

</subsubsect>


<subsubsect id="outSql">
<subhead><title>SQL Tables</title></subhead>

<p>With appropriate configuration, TOPCAT can write out tables as
new tables in an SQL-compatible relational database.
</p>

<p>For writing, the location is specified as the following URL:
<verbatim>
   jdbc:<var>driver-specific-url</var>#<var>new-table-name</var>
</verbatim>
The exact form is dependent on the driver.
Here is an example for MySQL:
<verbatim><![CDATA[
   jdbc:mysql://localhost/astro1?user=mbt#newtab
]]></verbatim>
which would write the current contents of the browser into a new table
named "newtab" in the database "astro1" on the local host with the
access privileges of user mbt.
</p>

<p>Fortunately you do not have to construct this URL by hand, there is
an <ref id="SQLWriteDialog">SQL dialogue box</ref> to assist
in putting it together.
</p>

<p>Use of SQL queries requires some additional configuration of TOPCAT;
see <ref id="jdbcConfig"/>.
</p>

</subsubsect>

<subsubsect>
<subhead><title>HTML</title></subhead>

<p>A table can be written out as an HTML 3.2
<webref url="http://www.w3c.org/TR/REC-html32#table">TABLE</webref> element,
suitable for use as a web page or insertion into one.
</p>

<p>There are two variants:
<dl>

<dt>HTML</dt>
<dd><p>A freestanding HTML document, complete with HTML, HEAD and BODY
    tags is output.
    </p></dd>

<dt>HTML-element</dt>
<dd><p>Only the TABLE element representing the table is output;
    this should normally be embedded in a larger HTML document before use.
    </p></dd>

</dl>
</p>

</subsubsect>

<subsubsect>
<subhead><title>LaTeX</title></subhead>

<p>A table can be written out as a LaTeX <code>tabular</code> environment,
suitable for insertion into a document intended for publication.
</p>

<p>There are two variants:
<dl>

<dt>LaTeX</dt>
<dd><p>The <code>tabular</code> element alone is output;
    this will have to be embedded in a larger LaTeX document before use.
    </p></dd>

<dt>LaTeX-document</dt>
<dd><p>A freestanding LaTeX document, consisting of the 
    <code>tabular</code> within a 
    <code>table</code> within a
    <code>document</code> is output.
    </p></dd>

</dl>
</p>

<p>Obviously, this isn't so suitable for very large tables.
</p>

</subsubsect>

<subsubsect id="mirage">
<subhead><title>Mirage Format</title></subhead>

<p><webref url="http://www.bell-labs.com/project/mirage/index.html"
           plaintextref="yes"
           >Mirage</webref>
is a powerful standalone java tool developed at Bell Labs for analysis of
multidimensional data.  It uses its own file format for input.
TOPCAT can write tables in the input format which Mirage uses,
so that you can prepare tables in TOPCAT and write them out for
subsequent use by Mirage.
</p>

<p>It is also possible in principle to launch Mirage directly
from within TOPCAT, using the 
<label>Export To Mirage</label> item on the 
<ref id="ControlWindow">Control Window</ref>'s <label>File</label> menu;
this will cause Mirage to start up viewing the currently selected
<ref id="apparent">Apparent Table</ref>.
In order for this to work the Mirage classes must
be on your classpath (see <ref id="jvmClasspath"/>) when TOPCAT is run.
</p>

<p>There appears to be 
a bug in Mirage which means this does not always work -
sometimes Mirage starts up with no data loaded into it.
In this case you will have to save the data to disk in Mirage format,
start up Mirage separately, and load the data in using the
<label>New Dataset</label> item in Mirage's <label>Console</label> menu.
</p>

<p>Note that when Mirage has been launched from TOPCAT, exiting Mirage
or closing its window will exit TOPCAT as well.
</p>

</subsubsect>

</subsect>

<subsect id="customHandlers">
<subhead><title>Custom I/O Formats</title></subhead>

<p>It is in principle possible to configure TOPCAT to work with
table file formats other than the ones listed in this section.
It does not require any upgrade of TOPCAT itself, but you have
to write or otherwise acquire an input and/or output handler for the
table format in question.
</p>

<p>The steps that you need to take are:
<ol>
<li>Write java classes which constitute your input and/or output handler</li>
<li>Ensure that these classes are available on your classpath while
    TOPCAT is running (see <ref id="jvmClasspath"/>)</li>
<li>Set the <code>startable.readers</code> and/or 
    <code>startable.writers</code> system property to the name of the
    handler classes (see <ref id="jvmProperties"/>)</li>
</ol>
</p>

<p>Explaining how to write such handlers is beyond the scope of this
document - see the user document and javadocs for 
<webref url="http://www.starlink.ac.uk/stil/" plaintextref="yes">STIL</webref>.
</p>

</subsect>

</sect>

<sect id="join">
<subhead><title>Joins and Matches</title></subhead>

<p>TOPCAT allows you to join two or more tables together to 
produce a new one in a variety of ways, and also to identify
"similar" rows within a single table according to their cell contents.
This section describes the facilities for performing these related
operations.
</p>

<p>There are two basic ways to join tables together: top-to-bottom and
side-by-side.
A top-to-bottom join (which here I call <label>concatenation</label>)
is fairly straightforward in that it just requires you to decide
which columns in one table correspond to which columns in the other.
A side-by-side join is more complicated - it is rarely the case that
row <m>i</m> in the first table should correspond to row <m>i</m> in the
second one, so it is necessary to provide some criteria for 
deciding which (if any) row in the second table corresponds to a given
row in the first.  In other words, some sort of <label>matching</label>
between rows in different tables needs to take place.
This corresponds to what is called a <em>join</em> in database technology.
Matching rows within a single table is a useful operation
which involves many of the same issues, so that is described here too.
</p>

<subsect id="concat">
<subhead><title>Concatenating Tables</title></subhead>

<p>Two tables can be concatenated using the 
<ref id="ConcatWindow">Concatenation Window</ref>,
which just requires you to specify the two tables to be joined,
and for each column in the first ("Base") table,
which column in the second ("Appended") table (if any) corresponds to it.
The <ref plaintextref="yes" id="apparent">Apparent Table</ref> 
is used in each case.
The resulting table, which is added to the list of known tables in
the <ref id="ControlWindow">Control Window</ref>,
has the same columns as the Base table, and a number of rows 
equal to the sum of the number of rows in the Base and Appended tables.
</p>

<p>As a very simple example, concatenating these two tables:
<verbatim>
   Messier   RA       Dec      Name
   -------   --       ---      ----
   97        168.63   55.03    Owl Nebula
   101       210.75   54.375   Pinwheel Galaxy
   64        194.13   21.700   Black Eye Galaxy
</verbatim>
and
<verbatim>
   RA2000    DEC2000   ID
   ------    -------   --
   185.6     58.08     M40
   186.3     18.20     M85
</verbatim>
with the assignments RA->RA2000, Dec->DEC2000 and Messier->ID would give:
<verbatim>
   Messier   RA       Dec      Name
   -------   --       ---      ----
   97        168.63   55.03    Owl Nebula
   101       210.75   54.375   Pinwheel Galaxy
   64        194.13   21.700   Black Eye Galaxy
   M40       185.6    58.08
   M85       183.6    18.20
</verbatim>
Of course it is the user's responsibility to ensure that the 
correspondance of columns is sensible (that the two corresponding
columns mean the same thing).
</p>

<p>You can perform a concatenation using the 
<ref id="ConcatWindow">Concatenation Window</ref>;
obtain this using the <label>Concatenate Tables</label> (&IMG.CONCAT;) button
in the <ref id="ControlWindow">Control Window</ref>.
</p>

</subsect>

<subsect id="pairMatch">
<subhead><title>Matching Rows Between Tables</title></subhead>

<p>When joining two tables side-by-side you need to identify which
row(s) in one correspond to which row(s) in the other.
Conceptually, this is done by looking at each row in the first table,
somehow identifying in the second table which row
"refers to the same thing", and putting a new row in the joined table
which consists of all the fields of the row in the first table, 
followed by all the fields of its matched row in the second table.
The resulting table then has a number of columns equal to the 
sum of the number of columns in both input tables.
</p>

<p>In practice, there are a number of complications.  For one thing, each 
row in one table may be matched by zero, one or many rows in the 
the other.  
For another, defining what is meant by "referring to the same thing" 
may not be straightforward.  There is also the problem of 
actually identifying these matches
in a relatively efficient way (without explicitly comparing each
row in one table with each row in the other, which would be far too slow
for large tables).
</p>

<p>A common example is the case of matching two object catalogues -
suppose we have the following catalogues:
<verbatim>
    Xpos       Ypos        Vmag
    ----       ----        ----
   1134.822    599.247     13.8
    659.68    1046.874     17.2
    909.613    543.293      9.3
</verbatim>
and
<verbatim>
    x           y          Bmag
    -           -          ---- 
   909.523     543.800     10.1
   1832.114    409.567     12.3
   1135.201    600.100     14.6
    702.622   1004.972     19.0
</verbatim>
and we wish to combine them to create one new catalogue with a row
for each object which appears in both tables.
To do this, you have to specify what counts as a match - in this
case let's say that a row in one table matches (refers to the same
object as) a row in the other if the distance between the positions
indicated by their X and Y coordinates matches to within one unit
(sqrt((Xpos-x)<sup>2</sup> + (Ypos-y)<sup>2</sup>)&lt;=1)).
Then the catalogue we will end up with is:
<verbatim>
    Xpos       Ypos        Vmag    x           y          Bmag
    ----       ----        ----    -           -          ---- 
   1134.822    599.247     13.8   1135.201    600.100     14.6
    909.613    543.293      9.3    909.523    543.800     10.1
</verbatim>
There are a number of variations on this however - your match criteria
might involve sky coordinates instead of Cartesian ones (or not be
physical coordinates at all), you might want to match more than two
tables, you might want to identify groups of matching objects in
a single table, you might want the output to include rows which
don't match as well...
</p>

<p>The <ref id="MatchWindow">Match Window</ref> allows you to specify
<ul>
<li>Which tables are to be matched</li>
<li>What the criteria are for matching rows</li>
<li>What to do for rows that don't have exactly one match</li>
<li>What rows to include in the output table</li>
</ul>
and to start the matching operation.
Currently, if there is more than one possible match for a row in
either of the tables being joined, the best one will be retained
and others will be discarded. 
The 'match score', indicating how close a successful match was, 
is recorded in an additional column (the final column) in the resulting table.
The exact value and meaning of this column depends on the kind of
match being performed, but it typically gives the distance between
the matched points in some sensible units;
the smaller the value, the better the match.
You can find out exactly what this score means by examining 
the column's description
in the <ref id="ColumnInfoWindow">Columns Window</ref>.
Columns in the resulting table retain their original names
unless that would lead to ambiguity, in which case
a disambiguating suffix "_1" or "_2" is added to the column name.
</p>

<p>To match two tables, use the <label>Pair Match</label> (&IMG.MATCH2;) button
in the <ref id="ControlWindow">Control Window</ref>; 
to match more tables than two at once, use the other options on the
Control Window's <label>Join</label> menu.
</p>

</subsect>

<subsect>
<subhead><title>Matching Rows Within a Table</title></subhead>

<p>Although the effect is rather different, searching through a 
single table for rows which match each other (refer to the same
object, as explained above) is a similar process and requires much
of the same information to be specified, mainly, what counts as
a match.
You can do this using the <ref id="MatchWindow1">Internal Match Window</ref>,
obtained by using the <label>Internal Match</label> (&IMG.MATCH1;) button
in the <ref id="ControlWindow">Control Window</ref>.
</p>

</subsect>

<subsect>
<subhead><title>Notes on Matching</title></subhead>

<p>This section provides a bit more detail on the how the row matching is done.
It is designed to give a rough idea to interested parties;
it is <em>not</em> a tutorial description from 
first principles of how it all works.
</p>

<p>The basic algorithm for matching is based on dividing up the space
of possibly-matching rows into an (indeterminate) number of bins.  
These bins will typically correspond to disjoint cells of a physical
or notional coordinate space, but need not do so.  In the first step, each
row of each table is assessed to determine which bins might contain
matches to it - this will generally be the bin that it falls into and
any "adjacent" bins within a distance corresponding to the matching
tolerance.  A reference to the row is associated with each such bin.
In the second step, each bin is examined, and if two or more 
rows are associated with it every possible pair of rows in the associated set
is assessed to see whether it does in fact consitute a matched pair.
This will identify all and only those row pairs which 
are related according to the selected match criteria.
During this process a number of optimisations may be applied depending
on the details of the data and the requested match.
</p>

<p>This means that the matching algorithm is 
basically an <m>O(N log(N))</m> process, 
where <m>N</m> is the total number of rows in all the tables participating
in a match.  This is good news, since the naive interpretation 
would be <m>O(N<sup>2</sup>)</m>.  
This can break down however if the matching
tolerance is such that the number of rows associated with some or most bins
gets large, in which case an <m>O(M<sup>2</sup>)</m> component can come to
dominate, where <m>M</m> is the number of rows per bin.
The average number of rows per bin is reported in the logging while a
match is proceeding, so you can keep an eye on this.
</p>

<p>For more detail on the matching algorithms, see the 
javadocs for the 
<webref url="http://www.starlink.ac.uk/stil/javadocs/uk/ac/starlink/table/join/"
        >uk.ac.starlink.table.join</webref> package,
or contact the author.
</p>

</subsect>

</sect>

<sect id="activation">
<subhead><title>Activation Actions</title></subhead>

<p>As well as seeing the overview of table data provided by a plot
or statistics summary, it is often necessary to focus on a particular row
of the table, which according to the nature of the table may represent
an astronomical object, an event or some other entity.  
In the <ref id="TableViewerWindow">Data Window</ref> a table row is
simply a row of the displayed JTable, and in a plot it corresponds to
one plotted point.
</p>

<p>If you click on a point in a plot, or on a row in the 
Data Window, the corresponding table row will be <em>activated</em>.
When a row is activated, three things happen:
<ol>
<li>If the Plot Window is visible, a marker will be drawn centred on 
    the point</li>
<li>If the Data Window is visible, the table will be scrolled to show the
    row and it will be highlighted</li>
<li>If an <em>activation action</em> has been defined, it will be invoked</li>
</ol>
The first two of these mean that you can easily see which point in a
plot corresponds to which row in the table and vice versa - just click
on one and the other will be highlighted.
</p>

<p>The third one can be more complicated.  By default, no activation
action is set, so nothing else happens, and this may very well be
what you want.  
However, by clicking on the <label>Activation Action</label> selector in the 
<ref id="ControlWindow">Control Window</ref> 
you can bring up the <ref id="ActivationQueryWindow">Activation Window</ref>
which enables you to choose an additional action to take place.
There are various options here and various ways to achieve them
(see <ref id="ActivationQueryWindow"/> for more details)
but the kinds of actions which are envisaged are to display one or
more images or spectra relating to the row you have identified.
One of the options available for instance retrieves a postage-stamp image
of a few arcminutes around the sky position defined by the row
from a SuperCOSMOS all-sky image survey and pops it up in a viewer
window.  So for instance having spotted an interesting point in a 
plot of a galaxy catalogue you can click on it, and immediately see 
a picture to identify its morphological type.
</p>

<p>The exact actions you want to perform may be closely tailored to the 
data you have, for instance you may have a set of spectra on disk
named by object ID.  It's impossible to cater for such possibilities
with a set of pre-packaged options, so you are able to define your own 
custom actions here.  This is done by writing a expression
using the syntax described in <ref id="jel"/>.
A number of special functions (described in <ref id="activationJel"/>) 
are provided to do things like display an image or a spectrum in a browser
(given its filename or URL), or access data from certain data servers 
on the web, but there is nothing to stop the adventurous plugging in their
own external programs so in principle you can configure pretty much 
anything to happen on the basis of the values in the row that you
have activated.
</p>

</sect>

<sect id="jel">
<subhead><title>Algebraic Expression Syntax</title></subhead>

<p>TOPCAT allows you to enter algebraic expressions in three contexts:
<ol>
<li>To define a new column in terms of existing columns in the
    <ref id="SyntheticColumnQueryWindow">Synthetic Column</ref> dialogue</li>
<li>To define a new <ref id="subsets" plaintextref="yes">Row Subset</ref>
    on the basis of table data in the 
    <ref id="SyntheticSubsetQueryWindow">Algebraic Subset</ref> dialogue</li>
<li>To define a custom
    <ref id="activation" plaintextref="yes">Activation Action</ref>
    in the <ref id="ActivationQueryWindow">Activation</ref> dialogue.</li>
</ol>
This is a powerful feature which permits you to manipulate and select
table data in very flexible ways - you can think of it like a 
sort of column-oriented spreadsheet.
The syntax for entering these expressions is explained in this section.
</p>

<p>What you write are actually expressions in
the Java language, which are compiled into Java bytecode before
evaluation.  However, this does not mean that you need to be a
Java programmer to write them.  The syntax is pretty similar to C,
but even if you've never programmed in C most simple things, 
and some complicated ones, are quite intutitive.
</p>

<p>The following explanation gives
some guidance and <ref id="jelExamples">examples</ref>
for writing these expressions.
Unfortunately a complete tutorial on writing Java is beyond
the scope of this document, but it should provide enough information
for even a novice to write useful expressions.
</p>

<p>The expressions that you can write are basically any function
of all the column values and subset inclusion flags which apply
to a given row; the function result can then define 
the per-row value of a new column, 
or the inclusion flag for a new subset,
or the action to be performed when a row is activated by clicking on it.
If the built-in operators and functions are not sufficient,
or it's unwieldy to express your function in one line of code,
you can add new functions by writing your own classes -
see <ref id="jelExtend"/>.
</p>

<p><strong>Note:</strong> if Java is running in an environment with
certain security restrictions (a security manager which
does not permit creation of custom class loaders) then algebraic
expressions won't work at all, and the buttons which allow you to
enter them will be disabled.
</p>

<subsect>
<subhead><title>Referencing Cell Values</title></subhead>

<p>To create a useful expression for a cell in a column, you will
have to refer to other cells in different columns of the same table row.
You can do this in two ways:
<dl>
<dt>By Name</dt>
<dd><p>The Name of the column may be used if it is unique (no other column in
    the table has the same name) and if it has a suitable form.
    This means that it must have the form of a Java variable - basically
    starting with a letter and continuing with
    letters or numbers.  In particular it cannot have any spaces in it.
    The underscore and currency symbols count as
    letters for this purpose.
    Column names are treated case-insensitively.
    </p></dd>

<dt>By &column.id.char;ID</dt>
<dd><p>The "&column.id.char;ID" 
    identifier of the column may always be used to refer to it;
    this is a useful fallback if the column name isn't suitable for
    some reason (for instance it contains spaces or is not unique).
    This is just a "&column.id.char;" sign
    followed by a unique integer assigned by the
    program to each column when it is first encountered.
    You can find out the &column.id.char;ID identifier by looking in the
    <ref id="ColumnInfoWindow">Columns Window</ref>.
    </p></dd>
</dl>
</p>
<p>There is a special column whose name is "Index" and whose ID is 
"&column.id.char;0".
The value of this is the same as the row number in the unsorted table
(the grey numbers on the left of the grid in the 
<ref id="TableViewerWindow">Data Window</ref>).
</p>

<p>The value of the variables so referenced will be a primitive
(boolean, byte, short, char, int, long, float, double) if the
column contains one of the corresponding types.  Otherwise it will
be an Object of the type held by the column, for instance a String.
In practice this means: you can write the name of a column, and it will
evaluate to the numeric (or string) value that that column contains
in each row.  You can then use this in normal algebraic expressions
such as "<code>B_MAG - U_MAG</code>" as you'd expect.
</p>

</subsect>

<subsect>
<subhead><title>Referencing Row Subset Flags</title></subhead>

<p>If you have any <ref id="subsets">Row Subsets</ref> defined
you can also access the value
of the boolean (true/false) flag indicating whether the current row
is in each subset.  Again there are two ways of doing this:
<dl>
<dt>By Name</dt>
<dd><p>The name assigned to the subset when it was created can be used
    if it is unique and if it has a suitable form.  The same comments
    apply as to column names above.
    </p></dd>

<dt>By &subset.id.char;ID</dt>
<dd><p>The "&subset.id.char;ID" identifier of the subset
    may always be used to refer to it.
    Like the "&column.id.char;ID" identifier for columns above,
    this is a unique
    index preceded by a special symbol, this time the underscore, 
    "&subset.id.char;".
    </p>

    <p><strong>Note:</strong> in previous versions of TOPCAT the hash
    sign ("#") was used instead of the underscore for this purpose;
    the hash sign no longer has this meaning.
    </p></dd>
</dl>
In either case, the value will be a boolean value; these can be useful
in conjunction with the conditional "<code>? :</code>" operator or
when combining existing subsets using logical operators to create
a new subset.
</p>
</subsect>

<subsect>
<subhead><title>Null Values</title></subhead>

<p>When no special steps are taken, if a null value (blank cell)
is encountered
in evaluating an expression (usually because one of the columns
it relies on has a null value in the row in question) then the
result of the expression is also null.
</p>

<p>It is possible to exercise more control than this, but it
requires a little bit of care,
because the expressions work in terms of primitive values
(numeric or boolean ones) which don't in general have a defined null
value.  The name "null" in expressions gives you the java <code>null</code>
reference, but this cannot be matched against a primitive value
or used as the return value of a primitive expression.
</p>

<p>For most purposes, the following two tips should enable you to
work with null values:

<dl>
<dt>Testing for null</dt>
<dd><p>To test whether a column contains a null value, prepend the
    string "<code>NULL_</code>"
    (use upper case) to the column name or &column.id.char;ID.  This
    will yield a boolean value which is true if the column contains
    a blank or a floating point NaN (not-a-number) value,
    and false otherwise.
    </p></dd>

<dt>Returning null</dt>
<dd><p>To return a null value from a numeric expression, use the name
    "<code>NULL</code>"
    (upper case).  To return a null value from a non-numeric expression
    (e.g. a String column) use the name "<code>null</code>" (lower case).
    </p></dd>
</dl>
</p>

<p>Null values are often used in conjunction with the conditional
operator, "<code>? :</code>"; the expression
<verbatim>
   test ? tval : fval
</verbatim>
returns the value <code>tval</code> if the boolean expression <code>test</code>
evaluates true, or <code>fval</code> if <code>test</code> evaluates false.
So for instance the following expression:
<verbatim>
   Vmag == -99 ? NULL : Vmag
</verbatim>
can be used to define a new column which has the same value as the Vmag
column for most values, but if Vmag has the "magic" value -99 the new
column will contain a blank.
The opposite trick (substituting a blank value with a magic one) can
be done like this:
<verbatim>
   NULL_Vmag ? -99 : Vmag
</verbatim>
Some more examples are given in <ref id="jelExamples"/>.
</p>

</subsect>

<subsect>
<subhead><title>Operators</title></subhead>

<p>The operators are pretty much the same as in the C language.
The common ones are:
<dl>
<dt>Arithmetic</dt>
<dd><p>
  <dl>
  <dt><code>+</code> (add)</dt>
  <dt><code>-</code> (subtract)</dt>
  <dt><code>*</code> (multiply)</dt>
  <dt><code>/</code> (divide)</dt>
  <dt><code>%</code> (modulus)</dt>
  </dl>
</p></dd>

<dt>Logical</dt>
<dd><p>
  <dl>
  <dt><code>!</code> (not)</dt>
  <dt><code>&amp;&amp;</code> (and)</dt>
  <dt><code>||</code> (or)</dt>
  <dt><code>^</code> (exclusive-or)</dt>
  <dt><code>==</code> (numeric identity)</dt>
  <dt><code>!=</code> (numeric non-identity)</dt>
  <dt><code>&lt;</code> (less than)</dt>
  <dt><code>&gt;</code> (greater than)</dt>
  <dt><code>&lt;=</code> (less than or equal)</dt>
  <dt><code>&gt;=</code> (greater than or equal)</dt>
  </dl>
</p></dd>

<dt>Numeric Typecasts</dt>
<dd><p>
  <dl>
  <dt><code>(byte)</code>   (numeric -> signed byte)</dt>
  <dt><code>(short)</code>  (numeric -> 2-byte integer)</dt>
  <dt><code>(int)</code>    (numeric -> 4-byte integer)</dt>
  <dt><code>(long)</code>   (numeric -> 8-byte integer)</dt>
  <dt><code>(float)</code>  (numeric -> 4-type floating point)</dt>
  <dt><code>(double)</code> (numeric -> 8-byte floating point)</dt>
  </dl>
  Note you may find the numeric conversion functions in the 
  <strong>Maths</strong> class described in <ref id="generalJel"/> below
  more convenient for numeric conversions than these.
</p></dd>

<dt>Other</dt>
<dd><p>
  <dl>
  <dt><code>+</code>  (string concatenation)</dt>
  <dt><code>[]</code> (array dereferencing)</dt>
  <dt><code>?:</code> (conditional switch)</dt>
  <dt><code>instanceof</code> (class membership)</dt>
  </dl>
</p></dd>
</dl>
</p>

</subsect>

<subsect id="staticMethods">
<subhead><title>Functions</title></subhead>

<p>Many functions are available for use within your expressions,
covering standard mathematical and trigonometric functions,
arithmetic utility functions, type conversions, and some more 
specialised astronomical ones, as well as providing actions
to take when a point is activated.
You can use them in just the way you'd expect,
by using the function name 
(unlike column names, this is case-sensitive) followed by 
comma-separated arguments in brackets, so
<verbatim>
    max(IMAG,JMAG)
</verbatim>
will give you the larger of the values in the columns IMAG and JMAG,
and so on.
</p>

<p>The functions available for use by default 
are listed by class in the following subsections,
one for general functions (used in defining new synthetic columns or 
row subsets) and the other for activation functions
(used only for defining <ref id="activation">Activation Actions</ref>).
More detailed documentation of what these functions do, 
the meaning of their parameters examples of use etc
is available from within TOPCAT in the 
<ref id="MethodWindow">Available Functions Window</ref>.
</p>

<subsubsect id="generalJel">
<subhead><title>General Functions</title></subhead>

<p>The following functions can be used anywhere that you can write an
algebraic expression in TOPCAT.  They will typically be used for
defining new synthetic columns or algebraically-defined row subsets.

&general.runtime.method.docs;

</p>

<p>More detail on these functions is available from within TOPCAT in the
<ref id="MethodWindow">Available Functions</ref> window.
</p>

</subsubsect>

<subsubsect id="activationJel">
<subhead><title>Activation Functions</title></subhead>

<p>The following functions can be used only for defining 
<ref plaintextref="yes" id="activation">Activation Actions</ref> - 
they mostly deal with causing something to happen, such
as popping up an image display window.  They generally return a 
short string, which will be logged to the user to give a short
indication of what happened (or didn't happen, or should have happened).

&activation.runtime.method.docs;

</p>

<p>More detail on these functions is available from within TOPCAT in the
<ref id="MethodWindow">Available Functions</ref> window.
</p>

</subsubsect>

<subsubsect>
<subhead><title>Technical Note</title></subhead>

<p>This note provides a bit more detail for Java programmers on what
is going on here; only read on if you want to understand how the use
of functions in TOPCAT algebraic expressions relates to normal Java
code.
</p>

<p>The expressions which you write are compiled to Java bytecode
when you enter them (if there is a 'compilation error' it will be
reported straight away).  The functions listed in the previous subsections
are all the <code>public static</code> methods of the classes which
are made available by default.  The classes listed are all in the
packages <code>uk.ac.starlink.ttools.func</code> and
<code>uk.ac.starlink.topcat.func</code>
(<code>uk.ac.starlink.topcat.func.Strings</code> etc).
However, the public static methods are all imported into an anonymous
namespace for bytecode compilation, so that you write
(<code>sqrt(x,y)</code> and not <code>Maths.sqrt(x,y)</code>.
The same happens to other classes that are imported (which can be
in any package or none) - their public
static methods all go into the anonymous namespace.  Thus, method
name clashes are a possibility.
</p>

<p>This cleverness is all made possible by the rather wonderful
<webref url="http://galaxy.fzu.cz/JEL/" plaintextref="yes">JEL</webref>.
</p>

</subsubsect>

</subsect>

<subsect>
<subhead><title>Instance Methods</title></subhead>

<p>There is another category of functions which can be used apart from
those listed in the <ref id="staticMethods">previous section</ref>.
These are called, in Java/object-oriented parlance, "instance methods"
and represent functions that can be executed on an object.
</p>

<p>It is possible to invoke any of its public 
instance methods on any object 
(though not on primitive values - numeric and boolean ones).
The syntax is that you place a "." followed by the method invocation
after the object you want to invoke the method on, 
hence <code>NAME.substring(3)</code> instead of <code>substring(NAME,3)</code>.
If you know what you're doing, feel free to go ahead and do this.
However, most of the instance methods you're likely to want to use 
have equivalents in the normal functions listed in the previous section,
so unless you're a Java programmer or feeling adventurous, you are
probably best off ignoring this feature.
</p>

</subsect>

<subsect id="jelExamples">
<subhead><title>Examples</title></subhead>

<p>Here are some examples for synthetic columns 
(i.e. expressions which return values to appear in the table):
<dl>

<dt>Average</dt>
<dd><p><verbatim>
    (first + second) * 0.5
</verbatim></p></dd>

<dt>Square root</dt>
<dd><p><verbatim>
    sqrt(variance)
</verbatim></p></dd>

<dt>Angle conversion</dt>
<dd><p><verbatim>
    radiansToDegrees(DEC_radians)
    degreesToRadians(RA_degrees)
</verbatim></p></dd>

<dt>Conversion from string to number</dt>
<dd><p><verbatim>
    parseInt(&column.id.char;12)
    parseDouble(ident)
</verbatim></p></dd>

<dt>Conversion from number to string</dt>
<dd><p><verbatim>
    toString(index)
</verbatim></p></dd>

<dt>Conversion between numeric types</dt>
<dd><p><verbatim>
     toShort(obs_type)
     toDouble(range)
</verbatim><em>or</em><verbatim>
    (short) obs_type
    (double) range
</verbatim></p></dd>

<dt>Conversion from sexagesimal to radians</dt>
<dd><p><verbatim>
    hmsToRadians(RA1950)
    dmsToRadians(decDeg,decMin,decSec)
</verbatim></p></dd>

<dt>Conversion from radians to sexagesimal</dt>
<dd><p><verbatim>
    radiansToDms(&column.id.char;3)
    radiansToHms(RA,2)
</verbatim></p></dd>

<dt>Outlier clipping</dt>
<dd><p><verbatim>
    min(1000, max(value, 0))
</verbatim></p></dd>

<dt>Converting a magic value to null</dt>
<dd><p><verbatim>
    jmag == 9999 ? NULL : jmag
</verbatim></p></dd>

<dt>Converting a null value to a magic one</dt>
<dd><p><verbatim>
    NULL_jmag ? 9999 : jmag
</verbatim></p></dd>

<dt>Taking the third scalar element from an array-valued column</dt>
<dd><p><verbatim>
    psfCounts[2]
</verbatim></p></dd>

</dl>

and here are some examples of boolean expressions that could be used
to define <ref id="subsets">row subsets</ref>
(or to create boolean synthetic columns):

<dl>
<dt>Within a numeric range</dt>
<dd><p><verbatim>
    <![CDATA[RA > 100 && RA < 120 && Dec > 75 && Dec < 85]]>
</verbatim></p></dd>

<dt>Within a circle</dt>
<dd><p><verbatim>
    &column.id.char;2*&column.id.char;2 + &column.id.char;3*&column.id.char;3 &lt; 1
    skyDistance(ra0,dec0,degreesToRadians(RA),degreesToRadians(DEC))&lt;15*ARC_MINUTE
</verbatim></p></dd>

<dt>First 100 rows</dt>
<dd><p><verbatim>
    index &lt;= 100
</verbatim></p></dd>

<dt>Every tenth row</dt>
<dd><p><verbatim>
    index % 10 == 0
</verbatim></p></dd>

<dt>String equality/matching</dt>
<dd><p><verbatim>
    equals(SECTOR, "ZZ9 Plural Z Alpha")
    equalsIgnoreCase(SECTOR, "zz9 plural z alpha")
    startsWith(SECTOR, "ZZ")
    contains(ph_qual, "U")
</verbatim></p></dd>

<dt>String regular expression matching</dt>
<dd><p><verbatim>
    matches(SECTOR, "[XYZ] Alpha")
</verbatim></p></dd>

<dt>Combining subsets</dt>
<dd><p><verbatim>
    (&subset.id.char;1 &amp;&amp; &subset.id.char;2) &amp;&amp; ! &subset.id.char;3
</verbatim></p></dd>

<dt>Test for non-blank value</dt>
<dd><p><verbatim>
    ! NULL_ellipticity
</verbatim></p></dd>
</dl>
</p>

</subsect>

<subsect id="jelExtend">
<subhead><title>Adding User-Defined Functions</title></subhead>

<p>The functions provided by default for use with algebraic expressions,
while powerful, may not provide all the operations you need.
For this reason, it is possible to write your own extensions to the
expression language.  In this way you can specify abritrarily complicated
functions.
Note however that this will only allow you to define new columns or subsets
where each cell is a function only of the other cells in the same
row - it will not allow values in one row to be functions of values
in another.
</p>

<p>In order to do this, you have to write and compile a 
(probably short) program
in the Java language.  A full discussion of how to go about this
is beyond the scope of this document, so if you are new 
to Java and/or programming you may need to find a friendly local 
programmer to assist (or mail the author).
The following explanation is aimed at Java programmers, but may not
be incomprehensible to non-specialists.
</p>

<p>The steps you need to follow are:
<ol>
<li>Write and compile a class containing one or more static public 
    methods representing the function(s) required</li>
<li>Make this class available on the application's classpath at runtime
    as described in <ref id="jvmClasspath"/></li>
<li>Specify the class's name to the application,
    <em>either</em> as the value of the
    <code>jel.classes</code> or <code>jel.classes.activation</code> 
    system properties (colon-separated if there are several) 
    as described in <ref id="jvmProperties"/>
    <em>or</em> during a run using the 
    <ref id="MethodWindow">Available Function Window</ref>'s
    <label>Add Class</label> (&IMG.ADD;) button</li>
</ol>
</p>

<p>Any public static methods defined in the classes thus specified
will be available for use in the 
<ref id="SyntheticColumnQueryWindow">Synthetic Column</ref>, 
<ref id="SyntheticSubsetQueryWindow">Algebraic Subset</ref> or
(in the case of activation functions only)
<ref id="ActivationQueryWindow">Activation Window</ref> windows.
They should be defined to take and return the relevant primitive or
Object types for the function required
(in the case of activation functions the return value should normally
be a short log string).
For instance a class written as follows would define a three-value average:
<verbatim>
    public class AuxFuncs {
        public static double average3( double x, double y, double z ) {
            return ( x + y + z ) / 3.0;
        }
    }
</verbatim>
and the expression 
"<code>average3(&column.id.char;1,&column.id.char;2,&column.id.char;3)</code>"
could then be used to define a new synthetic column, giving the average of
the first three existing columns.
Exactly how you would build this is dependent on your system, 
but it might involve doing something like the following:
<ol>
<li>Writing a file named "AuxFuncs.java" containing the above code</li>
<li>Compiling it using a command like "<code>javac AuxFuncs.java</code>"</li>
<li>Starting up TOPCAT with the flags: 
    "<code>topcat -Djel.classes=AuxFuncs -classpath .</code>"</li>
</ol>
</p>

</subsect>

</sect>

<sect id="invoke">
<subhead><title>Invoking TOPCAT</title></subhead>

<p>Starting up TOPCAT may just be a case of typing "<code>topcat</code>" or
clicking on an appropriate icon and watching the
<ref id="ControlWindow">Control Window</ref> pop up.
If that is the case, and it's running happily for you, 
you can probably ignore this section.
What follows is a description of how to start the program up, 
and various command line arguments and configuration options which can't be 
changed from within the program.
Some examples are given in <ref id="invokeExamples"/>.
Actually obtaining the program is not covered here; please see
the TOPCAT web page 
<webref url="http://www.starlink.ac.uk/topcat/"/>.
</p>

<p>There are various ways of starting up TOPCAT depending on how (and whether)
it has been installed on your system; some of these are described below.
</p>

<p>There may be some sort of short-cut icon on your desktop which
starts up the program - in this case just clicking on it will probably work.
Failing that you may be able to locate the
jar file (probably named <code>topcat.jar</code>, 
<code>topcat-full.jar</code> or <code>topcat-lite.jar</code>)
and click on that.  These files would be located in the
<code>java/lib/topcat/</code> directory in a standard Starjava installation.
Note that when you start by clicking on something
you may not have the option of entering
any of the command line options described below.
</p>

<p>Alternatively you will have to invoke the program from the command line.
If you have the full starjava installation on a Unix-like operating
system, you can use the <code>topcat</code> script, which should
be in the <code>java/bin/</code> directory.  So if that directory is
on your path, you can write:
<verbatim>
   topcat [java-args] [topcat-args]
</verbatim>
In this case any arguments which start <code>-D</code> or <code>-X</code>
are assumed to be arguments to the java command,
a <code>-classpath</code> <var>path</var> defines a class path to
be used in addition to the TOPCAT classes,
and any remaining arguments are used by TOPCAT.
</p>

<p>If you don't have the starjava Unix installation then to start from the
command line you will have to use the <code>java</code> command itself.
The most straightforward way of doing this will look like:
<verbatim>
   java [java-args] -jar path/to/topcat.jar [topcat-args]
</verbatim>
(or the same for <code>topcat-full.jar</code> etc).
However <strong>NOTE</strong>: using java's <code>-jar</code> flag ignores
any other class path information, such as the CLASSPATH environment
variable or java's <code>-classpath</code> flag - see <ref id="jvmClasspath"/>.
</p>

<p>Note that Java
<webref url="http://java.sun.com/products/javawebstart/">Web Start</webref>
can also be used to invoke the program
without requiring any prior download/installation - sorry, this isn't
documented properly here yet.
</p>

<p>The meaning of the optional 
<code>[topcat-args]</code> 
and 
<code>[java-args]</code>
sequences are described in 
<ref id="topcatArgs"/> and 
<ref id="jvmOpt"/> below respectively.
</p>

<subsect id="topcatArgs">
<subhead><title>TOPCAT Command-line Arguments</title></subhead>

<p>You can start TOPCAT from the command line with no arguments -
in this case it will just pop up the command window from which you
can load in tables.  However you may specify flags and/or table locations
and formats.
</p>

<p>If you invoke the program with the "<code>-help</code>" flag you
will see the following usage message:
<verbatim>&topcat.usage;</verbatim>
The meaning of the flags is as follows:
<dl>

<dt>-f &lt;format&gt;</dt>
<dd><p>Signifies that the file(s) named after it on the command line
    are in a particular file format.
    Some file formats (VOTable, FITS) can be detected automatically by
    TOPCAT, but others (including Comma-Separated Values) cannot -
    see <ref id="inFormats"/>.  In this case you have to specify with 
    the <code>-f</code> flag what format the named files are in.
    Any table file on the command line following a 
    <code>-f &lt;format&gt;</code>
    sequence must be in the named format until the next <code>-f</code> flag.
    The names of both the auto-detected formats (ones which don't need
    a <code>-f</code>) and the non-auto-detected formats (ones which do)
    are given in the usage message you can see by giving the 
    <code>-help</code> flag (this message is shown above).
    You may also use the classname of a class on the classpath which
    implements the <code>TableBuilder</code> interface - 
    see <docxref doc="sun252"/>.
    </p></dd>

<dt>-help</dt>
<dd><p>If the <code>-help</code> (or <code>-h</code>) 
    flag is given, TOPCAT will write a short usage
    message and exit straight away.
    </p></dd>

<dt>-version</dt>
<dd><p>If the <code>-version</code> flag is given, TOPCAT will print
    a summary of its version and the versions and availability of some 
    its components, and exit straight away.
    </p></dd>

<dt>-demo</dt>
<dd><p>The <code>-demo</code> flag causes the program to start up with
    a few demonstration tables loaded in.  You can use these to play
    around with its facilities.  Note these demo tables are quite small
    to avoid taking up a lot of space in the installation, and don't 
    contain particularly sensible data, they are just to give an idea.
    </p></dd>

<dt>-disk</dt>
<dd><p>If the <code>-disk</code> flag is given then the program will use
    disk backing storage for caching table data that is read in, rather
    than keeping it in memory.  This means that tables much larger than
    the heap memory assigned to Java can be used.  It may lead to slower
    processing, but usually the performance is not greatly reduced.
    If you find TOPCAT running out of memory (you see 
    <code>OutOfMemoryError</code>s popping up in windows or on the console)
    then re-running with the <code>-disk</code> flag is a good idea.
    The temporary data files are written in the default temporary 
    directory (defined by the <code>java.io.tmpdir</code> system property -
    often <code>/tmp</code> - and deleted when the program exits, unless
    it exits in an unusual way.
    </p>
    <p>There are a couple of additional points to make here: firstly,
    uncompressed FITS binary tables are not read into memory in any case
    (they are <em>mapped</em>) so the <code>-disk</code> flag may not make 
    much difference with FITS.
    Secondly, if you try to load tables which require temporary disk files
    bigger than the total amount of physical memory available, certain 
    actions can result in disk thrashing and become very slow.
    </p></dd>

<dt>-verbose</dt>
<dd><p>The <code>-verbose</code> (or <code>-v</code>) flag increases 
    the level of verbosity of messages which TOPCAT writes to standard
    output (the console).
    It may be repeated to increase the verbosity further.
    The messages it controls are currently those written through
    java's standard logging system - see the description of the 
    <ref id="LogWindow" plaintextref="yes">Log Window</ref> for more
    information about this.
    </p></dd>

<dt>-noserv</dt>
<dd><p>By default, if the relevant classes are available, TOPCAT 
    starts up an AXIS server which can accept 
    requests using the SOAP protocol to display tables from other
    applications.  Specifying the <code>-noserv</code> flag prevents
    the server being started.
    </p></dd>

</dl>
</p>

<p>Some of the flags control what load dialogues are visible in the
<ref id="LoadQueryWindow">Load Window</ref>.  In fact all of these 
load dialogues can be accessed from the Load Window's
<label>DataSources</label> menu as long as the classes are available, 
but if you specify these flags on the command line, 
the corresponding button will appear in the main part
of the window, making the option more obvious.
The load dialogue flags are:
<dl>

<dt>-tree</dt>
<dd><p>Hierarchy browser (<ref id="TreeTableLoadDialog"/>),
    used for content-sensitive browsing of the filespace
    (not available with topcat-lite).</p></dd>

<dt>-file</dt>
<dd><p>Basic file browser.  This doesn't do much that the 
    <ref id="FilestoreTableLoadDialog">Filestore Browser</ref>
    (which is present by default, and can also access remote filespaces)
    can't do, but is provided as a fallback.
    </p></dd>

<dt>-sql</dt>
<dd><p>SQL query (<ref id="SQLReadDialog"/>),
    used for obtaining tables
    from an SQL query on a rleational database
    (only available if <ref id="jdbcConfig">JDBC</ref> 
    is set up correctly).</p></dd>

<dt>-cone</dt>
<dd><p>Cone search dialogue (<ref id="ConeSearchDialog"/>),
    used for obtaining catalogues of sources in a region of the sky
    from remote data servers (not available with topcat-lite).</p></dd>

<dt>-registry</dt>
<dd><p>Registry query dialogue <em>(experimental)</em>,
    used for obtaining the results of a query on a VO resource registry
    as a table (not available with topcat-lite).</p></dd>

<dt>-siap</dt>
<dd><p>Simple Image Access Protocol dialogue <em>(experimental)</em>,
    used for obtaining the results of SIAP queries on remote data 
    servers (not available with topcat-lite).</p></dd>

</dl>
These flags in most circumstances do just the same as adding the
relevant dialogue class name to the <code>startable.load.dialogs</code>
system property (see <ref id="jvmProperties"/>).
</p>

<p>Other arguments on the command line are taken to be the locations
of tables.  Any tables so specified will be loaded into TOPCAT at startup.
These locations are typically filenames, but could also
be URLs or SQL queries, or perhaps something else.  In addition
they may contain "fragment identifiers" (with a "#") to locate a table within
a given resource, so that for instance the location
<verbatim>
   /my/data/cat1.fits#2
</verbatim>
means the second extension in the multi-extension FITS file
<code>/my/data/cat1.fits</code>.
</p>

<p>Note that options to Java itself may also be specified on the command-line,
as described in <ref id="jvmOpt">the next section</ref>.
</p>

</subsect>

<subsect id="jvmOpt">
<subhead><title>Java Options</title></subhead>

<p>As described above, depending on how you
invoke TOPCAT you may be able to specify arguments to Java itself
(the "Java Virtual Machine") which affect how it runs.
These may be defined on the command line or in some other way.
The following subsections describe how to control Java in ways 
which may be relevant to TOPCAT;
they are however somewhat dependent on
the environment you are running in, so you may experience 
OS-dependent variations.
</p>

<subsubsect id="jvmClasspath">
<subhead><title>Class Path</title></subhead>

<p>The classpath is the list of places that Java looks to find 
the bits of compiled code that it uses to run an application.
When running TOPCAT this always has to include the TOPCAT classes
themselves - this is part of the usual invocation 
and is described in <ref id="invoke"/>.  
However, for certain things Java might need to find some other classes, 
in particular for:
<ul>
<li>JDBC drivers (see <ref id="jdbcConfig"/>)</li>
<li>Providing extended algebraic functions (see <ref id="jelExtend"/>)</li>
<li>Launching Mirage (see <ref id="mirage"/>)</li>
<li>Installing I/O handlers for new table formats
    (see <ref id="customHandlers"/>)</li>
</ul>
</p>

<p>If you are going to use these facilities you will need to start the
program with additional class path elements that point to the location
of the classes required.  How you do this depends on how you 
are invoking TOPCAT.
If you are using tht <code>topcat</code> startup script, you can write:
<verbatim>
    topcat -classpath <var>other-paths</var> ...
</verbatim>
(this adds the given paths to the standard ones required for TOPCAT itself).
If you are invoking java directly, then you can either write on the
command line:
<verbatim>
    java -classpath path/to/topcat.jar:<var>other-paths</var>
         uk.ac.starlink.topcat.Driver ...
</verbatim>
or set the CLASSPATH environment variable something like this:
<verbatim>
    setenv CLASSPATH path/to/topcat.jar:<var>other-paths</var>
</verbatim>
In any case, multiple (extra) paths should be separated by colons
in the <var>other-paths</var> string.
</p>

<p>Note that if you are running TOPCAT using java's <code>-jar</code>
flag, any attempt you make to specify the classpath will be ignored!
This is to do with Java's security model.
If you need to specify a classpath which includes more than the
TOPCAT classes themselves, you can't use <code>java -jar</code>.
</p>

</subsubsect>

<subsubsect id="jvmMemory">
<subhead><title>Memory Size</title></subhead>

<p>If TOPCAT fails during operation with a message that says something
about a <code>java.lang.OutOfMemoryError</code>, then your heap
size is too small for what you are trying to do.  You will have to
run java with a bigger heap size using the <code>-Xmx</code> flag.
Invoking TOPCAT from the <code>topcat</code> script you would write
something like:
<verbatim>
    topcat -Xmx256M ...
</verbatim>
or using java directly:
<verbatim>
    java -Xmx256M ...
</verbatim>
which means use up to 256 megabytes of memory (don't forget the "M"
for megabyte).  JVMs typically default to a heap size of 64M.
You probably don't want to specify a heap size larger than the
physical memory of the machine that you are running on.
</p>

<p>There are other types of memory and tuning options controlled 
using options of the form <code>-X&lt;something-or-other&gt;</code>;
if you're feeling adventurous you may be able to find out about these
by typing "<code>java -X</code>".
</p>

<p><strong>Note</strong> however: using the <code>-disk</code> flag
described in <ref id="topcatArgs"/> may be a better solution; this
makes the program store data from large tables on disk rather than in memory.
</p>

</subsubsect>

<subsubsect id="jvmProperties">
<subhead><title>System properties</title></subhead>

<p>System properties are a way of getting information into Java
(they are the Java equivalent of environment variables).
The following ones have special significance within TOPCAT:
<dl>

<dt><code>java.io.tmpdir</code></dt>
<dd><p>The directory in which TOPCAT will write any temporary files it needs.
    This is usually only done if the <code>-disk</code> flag has been
    specified (see <ref id="topcatArgs"/>).
    </p></dd>

<dt><code>jdbc.drivers</code></dt>
<dd><p>Can be set to a (colon-separated) list of JDBC driver classes 
    using which SQL databases can be accessed
    (see <ref id="jdbcConfig"/>).
    </p></dd>

<dt><code>jel.classes</code></dt>
<dd><p>Can be set to a (colon-separated) list of classes containing 
    static methods which define user-provided
    functions for synthetic columns or subsets.
    (see <ref id="jelExtend"/>).
    </p></dd>

<dt><code>jel.classes.activation</code></dt>
<dd><p>Can be set to a (colon-separated) list of classes containing 
    static methods which define user-provided
    functions for use in custom activation expressions.
    (see <ref id="jelExtend"/>).
    </p></dd>

<dt><code>star.connectors</code></dt>
<dd><p>Can be set to a (colon-separated) list of classes which provide
    access to remote filespace implementations.
    Thus-named classes should implement the
    <code>uk.ac.starlink.connect.Connector</code> interface which 
    specifies how you can log on to such a service and provides a
    hierarchical view of the filespace it contains.
    </p></dd>

<dt><code>startable.load.dialogs</code></dt>
<dd><p>Can be set to a (colon-separated) list of custom table load dialogue
    classes.  Briefly, you can install your own table import dialogues at
    runtime by providing classes which implement the 
    <code>uk.ac.starlink.table.gui.TableLoadDialog</code> interface and
    naming them in this property.  
    See <webref url="http://www.starlink.ac.uk/stil/">STIL</webref> 
    documentation for more detail.
    </p></dd>

<dt><code>startable.readers</code></dt>
<dd><p>Can be set to a (colon-separated) list of custom table format input
    handler classes (see <ref id="customHandlers"/>).
    </p></dd>

<dt><code>startable.storage</code></dt>
<dd><p>Can be set to determine the default storage policy.
    Setting it to "<code>disk</code>" has basically the same effect as
    supplying the "<code>-disk</code>" argument on the TOPCAT command line
    (see <ref id="topcatArgs"/>).
    </p></dd>

<dt><code>startable.writers</code></dt>
<dd><p>Can be set to a (colon-separated) list of custom table format output
    handler classes (see <ref id="customHandlers"/>).
    </p></dd>

<dt><code>votable.strict</code></dt>
<dd><p>Set <code>true</code> for strict enforcement of the VOTable standard
    when parsing VOTables.  This prevents the parser from working round
    certain common errors, such as missing <code>arraysize</code>
    attributes on FIELD/PARAM elements with <code>datatype="char"</code>.
    False by default.
    </p></dd>

<dt><code>apple.laf.useScreenMenuBar</code></dt>
<dd><p>On the Apple Macintosh platform only, this property controls whether
    menus appear at the top of the screen as usual for Mac, or at the
    top of individual windows as usual for Java.  By default it is
    set to <code>true</code> for TOPCAT, so menus mostly appear at the top
    of the screen (though it's not true to say that TOPCAT obeys the
    Mac look and feel completely); if you prefer the more Java-like
    look and feel, set it to <code>false</code>.
    </p></dd>

</dl>
</p>

<p>To define these properties on the command line
you use the <code>-D</code> flag, which has the form
<verbatim>
    -D&lt;property-name&gt;=&lt;value&gt;
</verbatim>
If you're using the TOPCAT startup script, you can write something like:
<verbatim>
    topcat -Djdbc.drivers=org.postgresql.Driver ...
</verbatim>
or if you're using the <code>java</code> command directly:
<verbatim>
    java -Djdbc.drivers=org.postgresql.Driver ...
</verbatim>
</p>

<p>Alternatively you may find it more convenient to 
write these definitions in a file named
<code>.starjava.properties</code> in your home directory; the above
command-line flag would be equivalent to inserting the line:
<verbatim>
    jdbc.drivers=org.postgresql.Driver
</verbatim>
in your <code>.starjava.properties</code> file.
</p>

</subsubsect>

</subsect>

<subsect id="jdbcConfig">
<subhead><title>JDBC Configuration</title></subhead>

<p>This section describes additional configuration which must be
done to allow TOPCAT to access SQL-compatible relational databases
for reading (see <ref id="inSql"/>) or
writing (see <ref id="outSql"/>) tables.
If you don't need to talk to SQL-type databases, 
you can ignore the rest of this section.
The steps described here are the standard ones
for configuring JDBC (which sort-of stands for Java Database Connectivity),
described in more detail on 
<webref url="&URL.J2SE_DOCS;guide/jdbc/">Sun's JDBC web page</webref>.
</p>

<p>To use TOPCAT with SQL-compatible databases you must:
<ul>
<li>Have access to an SQL-compatible database locally or over the network</li>
<li>Have a JDBC driver appropriate for that database</li>
<li>Install this driver for use with TOPCAT</li>
<li>Know the format the driver uses for URLs to access database tables</li>
<li>Have appropriate privileges on the database to perform the
    desired operations</li>
</ul>
Installing the driver consists of two steps:
<ol>
<li>Set the <code>jdbc.drivers</code> system property to the name of the
    driver class as described in <ref id="jvmProperties"/></li>
<li>Ensure that the classpath you are using includes this driver class
    as described in <ref id="jvmClasspath"/></li>
</ol>
</p>

<p>These steps are all standard for use of the
<webref url="&URL.J2SE_DOCS;guide/jdbc/">JDBC</webref>
system.
</p>

<p>To the author's knowledge, TOPCAT has so far successfully been used
with the following RDBMSs and corresponding JDBC drivers:
<dl>

<dt><webref url="http://www.mysql.com/">MySQL</webref></dt>
<dd><p>MySQL 3.23.55 on Linux has been tested with the
    <webref url="http://www.mysql.com/products/connector/j/"
            >Connector/J</webref>
    driver version 3.0.8 and seems to work, though tables with very many 
    (hundreds of) columns cannot be written owing to SQL statement 
    length restrictions.
    Note there is known to be a column metadata bug in version 3.0.6 of the
    driver which can cause a ClassCastException error when tables are written.
    </p></dd>

<dt><webref url="http://www.postgresql.org/">PostgreSQL</webref></dt>
<dd><p>PostgreSQL 7.4.1 apparently works with 
    <webref url="http://jdbc.postgresql.org/">its own driver</webref>.
    Note the performance of this driver appears to be rather poor,
    at least for writing tables.
    </p></dd>
</dl>
Other RDBMSs and drivers may or may not work - please let us know the
results of any experiments you carry out.
Sun maintain a list of JDBC drivers for various databases; it can be found at
<webref url="http://servlet.java.sun.com/products/jdbc/drivers"/>.
</p>

<p>Here are a couple of command lines to start up TOPCAT using 
databases known to work.
<dl>
<dt>PostgreSQL</dt>
<dd><p><verbatim>
   java -classpath topcat-full.jar:pg73jdbc3.jar \
        -Djdbc.drivers=org.postgresql.Driver \
        uk.ac.starlink.topcat.Driver
</verbatim></p></dd>
<dt>MySQL</dt>
<dd><p><verbatim>
   java -classpath topcat-full.jar:mysql-connector-java-3.0.8-bin.jar \
        -Djdbc.drivers=com.mysql.jdbc.Driver \
        uk.ac.starlink.topcat.Driver
</verbatim></p></dd>
</dl>
</p>

</subsect>

<subsect id="invokeExamples">
<subhead><title>Examples</title></subhead>

<p>Here are some examples of invoking TOPCAT from the command line.
In each case two forms are shown: one using the <code>topcat</code>
script, and one using the jar file directly.  In the latter case,
the <code>java</code> command is assumed to be on the your path, and
the jar file itself, assumed in directory <code>my/tcdir</code>, 
might be named <code>topcat.jar</code>, 
<code>topcat-full.jar</code>, or something else, but the form 
of the command is the same.

<dl>

<dt>No arguments</dt>
<dd><p><verbatim>
    topcat
    java -jar topcat.jar
</verbatim></p></dd>

<dt>Output usage message</dt>
<dd><p><verbatim>
    topcat -h
    java -jar topcat.jar -h
</verbatim></p></dd>

<dt>Load a FITS file</dt>
<dd><p><verbatim>
    topcat testcat.fits
    java -jar my/tcdir/topcat.jar testcat.fits
</verbatim></p></dd>

<dt>Loading files of various formats</dt>
<dd><p><verbatim>
    topcat t1.fits -f ascii t2.txt t3.txt -f votable t4.xml
    java -jar my/tcdir/topcat.jar t1.fits -f ascii t2.txt t3.txt -f votable t4.xml
</verbatim></p></dd>

<dt>Use disk storage format and boosted heap memory</dt>
<dd><p><verbatim>
    topcat -Xmx256M -disk 
    java -Xmx256M -jar my/tcdir/topcat.jar -disk
</verbatim></p></dd>

<dt>Make custom functions available</dt>
<dd><p><verbatim>
    topcat -classpath my/funcdir/funcs.jar -Djel.classes=my.ExtraFuncs t1.fits
    java -classpath my/tcdir/topcat.jar:my/funcdir/funcs.jar \
         -Djel.classes=func.ExtraFuncs \
         uk.ac.starlink.topcat.Driver t1.fits
</verbatim></p></dd>

<dt>Make PostgreSQL database connectivity available</dt>
<dd><p><verbatim>
    topcat -classpath my/jdbcdir/pg73jdbc3.jar -Djdbc.drivers=org.postgresql.Driver
    java -classpath my/tcdir/topcat.jar:my/jdbcdir/pg73jdbc3.jar \
         -Djdbc.drivers=org.postgresql.Driver uk.ac.starlink.topcat.Driver
</verbatim></p></dd>

<dt>Use custom I/O handlers</dt>
<dd><p><verbatim>
    topcat -classpath my/driverdir/drivers.jar \
           -Dstartable.readers=my.MyTableBuilder \
           -Dstartable.writers=my.MyTableWriter \
    java -classpath my/tcdir/topcat.jar:my/driverdir/drivers.jar \
         -Dstartable.readers=my.MyTableBuilder \
         -Dstartable.writers=my.MyTableWriter \
         uk.ac.starlink.topcat.Driver
</verbatim></p></dd>

</dl>
The <code>-Dx=y</code> definitions can be avoided by putting equivalent
<code>x=y</code> lines into the <code>.starjava.properties</code> in your
home directory.
</p>


</subsect>

</sect>

<appendices>

<sect id="windows">
<subhead><title>TOPCAT Windows</title></subhead>

<p>This appendix gives a tour of all the windows that form the
TOPCAT application, explaining the anatomy of the windows and
the various tools, menus and other controls.
Attributes common to many or all windows are described in
<ref id="commonFeatures"/>, and the subsequent sections describe
each of the windows individually.
</p>

<p>When the application is running, the <label>Help For Window</label>
(&IMG.HELP;) toolbar button will display the appropriate description 
for the window on which it is invoked.
</p>


<subsect id="commonFeatures">
<subhead><title>Common Window Features</title></subhead>

<p>This section describes some features which are common to many or
all of the windows used in the TOPCAT program.
</p>

<subsubsect>
<subhead><title>Toolbar</title></subhead> 

<p>Each window has a toolbar at the top containing various buttons
representing actions that can be invoked from the window.
Most of them contain the following buttons:
<dl>

<dt>&IMG.CONTROL; Control Window</dt>
<dd><p>Ensures that the Control Window is visible on the screen,
    deiconifying and raising it if necessary.  This can be useful if
    you 'lose' the window behind a proliferation of other ones.
    </p></dd>

<dt>&IMG.CLOSE; Close</dt> 
<dd><p>Closes the window.  This convenience button 
    has the same effect as closing the window
    in whatever way your graphics platform normally allows.
    In most cases, closing the window does not lose state associated with
    it (such as fields filled in); if you recover the window later it
    will look the same as when you closed it.
    </p></dd>

<dt>&IMG.HELP; Help</dt>
<dd><p>Pops up a <ref id="HelpWindow">Help browser</ref> window, or makes
    sure it is visible if it has already been opened.
    The window will display help information relevant to the window in
    which you pushed this button.
    </p></dd> 

</dl>
</p>

<p>Buttons in the toolbar often appear in menus of the same window as well;
you can identify them because they have the same icon.
This is a convenience; invoking the action from the toolbar or from
the menu will have the same effect.
</p>

<p>Often an action will only be possible in certain circumstances, 
for instance if some rows in the associated <ref id="JTable">JTable</ref> 
have been selected.
If the action is not possible (i.e. it would make no sense to invoke it)
then the button in the toolbar and the menu option will be greyed out,
indicating that it cannot be invoked in the current state.
</p>

</subsubsect>

<subsubsect id="commonMenus">
<subhead><title>Menus</title></subhead>

<p>Most windows have a menu bar at the top containing one or more menus.
These menus will usually provide the actions available from the 
toolbar (identifiable because they have the same icons), and
may provide some other less-commonly-required actions too.
</p>

<p>Here are some of the menus common to several windows:
<dl>

<dt>File menu</dt>
<dd><p>Nearly all windows have this menu.
    At least the following options are available:
    <dl>

    <dt>&IMG.CLOSE; Close</dt>
    <dd><p>Closes the window.  This convenience button 
        has the same effect as closing the window
        in whatever way your graphics platform normally allows.
        In most cases, closing the window does not lose state associated with
        it (such as fields filled in); if you recover the window later it
        will look the same as when you closed it.
        </p></dd>

    <dt>&IMG.EXIT; Exit</dt>
    <dd><p>Exits TOPCAT.  You will be prompted to confirm this action
        if tables are loaded, since it might result in loss of data.
        </p></dd>

    </dl>
    </p></dd>

<dt>Help menu</dt>
<dd><p>Nearly all windows have this menu.
    The following options are available:
    <dl>

    <dt>Help</dt>
    <dd><p>Pops up the <ref id="HelpWindow">Help Window</ref>.
        </p></dd>

    <dt>&IMG.HELP; Help For Window</dt>
    <dd><p>Pops up the <ref id="HelpWindow">Help Window</ref>;
        the window will display help information relevant to the window in
        which the menu appears.
        </p></dd>

    <dt>About TOPCAT</dt>
    <dd><p>Pops up a little window giving information on the version and
        authorship of the program.
        It also reports on availability of some optional components.
        </p></dd>

    </dl>
    </p></dd>

<dt>Display menu</dt>
<dd><p>This menu is available for most windows which display their data
    using a <ref id="JTable">JTable</ref> component.
    If present, it contains a list of the columns in the JTable with 
    tickboxes next to them - clicking on a column name in this menu
    toggles whether the column is visible in the window.
    </p></dd>

</dl>
</p>

</subsubsect>

<subsubsect id="JTable">
<subhead><title>JTables</title></subhead>

<figure>
<caption><px>An example JTable</px></caption>
<figureimage src="&FIG.JTable;"/>
</figure>

<p>Many of the windows, including the 
<ref id="TableViewerWindow">Data Window</ref>,
display their data in a Java widget called a <label>JTable</label>.
This displays a grid of values, with headings for each column, in
a window which you can scroll around.  Although JTables are used for
a number of different things (for instance, showing the table data themselves
in the <ref id="TableViewerWindow">Data Window</ref>
and showing the column metadata in the 
<ref id="ColumnInfoWindow">Columns Window</ref>), 
the fact that the same widget is
used provides a common look and feel.
</p>

<p>Here are some of the things you can do with a JTable:
<dl>
<dt>Scroll around</dt>
<dd><p>Using the scrollbars which may appear to the right and below the
    table you can scroll around it to see parts which are not initially
    visible.  
    You can grab the sliders and drag them around by holding the mouse
    button down while you move it, or click in the slider "trough" one side
    or other of the current slider position to move a screenful.
    Under some circumstances the cursor arrow keys and PageUp/PageDown
    keys may move the table too.
    If the JTable is small enough to fit within the window the scrollbars
    may not appear.
    </p></dd>

<dt>Move columns</dt>
<dd><p>By clicking on the header (grey title bit at the top) of a column
    and dragging it left or right, you can change the order of columns
    as displayed.  In some cases 
    (the <ref id="TableViewerWindow">Data Window</ref>)
    this actually has the effect of changing the order of the columns
    in the table; in other cases it is just cosmetic.
    </p></dd>

<dt>Resize columns</dt>
<dd><p>By dragging on the line between row headers you can change the width
    of the columns in the table.
    </p></dd>

<dt>Edit cells</dt>
<dd><p>In some cases, cells are editable.  If they are, then double-clicking
    in the cell will begin an edit session for that cell, and pressing
    Return will confirm that the edit has been made.
    </p></dd>

<dt>Select rows</dt>
<dd><p>Sometimes rows can be highlighted; you can select one row by clicking
    on it or a number of contiguous rows by clicking and dragging from the
    first to the last.
    To add further rows to a set already selected without deselecting
    the first lot, hold the "Control" key down while you do it.
    </p></dd>
</dl>
</p>

<p>In some cases where a JTable is displayed, there will be a menu
on the menu bar named <label>Display</label>.
This permits you to select which columns are visible and which are hidden.
Clicking on the menu will give you a list of all the available columns
in the table, each with a checkbox by it; click the box to toggle
whether the column is displayed or not.
</p>

</subsubsect>

</subsect>

<subsect id="ControlWindow">
<subhead><title>Control Window</title></subhead>

<figure>
<caption><px>The Control Window</px></caption>
<figureimage src="&FIG.ControlWindow;"/>
</figure>

<p>The Control Window is the main window from which all of TOPCAT's
activities are controlled.  It lists the known tables, summarises
their characteristics, and allows you to open other windows for
more specialised tasks.
When TOPCAT starts up you will see this window - it may or may not have
some tables loaded into it according to how you invoked the program.
</p>

<p>The window consists of two main parts:
the <label>Table List</label> panel on the left, and
the <label>Current Table Properties</label> panel on the right.
Tables loaded into TOPCAT are shown in the Table List,
each identified by an index number which never changes for a given table,
and a label which is initially set from its location, but can be changed
for convenience.
</p>

<p>One of the tables in the list is highlighted, 
which means it is the currently selected table;
you can change the selection by clicking on an item in the list.
Information about the selected table is shown
in the properties panel on the right.  This shows such things as the
number of rows and columns, current sort order, current row subset
selection and so on.  It contains some controls which allow you to
change these properties.
Additionally, many of the buttons in the toolbar relate to the
currently selected table.
</p>

<p>The Table List, Current Table Properties panel, and
actions available from the Control Window's toolbar and menus 
are described in the following subsections.
</p>

<subsubsect>
<subhead><title>Table List</title></subhead>

<p>The Table List panel on the left of the Control Window is 
pretty straightforward - it lists all the tables currently known
to TOPCAT.  If a new table is introduced by loading it from the 
<ref id="LoadQueryWindow">Load Window</ref> or as a result of 
some action such as <ref id="join">table joining</ref> then its
name and number will appear in this list.
The currently selected table is highlighted - clicking on a different
table name (or using the arrow keys if the list has keyboard focus) 
will change the selection.  The properties of the
selected table are displayed in the Current Table Properties panel
to its right, and a number of the toolbar buttons and menu items
refer to it.
</p>

<p>If you double-click on a table in the list, or press Return
while it is selected, that table's 
<ref id="TableViewerWindow">Data Window</ref> will appear.
</p>

<p>Certain other applications
(<webref url="http://www.starlink.ac.uk/treeview/">Treeview</webref>,
 <webref url="http://www.starlink.ac.uk/frog/">FROG</webref>,
 or even another instance of TOPCAT)
can interoperate with TOPCAT using drag-and-drop, and for these the
table list is a good place to drag/drop tables.
For instance you can drag a table node off of the main panel of 
Treeview and drop it onto the table list of TOPCAT, and you will
be able to use that table as if it had been loaded from disk.
You can also paste the filename or URL of a table onto the table list,
and it will be loaded.
</p>

</subsubsect>

<subsubsect>
<subhead><title>Current Table Properties panel</title></subhead>

<p>The <label>Current Table Properties</label> panel on the right hand
side of the Control Window contains a number of
controls which relate to the currently selected table and its 
<ref id="apparent" plaintextref="yes">Apparent properties</ref>;
they will be blank if no table is selected.
Here is what the individual items mean:
<dl>
<dt>Label</dt>
<dd><p>The short name associated with the selected table.
    It is used in the
    Table List panel and in labelling view windows so you can see which
    table they refer to.  It usually set initially according to where
    the table came from, but you can change it by typing into the text field.
    </p></dd>

<dt>Location</dt>
<dd><p>The original source of the selected table.
    This is typically a filename or URL (perhaps abbreviated), 
    but may be something else depending
    on where the table came from.
    </p></dd>

<dt>Name</dt>
<dd><p>A name associated with the selected table.
    This may be derived from the table's filename if it had one or from
    some naming string stored within the table metadata.
    </p></dd>

<dt>Rows</dt>
<dd><p>The number of rows in the selected table.
    If the current <ref id="subsets">Row Subset</ref> does not include all the
    rows, then an indication of how many are visible within that subset
    will be given too.
    </p></dd>

<dt>Columns</dt>
<dd><p>The number of columns in the selected table.
    If some are currently hidden 
    (not included in the current <ref id="columns">Column Set</ref>),
    an indication of how many are visible will be given too.
    </p></dd>

<dt>Sort Order</dt>
<dd><p>The column (if any) which determines the current
    <ref id="order">Row Order</ref>.
    A selector shows the column (if any) on which the rows of the 
    Apparent Table are sorted
    and allows you to choose a different one.  
    The little arrow beside it
    indicates whether the sort is ascending or descending.
    </p></dd>

<dt>Row Subset</dt>
<dd><p>The name of the current <ref id="subsets">Row Subset</ref>.
    A selector shows the name of the subset which determines which 
    rows are part of the Apparent Table
    and allows you to choose another one.  "All" indicates that all
    rows are included.
    </p></dd>

<dt>Activation Action</dt>
<dd><p>The currently selected
    <ref plaintextref="yes" id="activation">Activation Action</ref>.
    The action can be changed by clicking on this button to display
    the <ref id="ActivationQueryWindow">Activation Window</ref>.
    </p></dd>

</dl>
</p>

</subsubsect>


<subsubsect id="controlTools">
<subhead><title>Toolbar Buttons</title></subhead>

<p>The following buttons deal with table import and export:
<dl>

<dt>&IMG.LOAD; Load Table</dt>
<dd><p>Pops up the <ref id="LoadQueryWindow">Load Table</ref> dialogue
    which allows you to load a table into TOPCAT.
    If a table is loaded it becomes the new current table.
    </p></dd>

<dt>&IMG.SAVE; Save Table</dt>
<dd><p>Pops up the <ref id="SaveQueryWindow">Save Table</ref> dialogue
    which allows you to write out the current 
    <ref id="apparent">Apparent Table</ref>.
    </p></dd>

<dt>&IMG.COPY; Duplicate Table</dt>
<dd><p>Adds a new copy of the current <ref id="apparent">Apparent Table</ref>
    to the list of known tables.  This is like loading in the current table
    again, except that its apparent characteristics 
    become the basic characteristics of the copied one, so for instance
    whatever is the current row order becomes the natural order of the 
    new one.
    </p></dd>

</dl>
</p>

<p>The following buttons display various views of the current table;
these views are described in more details in <ref id="views"/>.
<dl>

<dt>&IMG.VIEWER; <ref id="TableViewerWindow">Data Window</ref></dt>
<dd><p>Displays the table rows and columns in a scrollable viewer so you
    can see the cell contents themselves.
    </p></dd>

<dt>&IMG.PARAMS; <ref id="ParameterWindow">Parameters Window</ref></dt>
<dd><p>Displays table "parameters", that is metadata which applies to the
    whole table.
    </p></dd>

<dt>&IMG.COLUMNS; <ref id="ColumnInfoWindow">Columns Window</ref></dt>
<dd><p>Displays metadata about each column such as data type, units,
    description, UCDs etc.
    </p></dd>

<dt>&IMG.SUBSETS; <ref id="SubsetWindow">Subsets Window</ref></dt>
<dd><p>Displays the currently defined 
    <ref id="subsets" plaintextref="yes">row subsets</ref>
    and enables new ones to be defined.
    </p></dd>

<dt>&IMG.STATS; <ref id="StatsWindow">Statistics Window</ref></dt>
<dd><p>Displays a window for calculating 
    statistical quantities for the values in each
    column of the table.
    </p></dd>

<dt>&IMG.PLOT; <ref id="PlotWindow">Plot window</ref></dt>
<dd><p>Permits plotting of columns against each other.
    </p></dd>

</dl>
</p>

<p>The following buttons deal with matching and joining tables
(see <ref id="join"/> for discussion of these functions):
<dl>

<dt>&IMG.CONCAT; <ref id="ConcatWindow">Concatenation Window</ref></dt>
<dd><p>Displays a dialog for joining tables top-to-bottom.
    </p></dd>

<dt>&IMG.MATCH1; <ref id="MatchWindow1">Internal Match Window</ref></dt>
<dd><p>Displays a dialog for finding internal matches between the rows
    of a table.
    </p></dd>

<dt>&IMG.MATCH2; <ref id="MatchWindow">Pair Match Window</ref></dt>
<dd><p>Displays a dialog for joining tables side-by-side by locating
    rows which match between them.
    </p></dd>

</dl>
</p>

<p>The following buttons are miscellaneous:
<dl>

<dt>&IMG.FUNCTION; <ref id="MethodWindow">Available Functions Window</ref></dt>
<dd><p>Displays a window containing all the functions which can be used 
    for writing algebraic expressions (see <ref id="jel"/>).
    </p></dd>

</dl>
</p>

</subsubsect>

<subsubsect id="controlMenus">
<subhead><title>Menu Items</title></subhead>

<p>This section describes actions available from the Control Window
menus additional to those also available from the toolbar
(described in <ref id="controlTools">the previous section</ref>) 
and those common to other windows (described in <ref id="commonMenus"/>).
</p>

<p>The <label>File</label> menu contains the following additional actions:
<dl>

<dt>&IMG.DELETE; Discard Table</dt>
<dd><p>Removes the current table from the list and closes and forgets any 
    view windows associated with it.  A discarded table cannot be reinstated.
    You will be prompted to confirm this action.
    Discarding a table in this way <em>may</em> free up memory, for other 
    operations, but often will not; 
    whether it does or not depends on the details of
    where the table comes from.
    </p></dd>

<dt>Export To Mirage</dt>
<dd><p>Starts up the external Mirage application on the current apparent table.
    This action is only available if Mirage is on your classpath.
    See <ref id="mirage"/>.
    </p></dd>

<dt>&IMG.LOG; View Log</dt>
<dd><p>Pops up the <ref id="LogWindow">Log Window</ref> to display 
    logging messages generated by the application.
    Intended mainly for debugging.
    </p></dd>

</dl>
</p>

<p>The <label>Windows</label> menu contains actions for controlling which
<ref id="views" plaintextref="yes">table view windows</ref>
are currently visible on the screen.
If you have lots of tables and are using various different views of 
several of them, the number of windows on the screen can get out of
hand and it's easy to lose track of what window is where.
The actions on this menu do some combination of 
either hiding or revealing all the various view windows associated
with either the selected table or all the other ones.
Windows hidden are removed from the screen but if reactivated
(e.g. by using the appropriate toolbar button) will come back in the same
place and the same state.  Revealing all the windows associated with
a given table means showing all the view windows which have been opened
before (it won't display windows which have never explicitly been opened).
<dl>

<dt>Show Selected Views Only</dt>
<dd><p>Reveal all view windows associated with the currently selected 
    table and hide all others.
    </p></dd>

<dt>Show Selected Views</dt>
<dd><p>Reveal all view windows which are associated with the currently
    selected table.
    </p></dd>

<dt>Show All Views</dt>
<dd><p>Reveal all view windows associated with all tables.
    </p></dd>

<dt>Hide Unselected Views</dt>
<dd><p>Hide all view windows associated with tables other than the 
    currently selected one.
    </p></dd>

<dt>Hide Selected Views</dt>
<dd><p>Hide all view windows associated with the currently selected table.
    </p></dd>

<dt>Hide All Views</dt>
<dd><p>Hide all the view windows.
    If you get really confused, this is a good one to select to clear up 
    your screen prior to reinstating the ones that you actually want to
    look at.
    </p></dd>

</dl>
Note that the <label>Control Window</label> item (&IMG.CONTROL;) 
on menus on all other windows is also useful for window management -
it brings back the control window if it's been hidden.
</p>

<p>The <label>Joins</label> menu, as well as containing the actions
for table concatenation, internal matching and pair matching which 
are available from the toolbar, also gives you the option to join
three or four tables at once by matching rows.
The multi-table match windows work pretty much the same as the 
<ref id="MatchWindow">Pair Matching Window</ref>,
but with more tables.
</p>

</subsubsect>

</subsect>

<subsect id="views">
<subhead><title>Table View Windows</title></subhead>

<p>Many of the windows you will see within TOPCAT display information
about a single table. 
There are several of these, each displaying a different aspect of
the table data - cell contents, statistics, column metadata, 
plotted values etc.
There is one of each type for each of the tables currently loaded,
though they won't necessarily all be displayed at once.
The title bar of these windows will say something like
<label>TOPCAT(3): Table Columns</label>,
which indicates that it is displaying information about the column 
metadata for the table labelled "3:" in the
<ref id="ControlWindow">Control Window</ref>.
</p>

<p>To open any of these windows, select the table of interest in
the Control Window and click the appropriate toolbar button
(or the equivalent item in the <label>Table Views</label> menu).
This will either open up a new window of the sort you have requested,
or if you have opened it before, will make sure it's visible.
</p>

<p>If you have lots of tables and are using various different views of 
several of them, the number of windows on the screen can get out of
hand and it's easy to lose track of what window is where.
In this case the Control Window's <label>Windows</label> menu
(described in <ref id="controlMenus"/>), or the
<label>File|Control Window</label> menu item in any of the view windows
can be handy to keep them under control.
</p>

<p>The following sections describe each of these table view windows in turn.
</p>

<subsubsect id="TableViewerWindow">
<subhead><title>Data Window</title></subhead>

<figure>
<caption><px>Data Window</px></caption>
<figureimage src="&FIG.TableViewerWindow;"/>
</figure>

<p>The Data Window presents a <ref id="JTable">JTable</ref>
containing the actual cells of the 
<ref id="apparent" plaintextref="yes">Apparent Table</ref>.
You can display it using the <label>Table Data</label> (&IMG.TABLE;) 
button when the chosen table is selected in the
<ref id="ControlWindow">Control Window</ref>'s Table List.
</p>

<p>You can scroll around the table in the usual way. 
In most cases you can edit cells by double-clicking in them, though
some cells (e.g. ones containing arrays rather than scalars) cannot
currently be edited.  If it looks like an edit has taken place, it has.
</p>

<p>There is a grey column of numbers on the left of the JTable 
which gives the row index of each row.  This is the value of the
special Index column, which numbers each row of the original 
(not apparent) table starting at 1.
If the table has been <ref id="order">sorted</ref> these numbers 
may not be in order.
</p>

<p>Note that reordering the columns by dragging their headings around
will change the order of columns in the table's 
<ref id="columns">Column Set</ref> and hence the Apparent Table.
</p>

<p>If you have table with very many columns it can be difficult to
scroll the display sideways so that a column you are interested in
is in view.  In this case, you can go to the 
<ref id="ColumnInfoWindow">Columns Window</ref> and click on the
description of the column you are after in the display there.
This will have the effect of scrolling the Data Window sideways
so that your selected column is visible in the centre of the display
here.
</p>

<p>The following buttons are available in the toolbar:
<dl> 
<dt>&IMG.INCLUDE_ROWS; Subset From Selected Rows</dt>
<dd><p>Defines a new <ref id="subsets">Row Subset</ref> consisting of those
    rows which are currently highlighted.  You can highlight a  
    contiguous group of rows by dragging the mouse over them; 
    further contiguous groups can be added by holding the  
    Control key down while dragging. 
    This action is only available when some rows have been selected.
    </p></dd>

<dt>&IMG.EXCLUDE_ROWS; Subset From Unselected Rows</dt>
<dd><p>Defines a new Row Subset consisting of those rows which are visible
    but currently not highlighted.  You can highlight a
    contiguous group of rows by dragging the mouse over them;
    further contiguous groups can be added by holding the
    Control key down while dragging.
    This action is only available when some rows have been selected.
    </p></dd>
</dl>
</p>

<p>As well as the normal menu, right-clicking over one of the columns
in the displayed table will present a
<label>Column Popup Menu</label>, which provides a convenient
way to do some things with the column in question:
<dl>

<dt>&IMG.MODIFY; Replace Column</dt>
<dd><p>Pops up a
    <ref id="SyntheticColumnQueryWindow">Synthetic Column dialogue</ref>
    to replace this column with a new synthetic one.
    The dialogue is initialised with the same name, units etc as the
    selected column, and with an expression that evaluates to its value.
    You can alter any of these, and the new column will replace the
    old one, which will be hidden and renamed by appending a suffix
    like "_old" to its name.
    </p></dd>

<dt>&IMG.ADD; New Synthetic Column</dt>
<dd><p>Pops up a 
    <ref id="SyntheticColumnQueryWindow">Synthetic Column dialogue</ref> 
    to insert a new synthetic column just after this one.
    </p></dd>

<dt>&IMG.UP; Sort up</dt>
<dd><p>Sorts the table rows according to ascending value of the contents of
    the column.  Only available if some kind of order (e.g. numeric or
    alphabetic) can sensibly be applied to the column.
    </p></dd>

<dt>&IMG.DOWN; Sort down</dt>
<dd><p>Sorts the table rows according to descending value of the contents of
    the column.  Only available if some kind of order (e.g. numeric or
    alphabetic) can sensibly be applied to the column.
    </p></dd>

<dt>&IMG.HIDE; Hide</dt>
<dd><p>Hides the column.  It can be reinstated from the
    <ref id="ColumnInfoWindow">Columns window</ref>.
    </p></dd>

<dt>&IMG.SEARCH; Search Column</dt>
<dd><p>For string-valued columns, this option allows you to search 
    for values in a column.  If you select it you will be asked to enter
    a regular expression, and then any row which matches that expression
    in this column will be selected (highlighted).  If there's just one
    matching column it will be <ref id="activation">activated</ref> as well.
    The expression obeys normal 
    <webref url="http://en.wikipedia.org/wiki/Regular_expression"
            >regular expression</webref> syntax, so for instance
    you'd enter "<code>.*XYZ.*</code>" to find all rows which contain 
    the string "XYZ".
    </p></dd>

</dl>
</p>

</subsubsect>


<subsubsect id="ParameterWindow">
<subhead><title>Parameters Window</title></subhead>

<figure>
<caption><px>Parameters Window</px></caption>
<figureimage src="&FIG.ParameterWindow;"/>
</figure>

<p>The Parameters Window displays metadata which applies to the whole table
(rather than that for each column).  
You can display it using the <label>Table Parameters</label> (&IMG.PARAMS;)
button when the chosen table is selected in the
<ref id="ControlWindow">Control Window</ref>'s Table List.
</p>

<p>In table/database parlance, an item of
per-table metadata is often known as a "parameter" of the table.
The number of rows and columns will always be listed; some table file
formats
don't have facilities for storing other table parameter metadata,
so there may not be much of interest displayed in this window.
</p>

<p>The display is a <ref id="JTable">JTable</ref> with one row for each
parameter.  It indicates the parameter's name, its value, the type of
item it is (integer, string etc) and other items of interest such as
units, dimensionality or UCD if they are defined.
If a column of the table has no entries
(for instance, the Units column might be empty because none of the
parameters has had units defined for it) then that column may be absent
from the display - in this case the <label>Display</label> menu can be
used to reveal it.
</p>

<p>You can edit some parameter values and descriptions by double-clicking
on them as usual.  
</p>

<p>The following items are available in the toolbar:
<dl>

<dt>&IMG.ADD; Add Parameter</dt>
<dd><p>Pops up a <ref id="ParameterQueryWindow">New Parameter Window</ref>
    to allow you to add a new parameter to the table.
    </p></dd>

<dt>&IMG.DELETE; Remove Parameter</dt>
<dd><p>If one of the parameters displayed in the JTable in this window
    has been selected by clicking on its row, 
    then clicking this button will remove it. 
    You will be prompted before the removal takes place.
    Some parameters such as Row Count cannot be removed.
    </p></dd>
</dl>
</p>

</subsubsect>


<subsubsect id="ColumnInfoWindow">
<subhead><title>Columns Window</title></subhead>

<figure>
<caption><px>Columns Window</px></caption>
<figureimage src="&FIG.ColumnInfoWindow;"/>
</figure>

<p>The Columns Window displays a <ref id="JTable">JTable</ref>
giving all the information (metadata)
known about each column in the table.  
You can display it using the <label>Column Info</label> (&IMG.COLUMNS;)
button when the chosen table is selected in the 
<ref id="ControlWindow">Control Window</ref>'s Table List.
</p>

<p>The display may take a little bit
of getting used to, since each <var>column</var> in the main data table
is represented by a <var>row</var> in the JTable displayed here.
The order and widths of the columns of JTable widget can be
changed in the same way as those for the
<ref id="TableViewerWindow">Data Window</ref> JTable,
but this has no effect on the data.
</p>

<p>The leftmost column, labelled "Visible", contains a checkbox in
each row (one for each column of the data table).
Initially, these are all ticked.
By clicking on those boxes, you can toggle them between ticked and
unticked.  When unticked, the column in question will become hidden.
The row can still be seen in this window, but the corresponding data
column is no longer a part of
the <ref id="apparent">Apparent Table</ref>, so will not be seen
in the <ref id="TableViewerWindow">Data Window</ref> or appear in
exported versions of the table.
You can tick/untick multiple columns at once by highlighting a set of
rows by dragging the mouse over them and then using the
<label>Hide Selected</label> (&IMG.HIDE;) or 
<label>Reveal Selected</label> (&IMG.REVEAL;) 
toolbar buttons or menu items.
</p>

<p>Each column in the displayed JTable corresponds to one piece of
information for each of the columns in the data table -
column name, description, UCD etc.
Tables of different types (e.g. ones read from different input formats)
can have different categories of metadata.  By default a metadata
category is displayed in this JTable if at least one
table column has a non-blank
value for that metadata category, so for instance if no table columns
have a defined UCD then the UCD column will not appear.
Categories can be made to appear and disappear however by using the
<label>Display</label> menu.
The metadata items are as follows:
<dl>

<dt>Visible</dt>
<dd><p>Indicates whether the column is part of the Apparent Table.
    If this box is not filled in,
    then for most purposes the column will be hidden from display.
    You can toggle visibility by clicking on this column.
    </p></dd>

<dt>Name</dt>
<dd><p>The name of the column.
    </p></dd>

<dt>&column.id.char;ID</dt>
<dd><p>A unique and unchanging ID value for each column.   These are useful
    in defining algebraic expressions (see <ref id="jel"/>) since they are
    guaranteed unique for each column.  Although the column Name can
    be used as well, the Name may not be unique and may not have the
    correct form for use in an algebraic expression.
    </p></dd>

<dt>Class</dt>
<dd><p>The Java class of the items in that column.  You don't have to know
    very much Java to understand these; they are Float or Double for
    floating point numbers; Byte, Short, Integer or Long for integer
    numbers, Boolean for a logical (true/false) flag,
    or String for a string of ASCII or Unicode characters.
    There are other possibilities, but these will cover most.
    The characters '[]' after the name of the class indicates that each
    cell in the column holds an array of the indicated type.
    </p></dd>

<dt>Shape</dt>
<dd><p>Cells of a table can contain arrays as well as scalars.
    If the column contains an array type, this indicates the shape that
    it should be interpreted as.  It gives the dimensions in column-major
    order.  The last element may be a '*' to indicate that the size
    of the array may be variable.  For scalar columns, this item will be blank.
    </p></dd>

<dt>Units</dt>
<dd><p>The units in which quantities in this column are expressed.
    </p></dd>

<dt>Expression</dt>
<dd><p>The algebraic expression defining the values in this column.
    This will only be filled in if the column in question is a
    <ref id="SyntheticColumnQueryWindow">synthetic column</ref> 
    which you have added, rather than one present in
    the data in their original loaded form.
    </p></dd>

<dt>Description</dt>
<dd><p>A textual description of the function of this column.
    </p></dd>

<dt>UCD</dt>
<dd><p>The UCD associated with this column, if one is specified.
    UCDs are <webref url="http://vizier.u-strasbg.fr/doc/UCD.htx">Uniform
    Content Descriptors</webref>, and indicate the semantics
    of the values in this column.
    </p></dd>

<dt>UCD Description</dt>
<dd><p>If the string in the UCD column is the identifier of a known UCD,
    the standard description associated with that UCD is shown here.
    </p></dd>

</dl>
There may be other items in the list specific to the table in question.
</p>

<p>You can edit column names and some other entries in this JTable by 
double-clicking on them as usual.
</p>

<p>The order in which the rows are presented is determined
by the table's current <ref id="columns" plaintextref="yes">Column Set</ref>,
so can be changed by dragging the column headers around in the 
<ref id="TableViewerWindow">Data Window</ref>.
</p>

<p>The following buttons are available in the toolbar:
<dl>

<dt>&IMG.ADD; New Synthetic Column</dt>
<dd><p>This pops up a 
    <ref id="SyntheticColumnQueryWindow">Synthetic Column Window</ref>
    which allows you to define a new column in terms of the existing ones
    by writing an algebraic expression.
    The new column will be added by default after the last selected
    column, or at the end if none is selected.
    </p></dd>

<dt>&IMG.MODIFY; Replace Column With Synthetic</dt>
<dd><p>If a single column is selected, then clicking this button will
    pop up a 
    <ref id="SyntheticColumnQueryWindow">Synthetic Column dialogue</ref>
    to replace the selected column with a new synthetic one.
    The dialogue is initialised with the same name, units etc as the
    selected column, and with an expression that evaluates to its value.
    You can alter any of these, and the new column will replace the
    old one, which will be hidden and renamed by appending a suffix
    like "_old" to its name.
    </p></dd>

<dt>&IMG.HIDE; Hide Selected Column(s)</dt>
<dd><p>If any of the columns are selected, then clicking this button
    will hide them, that is, remove them from the
    current <ref id="columns">Column Set</ref>.
    This has the same effect as deselecting all the checkboxes corresponding
    to these columns in the <label>Visible</label> column.
    </p></dd>

<dt>&IMG.REVEAL; Reveal Selected Column(s)</dt>
<dd><p>If any of the columns are selected, then clicking this button
    will make sure they are visible, that is, that they appear in
    the current <ref id="columns">Column Set</ref>.
    This has the same effect as selecting all the checkboxes corresponding
    to these columns in the <label>Visible</label> column.
    </p></dd>

<dt>&IMG.EXPLODE; Explode Array Column</dt>
<dd><p>If a column is selected which has an array type, clicking this button
    will replace it with scalar-valued columns containing each of its elements.
    For instance if a column PMAG contains a 5-element vector of type
    <code>float[]</code> representing magnitudes in 5 different bands,
    then selecting it and hitting this button will hide PMAG and
    insert 5 new <code>Float</code>-type columns PMAG_1...PMAG_5 
    in its place each containing one of the magnitudes.
    </p></dd>

<dt>&IMG.UP; Sort Selected Up</dt>
<dd><p>If a single column is selected then the table's current 
    <ref id="order">Sort Order</ref> will be set to sort ascending on 
    that column.  Otherwise this action is not available.
    </p></dd>

<dt>&IMG.DOWN; Sort Selected Down</dt>
<dd><p>If a single column is selected then the table's current
    <ref id="order">Sort Order</ref> will be set to sort descending on
    that column.  Otherwise this action is not available.
    </p></dd>

</dl>
</p>

<p>Several of these actions operate on the currently selected column
or columns.  You can select columns by clicking on the corresponding
row in the displayed JTable as usual.  A side effect of selecting a
single column is that the table view in the 
<ref id="TableViewerWindow">Data Window</ref> will be scrolled sideways
so that the selected column is visible in (approximately) the middle of
the screen.  This can be a boon if you are dealing with a table that
contains a large number of columns.
</p>

</subsubsect>

<subsubsect id="SubsetWindow">
<subhead><title>Subsets Window</title></subhead>

<figure>
<caption><px>Subsets Window</px></caption>
<figureimage src="&FIG.SubsetWindow;"/>
</figure>

<p>The Subsets Window displays the 
<ref id="subsets" plaintextref="yes">Row Subsets</ref>
which have been defined.
You can display it using the <label>Row Subsets</label> (&IMG.SUBSETS;)
button when the chosen table is selected in the
<ref id="ControlWindow">Control Window</ref>'s Table List.
</p>

<p>The subsets are displayed in a <ref id="JTable">JTable</ref>
widget with a row for each subset.  The columns of the JTable
are as follows:
<dl>
<dt>&subset.id.char;ID</dt>
<dd><p>A unique and unchanging identifier for the subset, which consists of
    a "&subset.id.char;" character (underscore) followed by an integer.  
    This can be used to refer
    to it in <ref id="jel" plaintextref="yes">expressions</ref>
    for synthetic columns or other subsets.
    </p>

    <p><strong>Note:</strong> in previous versions of TOPCAT the hash
    sign ("#") was used instead of the underscore for this purpose;
    the hash sign no longer has this meaning.
    </p></dd>

<dt>Name</dt>
<dd><p>A name used to identify the subset.  It is ideally, but not necessarily,
    unique.
    </p></dd>

<dt>Size</dt>
<dd><p>The number of rows in this subset.  This column is initially blank,
    and is not guaranteed to remain correct if the subset definitions
    or the table data change, since counting may be an expensive
    process so it is not automatically done with every change.
    A count can be forced by using the 
    <label>Count Subsets</label> (&IMG.COUNT;) button described below.
    </p></dd>

<dt>Expression</dt>
<dd><p>If the subset has been defined by an algebraic expression, this will be
    here.  It can be edited (double-click on the cell) 
    to change the expression.
    </p></dd>

<dt>Column &column.id.char;ID</dt>
<dd><p>If the subset has been defined by equivalence with a boolean-valued
    column, this will show the &column.id.char;ID of
    the column that it came from (see <ref id="ColumnInfoWindow"/>).
    </p></dd>
</dl>
</p>

<p>Entries in the <label>Name</label> and <label>Expression</label> columns
can be edited by double-clicking on them in the normal way.
</p>

<p>The following toolbar buttons are available in this window:
<dl>

<dt>&IMG.ADD; New Subset</dt>
<dd><p>Pops up the 
    <ref id="SyntheticSubsetQueryWindow">Algebraic Subset Window</ref>
    to allow you to define a new subset algebraically.
    </p></dd>

<dt>&IMG.INVERT; Invert Subset</dt>
<dd><p>Creates a new subset which is the complement of the selected one.
    The new one will include all the rows which are excluded by the
    selected one (and vice versa).
    To use this action, first select a subset by clicking on its row
    in the JTable.
    </p></dd>

<dt>&IMG.TO_COLUMN; To Column</dt>
<dd><p>If one of the rows in the JTable is selected, this will turn that
    subset into a new column.  It will pop up the
    <ref id="SyntheticColumnQueryWindow">Synthetic Column Window</ref>, 
    filled in
    appropriately to add a new boolean column to the table based on
    the selected subset.  You can either accept it as is, or
    modify some of the fields.
    To use this action, first select a subset by clicking on its row
    in the JTable.
    </p></dd>

<dt>&IMG.COUNT; Count Subsets</dt>
<dd><p>Counts how many rows are in each subset and displays this in the
    <label>Size</label> column.  
    This forces a count or recount to fill in or update these values.
    </p></dd>

</dl>
</p>

</subsubsect>

<subsubsect id="StatsWindow">
<subhead><title>Statistics Window</title></subhead>

<figure>
<caption><px>Statistics Window</px></caption>
<figureimage src="&FIG.StatsWindow;"/>
</figure>

<p>The Statistics Window shows statistics for the values in each
of the table's columns.  
You can display it using the <label>Column Statistics</label> (&IMG.STATS;)
button when the chosen table is selected in the 
<ref id="ControlWindow">Control Window</ref>'s Table List.
</p>

<p>The calculated values are displayed in a
<ref id="JTable">JTable</ref>  widget with a row for each
column in the main table, and a column for each of a number of
statistical quantities calculated on <ref id="subsets">some or all</ref> of
the values in the data table column corresponding to that grid row.
The following columns are shown by default:
<dl>
<dt>Name</dt>
<dd><p>The name of the column in the main table represented by this grid row.
    </p></dd>

<dt>Mean</dt>
<dd><p>The mean value of the good cells.  For boolean columns, this is
    the proportion of good cells which are True.
    </p></dd>

<dt>S.D.</dt>
<dd><p>The standard deviation of the good cells.
    </p></dd>

<dt>Minimum</dt>
<dd><p>The minimum value.  For numeric columns the meaning of this is quite
    obvious.  For other columns, if an ordering can be reasonably defined
    on them, the 'smallest' value may be shown.  For instance string
    values will show the entry which would be first alphabetically.
    </p></dd>

<dt>Maximum</dt>
<dd><p>As minimum, but shows the largest values.
    </p></dd>

<dt>Good cells</dt>
<dd><p>The number of non-blank cells.
    </p></dd>

</dl>
Several additional items of statistical information are also calculated,
but the columns displaying these are hidden by default to avoid clutter.
You can reveal these by using the <label>Display</label> menu:
<dl>

<dt>Index</dt>
<dd><p>The index of the column in the table, i.e. the order in which
    it is displayed.
    </p></dd>

<dt>&column.id.char;ID</dt>
<dd><p>The unique identifier label for the column in the main table.
    </p></dd>

<dt>Sum</dt>
<dd><p>The sum of all the values in the column.  For boolean columns this
    is a count of the number of True values in the column.
    </p></dd>

<dt>Variance</dt>
<dd><p>The variance of the good cells.
    </p></dd>

<dt>Row of min.</dt>
<dd><p>The index of the row in the main table at which the minimum value
    occurred.
    </p></dd>

<dt>Row of max.</dt>
<dd><p>The index of the row in the main table at which the maximum value
    occurred.
    </p></dd>

<dt>Bad cells</dt>
<dd><p>The number of blank cells; the sum of
    this value and the Good cells value will be the same for each
    column.
    </p></dd>

<dt>Cardinality</dt>
<dd><p>If the column contains a small number of distinct values
    then that number, the column's <em>cardinality</em> will be shown here.
    Cardinality is the number of distinct values which appear in that column.
    If the number of values represented is large (currently &gt;50) or
    a large proportion of the non-bad values (currently &gt;75%) then
    no value is shown.
    </p></dd>

</dl>
</p>

<p>The quantities displayed in this window are not necessarily those for
the entire table; they are those for a particular
<ref id="subsets" plaintextref="yes">Row Subset</ref>.
At the bottom of the window is the <label>Subset For Calculations</label>
selector, which allows you
to choose which subset you want the calculations to be done for.
By clicking on this you can calculate the statistics for different
subsets.
When the window is first opened, or when it is invoked from a menu
or the toolbar in the <ref id="ControlWindow">Control Window</ref>,
the subset will correspond to the current row subset.
</p>

<p>The toolbar contains the following extra button:
<dl>
<dt>&IMG.REDO; Recalculate</dt>
<dd><p>Once statistics have been calculated for a given subset they are
    cached and not normally recalculated again.
    Use this button if you want to force a recalculation because the
    data may have changed.
    </p></dd>
</dl>
</p>

<p>For a large table the calculations may take a short while.  While they are
being performed you can interact with the window as normal,
but a progress bar is shown at the bottom of the window.
If you initiate a new calculation (by pushing the Recalculate button or
selecting a new subset) or close the window during a calculation,
the superceded calculation will be stopped.
</p>

</subsubsect>

<subsubsect id="PlotWindow">
<subhead><title>Plot Window</title></subhead>

<figure>
<caption><px>Plot Window</px></caption>
<figureimage src="&FIG.PlotWindow;"/>
</figure>

<p>The plot window allows you to plot the values in two table
columns against each other.
You can display it using the <label>Plot</label> (&IMG.PLOT;)
button when the chosen table is selected in the
<ref id="ControlWindow">Control Window</ref>'s Table List.
</p>

<p>On the plotting surface a marker is plotted for each row in the
selected <ref id="subsets" plaintextref="yes">Row Subsets</ref> 
at a position determined by the
values in the table columns selected to provide the X and Y values.
A marker will only be plotted if both the X and Y values are not blank.
If more than one subset is being plotted, they will be drawn using
different markers.  A key on the right hand side indicates the marker
being used for each subset.  The marker types can be changed using the
<label>Marker Types</label> menu.
</p>

<p>You can <label>zoom</label> in and out of the plot by dragging with the left mouse
button down and right (zoom in) or up and left (zoom out) - this takes
a little practice but is easy to use after a couple of goes.
If you get lost you can push the
<label>Rescale</label> button (&IMG.RESIZE;) 
to return the scaling to normal.
</p>

<p>Below the plot there are two sets of controls for selecting the
table column which will provide the X and Y axis values.
Each one consists of two parts:
<dl>
<dt>Column selector</dt>
<dd><p>A selection box from which column names in the main table can be
    selected.  Only columns which can be plotted from (i.e. scalar numeric
    ones) will be displayed in this selector.
    </p></dd>

<dt>Log checkbox</dt>
<dd><p>This checkbox can be clicked to toggle whether the axis in question
    is to be plotted logarithmically or not.  If it is logarithmic,
    any negative values are simply ignored (not plotted).
    </p></dd>

<dt>Flip checkbox</dt>
<dd><p>This checkbox can be clicked to toggle whether the axis in question
    is to be plotted reversed.  Normally (unticked) X axis increases
    left to right and Y axis increases bottom to top.  When ticked, 
    X axis increases right to left, and Y axis increases top to bottom.
    </p></dd>
</dl>
</p>

<p>To the right is a set of checkboxes headed 
<label>Row Subsets</label>.
Click on these to choose which of the table's 
defined <ref id="subsets">Row Subsets</ref> should be plotted on this graph.
Different subsets are plotted
using different markers, so you can see where different groups of results
lie in relation to each other.
You can alternatively use the <label>Subsets To Plot</label> item on the
<label>Subsets</label> menu.
The subsets are plotted in order of which was most recently selected.
This makes a difference on a crowded plot or where some points are 
members of multiple subsets, since the most recently plotted symbol 
will appear on top.  If points from one subset are being hidden behind
those from another, you can deselect and reselect that subset and
they'll be shown on top.
</p>

<p>The following extra buttons are available on the toolbar:
<dl>

<dt>&IMG.PRINT; Export as EPS</dt>
<dd><p>Pops up a dialogue which will print the current plot as an EPS file.
    In general this is a faithful and high quality rendering of what
    is displayed in the plot window.  However, if plotting is being done
    using the transparent markers, it won't come out right since 
    transparency cannot be represented in PostScript; the markers will
    be rendered as if they were opaque.
    Currently, if there are many points being plotted, this can result
    in a rather large output file.
    <!-- getting on for 0.5 kbyte per point! Too embarassed to write this. --> 
    </p></dd>

<dt>&IMG.IMAGE; Export as GIF</dt>
<dd><p>Pops up a dialogue which will output the current plot to a GIF file.
    The output file is just the same as the plotted image that you see.
    Resize the plotting window before the export to control the size 
    of the output GIF.
    </p></dd>

<dt>&IMG.RESIZE; Rescale</dt>
<dd><p>Rescales the axes of the current plot so that it contains all
    the data points in the currently selected subsets.
    By default the plot will be scaled like this, but it it may have changed
    because of changes in the subset selection or from zooming in or out.
    </p></dd>

<dt>&IMG.REDO; Replot</dt>
<dd><p>Redraws the current plot.  It is usually not necessary to 
    use this button, since if you change any of the plot characteristics
    with the controls in this window the plot will be redrawn
    automatically.  However if you have changed the data, e.g. by
    editing cells in the <ref id="TableViewerWindow">Data Window</ref>,
    the plot is not automatically redrawn (since this is potentially an
    expensive operation and you may not require it).
    Clicking this button redraws the plot taking account of any changes
    to the table data.
    </p></dd>

<dt>&IMG.GRID_ON; Grid</dt>
<dd><p>Toggles whether a grid is drawn over the plotting surface or not.
    </p></dd>

<dt>&IMG.BLOB_SUBSET; Draw Subset Region</dt>
<dd><p>Allows you to draw a region on the screen defining a new 
    <ref id="subsets">Row Subset</ref>.  When you have finished 
    drawing it, click this button again to indicate you're done.
    See <ref id="plotSubsets"/> for more details.
    </p></dd>

<dt>&IMG.VISIBLE_SUBSET; Subset From Visible</dt>
<dd><p>Defines a new <label>Row Subset</label>
    consisting of only the points which
    are currently visible on the plotting surface.
    See <ref id="plotSubsets"/> for more details.
    </p></dd>

</dl>
</p>

<p>The <label>Marker Types</label> menu allows you to select a 
set of markers which will be used for plotting.
Some of these sets are marked "Transparent" - for these, 
instead of pixels on the plot blocking out ones already plotted,
the more markers that are plotted at a given screen position, 
the darker in colour it will appear.  This can be useful if
you have very many points to plot, since you can see by the 
colour of pixels on the plot how many points are there in 
crowded regions.  Unfortunately transparent points are not rendered
properly when exported to PostScript files (they come out opaque),
but they still work when exported to GIF format.
The marker type set used initially depends on how many rows there 
are in the table (large dots for few rows, small ones for many).
</p>

<p>The <label>Regression</label> menu provides facilities for
calculating and plotting linear regression lines for some or
all of the subsets on display.  The following options appear
on the menu:
<dl>
<dt>&IMG.PLOT_LINES; Plot Regression For Subsets...</dt>
<dd><p>Presents you with a checkbox menu which allows you to select
    which subsets regression lines will be displayed for.
    Each subset whose box you select will have a line plotted on the
    graph representing its least-squares fit regression line
    in the same colour as the points for that subset.
    </p></dd>

<dt>&IMG.EQUATION; Display Regression Coefficients</dt>
<dd><p>Displays a window giving the gradient, intercept and
    product moment correlation coefficient for each regression line
    which has been plotted.
    </p></dd>
</dl>
Note the regression lines plotted are those calculated from all the
<em>visible</em> points in the subset in question - any points
off the edge of the graph are disregarded.  Thus, zooming in and
out will change the correlation coefficients and line geometry.
The linear correlation functionality is experimental in this version
of the program, and will be improved in future.
</p>

<subsubsubsect id="plotSubsets">
<subhead><title>Defining Subsets From Plots</title></subhead>

<p>When columns are plotted against each other in the 
<ref id="PlotWindow">Plot Window</ref>, it becomes easy 
to see groupings of the data which may not be otherwise apparent;
a cluster of (X,Y) points representing a group of rows 
may correspond to a physically important grouping of objects which
you would like to treat separately elsewhere in the program, 
for instance by calculating statistics on just these rows, 
writing them out to a new table, 
or plotting them in a different colour on graphs with different coordinates.
This is easily accomplished by creating a new 
<ref id="subsets">Row Subset</ref> containing the grouped points,
and the Plot Window gives you two ways to do this.
</p>

<p>The simplest way is to zoom the plot so that only the points you
want to identify are visible (by dragging the mouse down-and-right
to zoom in or up-and-left to zoom out) and hitting the 
<label>New Subset From Visible</label> (&IMG.VISIBLE_SUBSET;)
toolbar button.  This defines a subset consisting of all the points
that are currently visible.
This has the limitation that only a rectangular grouping of points
can be selected.
</p>

<p>A much more flexible way is to draw a region or regions 
on the plot which identify the points you are interested in.
To do this, hit the
<label>Draw Subset Region</label> (&IMG.BLOB_SUBSET;)
toolbar button.  Having done this, you can drag the mouse around
on the plot (keep the left mouse button down while you move)
to encircle the points that you're interested in.
As you do so, a translucent grey blob will be left behind - 
anything inside the
blob will end up in the subset.  You can draw one or many blobs, 
which may be overlapping or not.  If you make a mistake while 
drawing a sequence of blobs, you can click the right mouse button,
and the most recently added blob will disappear.
When you're in this region-drawing mode,
you can't zoom or resize the window or change the characteristics
of the plot, and the <label>Draw Subset Region</label> button 
appears with a tick over it (&IMG.BLOB_SUBSET_END;) to remind you
you're in it.  Here's what the plot looks like while you're drawing:
</p>
<figure>
<caption><px>Region-Drawing Mode</px></caption>
<figureimage src="&FIG.PlotWindow_blob;"/>
</figure>
<p>When you're happy with the region you've defined, click the
&IMG.BLOB_SUBSET_END; toolbar button again.
</p>

<p>In either case, when you have indicated that you want to define a 
new row subset, a dialogue box will pop up to ask you its name.
As described in <ref id="subsetDef"/>, it's a good idea to use a
name which you haven't used before, and which is just composed
of letters, numbers and underscores.
When you enter a name and hit the <label>OK</label> button, 
the new subset will be created and the points in it will be 
shown straight away on the plot using a new symbol.  
As usual, you can toggle whether the points in this subset are displayed
using the <label>Row Subsets</label> box at the bottom of the Plot Window.
</p>

</subsubsubsect>

</subsubsect>

</subsect>

<subsect id="LoadQueryWindow">
<subhead><title>Load Window</title></subhead>

<figure>
<caption><px>Load Window</px></caption>
<figureimage src="&FIG.LoadQueryWindow;"/>
</figure>

<p>The Load Window is used for loading tables from an external location
(e.g. disk or URL) into TOPCAT.  It is obtained using the 
<label>Load Table</label> button (&IMG.LOAD;) in the 
<ref id="ControlWindow">Control Window</ref> toolbar or File menu.
</p>

<p>This dialogue allows you to specify a new table to open in several
different ways, described below.
If you successfully load a table using any of these options,
a new entry will be added into the Table List in the Control Window,
which you can then use in the usual ways.
If you choose a location which can't be turned into a table
(for instance because the file doesn't exist),
a window will pop up telling you what went wrong.
If you get an <code>OutOfMemoryError</code> while loading a table,
you will have to run TOPCAT with more memory, as described in
<ref id="jvmMemory"/> or use the <code>-disk</code> flag described in
<ref id="topcatArgs"/>.
</p>

<p>In the simplest case, you can type a name into the 
<label>Location</label> field and hit return or the <label>OK</label>
button.  This location can be a filename or a URL,
possibly followed by a '<code>#</code>' character and a 
'fragment identifier' to indicate where in the file or URL the table is
located; the details of what such fragment identifiers mean can be
found in the relevant subsection within <ref id="inFormats"/>.
You should select the relevant table format from the 
<label>Format</label> selector box - you can leave it on 
<label>(auto)</label> for loading FITS tables or VOTables,
but for other formats such as ASCII or CSV you must select the right one
explicitly (again, see <ref id="inFormats"/> for details).
</p>

<p>There are many other ways of loading tables however,
described in the following subsections.
The <label>Filestore Browser</label> button is always visible below
the location field.  Depending on startup options, there may be
other buttons here.  In any case, you can look in the 
<label>DataSources</label> menu to see other table load dialogues.
Exactly which ones are available will depend on your setup 
(some may be absent or greyed out, and additional ones may be
available).  The following subsections describe some of the
options which may be available.
</p>

<subsubsect id="FilestoreTableLoadDialog">
<subhead><title>Filestore Browser</title></subhead>

<figure>
<caption><px>Filestore Browser window</px></caption>
<figureimage src="&FIG.FilestoreTableLoadDialog;"/>
</figure>

<p>By clicking the <label>Filestore Browser</label> button in the
Load Window,
you can obtain a file browser which will
display the files in a given directory.
The way this window works is almost certainly familiar to you 
from other applications.
</p>

<p>Unlike a standard file browser however, it can also 
browse files in remote filestores: currently supported are 
MySpace and SRB.  MySpace is a distributed storage system 
developed for use with the Virtual Observatory by the 
<webref url="http://www.astrogrid.org">AstroGrid</webref> project,
and SRB 
(<webref url="http://www.sdsc.edu/srb/">Storage Resource Broker</webref>) 
is a similar general purpose system developed at SDSC.
To make use of these facilities, select the relevant entry from
the selector box at the top of the window as illustrated above;
this will show you a <label>Log In</label> button which prompts you
for username, password etc, and you will then be able to browse
the remote filestore as if it were local.  The same button can be
used to log out when you are finished, but the session will be 
logged out automatically when TOPCAT ends in any case.
Access to remote filesystems is dependent on certain optional
components of TOPCAT, and it may not be available if you
have the topcat-lite configuration.
</p>

<p>The browser initially displays the current directory, but this can be
changed by typing a new directory into the <label>File Name</label> field,
or moving up the directory hierarchy using the selector box at the top,
or navigating the file system by clicking the up-directory button
or double-clicking on displayed directories.
</p>

<p>All files are shown, and there is no indication of which ones represent
tables and which do not.  To open one of the displayed files as a table,
double-click on it or select it by clicking once and click the
<label>Open Table</label> button.  
The <label>Table Format</label> selector must be set correctly:
the "(auto)" setting will automatically detect the format of 
VOTable or FITS tables,
otherwise you will need to select the option describing the format of
the file you are attempting to load (see <ref id="inFormats"/>).
If you pick a file which cannot be converted
into a table an error window will pop up.
</p>

<p>Because this browser only works at the file level, there is a limit
to what tables it can access.  For instance if you select a FITS file,
the table opened will correspond to the first TABLE or BINTABLE
HDU within it.
For a more table-aware view of the file system, use the
<ref id="TreeTableLoadDialog" plaintextref="yes">Hierarchy Browser</ref> 
instead.
</p>

</subsubsect>

<subsubsect id="TreeTableLoadDialog">
<subhead><title>Hierarchy Browser</title></subhead>

<figure>
<caption><px>File load Hierarchy Browser window</px></caption>
<figureimage src="&FIG.TreeTableLoadDialog;"/>
</figure>

<p>By selecting the <label>Hierarchy Browser</label> option from
the Load Window's <label>DataSources</label> menu,
you can obtain a browser which presents a table-aware
hierarchical view of the file system.
(Note that a freestanding version of this panel with additional
functionality is available in the separate
<webref url="http://www.starlink.ac.uk/treeview/">Treeview</webref>
application).
</p>

<p>This browser resembles the 
<ref id="FilestoreTableLoadDialog">Filestore Browser</ref>
in some ways, but with important differences:
<ul>
<li>It shows the file system in a 'tree-like' fashion, so that multiple
    levels of the hierarchy are displayed at once</li>
<li>It understands which items in the hierarchy represent tables
    that can be automatically detected and
    which represent other kinds of object (for instance directories,
    zip files, or plain text files)</li>
<li>It can look inside hierarchical files, so for instance it can
    investigate a Tar or Zip archive which may contain table entries,
    or display multiple tabular HDUs in a FITS file, or multiple
    TABLE elements at different levels in a VOTable document</li>
</ul>
</p>

<p>The main part of the window shows a "tree" representation of the
hierarchy, initially rooted at the current directory.
Each line displayed represents a "node" which may be a file or
some other type of item (for instance an HDU in a FITS file or an
entry in a tar archive).  The line contains a little icon
which indicates what kind of node it is and a short text string which
gives its name and maybe some description.
Nodes which represent tables are indicated by the 
&IMG.TABLE; icon.
For nodes which have some internal structure there is also a
"handle" which indicates whether they are
collapsed (&IMG.COLLAPSED;) or expanded (&IMG.EXPANDED;).
You can examine remote filespaces (MySpace, SRB) 
as well as local ones in the same way as with the 
<ref id="FilestoreTableLoadDialog">Filestore Browser</ref>.
</p>

<p>If you select a node by clicking on it, it will be highlighted
and some additional description will appear in the panel below the
hierarchy display.  The text is in <strong>bold</strong> if the node in
question can be opened as a table, and non-bold if it is some
non-table item.
</p>

<p><strong>Note:</strong> an important restriction of this browser
is that it will only pick up tables which can be identified 
automatically - this includes FITS and VOTable files, but does not
include text-based formats such as ASCII and Comma-Separated Values.
If you want to load one of the latter types of table, you will need
to use one of the other load methods and specify table format explicitly.
</p>

<p>You can see how this browser works on an example directory of tables
as described in <ref id="demoData"/>.
</p>

<p>Note that this window requires certain optional 
components of the TOPCAT installation,
and will not be available if you have the topcat-lite configuration.
</p>

<subsubsubsect>
<subhead><title>Navigation</title></subhead>

<p>Navigation is a bit different from navigation in the 
<label>File Browser</label> window.
To expand a node and see its contents, click on its handle
(clicking on the handle when it is expanded will collapse it again).
When you have identified the table you want to open, highlight it
by clicking on it, and then click the <label>Open Table</label> button
at the bottom.
</p>

<p>To move to a different directory, i.e. to change the root of the tree
which is displayed, use one of the buttons above the tree display:
<dl>
<dt>Selector box</dt>
<dd><p>Allows you to move straight to any directory higher up than the
    current one.
    </p></dd>

<dt>&IMG.TV_UP; Up</dt>
<dd><p>Moves to the parent of the current directory.
    </p></dd>

<dt>&IMG.TV_DOWN; Down</dt>
<dd><p>Moves to the currently selected (highlighted) node.
    </p></dd>

<dt>&IMG.HOME; Home</dt>
<dd><p>Moves to the user's home directory.
    </p></dd>
</dl>
Alternatively, you can type in a new directory
in the <label>Go to</label> field at the bottom of the window.
</p>

<p>(In fact the above navigation options are not restricted to changing
the root to a new directory, they can move to any node in the
tree, for instance a level in a Tar archive.)
</p>

</subsubsubsect>

<subsubsubsect>
<subhead><title>Table Searches</title></subhead>

<p>There are two more buttons in the browser, <label>Search Selected</label>
and <label>Search Tree</label>.  These do a recursive search for tables in all
the nodes starting at the currently selected one or the current
root respectively.
What this means is that the program will investigate the whole
hierarchy looking for any items which can be used as tables.
If it finds any it will open up the tree so that they are visible
(note that this doesn't mean that the only nodes revealed will
be tables, ancestors and siblings will be revealed too).
This can be useful if you believe there are a few tables buried
somewhere in a deep directory structure or Tar archive, but you're
not sure where.  Note that this may be time-consuming - a busy
cursor is displayed while the search is going on.
Changing the root of the tree will interrupt the search.
</p>

</subsubsubsect>

</subsubsect>

<subsubsect id="SQLReadDialog">
<subhead><title>SQL Query</title></subhead>

<figure>
<caption><px>SQL Query Dialogue</px></caption>
<figureimage src="&FIG.SQLReadDialog;"/>
</figure>

<p>If you want to 
<ref id="inSql" plaintextref="yes">read a table from an SQL database</ref>,
you can use a specialised dialogue to specify the SQL query by selecting
<label>SQL Query</label> option from the Load Window's 
<label>DataSources</label> menu.
</p>

<p>This provides you with a list of fields to fill in which make
up the query, as follows:
<dl>
<dt>Protocol</dt>
<dd><p>The name of the appropriate JDBC sub-protocol.
    This is defined by the JDBC driver that you are using, and is
    for instance "<code>mysql</code>" for MySQL's Connector/J driver
    or "<code>postgresql</code>" for PostgreSQL's JDBC driver.
    </p></dd>

<dt>Host</dt>
<dd><p>The hostname of the machine on which the database resides
    (may be "<code>localhost</code>" if the database is local).
    </p></dd>

<dt>Database name</dt>
<dd><p>The name of the database.
    </p></dd>

<dt>SQL Query</dt>
<dd><p>The text of the query which will define the resulting table.
    If you want to look at a table named XXX as it exists in the database,
    you can write something like "<code>SELECT * from XXX</code>".
    In principle any SQL query on the database can be used here,
    but the details of what SQL syntax is permitted will be defined
    by the JDBC driver you are using.
    </p></dd>

<dt>User name</dt>
<dd><p>The username under which you wish to access the database.
    This is not strictly necessary if there is no access control for
    the database in question.
    </p></dd>

<dt>Password</dt>
<dd><p>The password for the given username.  Again, whether this is
    necessary depends on the access policy of the database.
    </p></dd>
</dl>
</p>

<p>There are a number of criteria which must be satisfied for SQL
access to work within TOPCAT (installation of appropriate drivers
and so on) - see <ref id="jdbcConfig"/>.  If you don't take
these steps, this dialogue may be inaccessible.
</p>

</subsubsect>

<subsubsect id="ConeSearchDialog">
<subhead><title>Cone Search</title></subhead>

<figure>
<caption><px>Cone search table import dialogue</px></caption>
<figureimage src="&FIG.ConeSearchDialog;"/>
</figure>

<p>By selecting the <label>Cone Search</label> option from
the Load Window's <label>DataSources</label> menu,
you can obtain a dialogue which allows you to query one of a 
number of external web services for a catalogue of objects 
known in a given region of the sky.
</p>

<p>When first displayed, this dialogue window will ask an external
services registry for all the cone search services on the net 
which have advertised their existence.  When it has got the result,
you will see a list of their names and titles in a table.
For more information about each one, use the
<label>Columns</label> menu to select what information, such as
publisher, reference URL etc is displayed in the table.
You can scroll up and down this table and select the one which you
want to query by clicking on it.
</p>

<p>Having selected one of the cone search services from the table,
you need to specify the sky region in which you are interested.
If you enter the name of an astronomical object into the 
<label>Object Name</label> field and hit the <label>Resolve</label>
button, the coordinates will be entered into the <label>RA</label> 
and <label>Dec</label> fields below.
Alternatively you can type the coordinates in directly, choosing
either degrees or sexagesimal coordinates using the unit selector
boxes.  Enter the search radius too.
</p>

<p>Having done this, 
hit the <label>OK</label> button.  This will send the query to
the service you selected and, if successful, load into TOPCAT a
table containing all the objects in the region of the sky you 
have specified.  The exact format of the returned table will depend
on the service you have selected, but it will contain at least 
columns representing Right Ascension and Declination.
</p>

<p>Note that this window requires certain optional 
components of the TOPCAT installation,
and will not be available if you have the topcat-lite configuration.
</p>

</subsubsect>


<subsubsect id="demoData">
<subhead><title>Example Tables</title></subhead>

<p>Provided with TOPCAT are some example tables,
which you can access in a number of ways.
The simplest thing is to start up TOPCAT with the 
"<code>-demo</code>" flag on the command line, which will cause
the program to start up with a few demonstration tables already loaded in.
</p>

<p>You can also load examples in from the <label>Examples</label> menu 
in the Load Window however.  This contains the following options:
<dl>

<dt>Load Example Table</dt>
<dd><p>Loads in a single example table.
    </p></dd>

<dt>Browse Demo Data</dt>
<dd><p>Pops up a 
    <ref id="TreeTableLoadDialog" plaintextref="yes">Hierarchy Browser</ref>
    looking at a hierarchy of tables in different formats.
    This option is designed to show some of the organisational
    complexity which TOPCAT can handle when browsing tables.
    </p></dd>

</dl>
</p>

<p>Note these examples are a bit of a mixed bag, and are not all
that exemplary in nature.  They are just present to allow you to 
play around with some of TOPCAT's features if you don't have any
real data to hand.
</p>

</subsubsect>

</subsect>

<subsect id="SaveQueryWindow">
<subhead><title>Save Window</title></subhead>

<figure>
<caption><px>Save Window</px></caption>
<figureimage src="&FIG.SaveQueryWindow;"/>
</figure>

<p>The Save Window is used to write tables out,
and it is accessed using the <label>Save Table</label> button (&IMG.SAVE;)
in the <ref id="ControlWindow">Control Window</ref>'s toolbar or File menu. 
Any table in the Control Window's table list can be
written at any time; what is written is the 
<ref id="apparent">Apparent Table</ref> corresponding to the currently
selected table, which takes into account any modifications you have
made to its data or appearance this session.
The current <label>Row Subset</label> and <label>Row Order</label>
are displayed in this window as a reminder of what you're about to
save; if you modify the values in these selectors you will be
modifying the Apparent Table in the usual way.
</p>

<p>Any <ref id="subsets">Row Subsets</ref> 
which have been defined on the table in the current session
will not be saved themselves, but you can save information about
subset membership by creating new boolean columns based on subsets
using the "To Column" button (&IMG.TO_COLUMN;) from the
<ref id="SubsetWindow">Subsets Window</ref>.
</p>

<p>You can use the <label>Table Output Format</label>
selector box to pick
the format in which the table will be written from one
of the <ref plaintextref="yes" id="outFormats">supported output formats</ref>.
There is no default format, and it won't automatically save to the
same format it was loaded from, but if you leave it on "(auto)" it
will try to guess the format based on the filename given;
for instance if you specify the name "out.fits", a FITS binary table
will be written.
</p>

<p>You can specify the location of the output table in these ways,
which are described in the following sections:
<ul>
<li>Type in the location directly in the 
    <ref id="saveString" plaintextref="yes">Output Location field</ref></li>
<li>Use the <label>Filestore Browser</label> button to get a
    <ref id="FilestoreTableSaveDialog" plaintextref="yes">browser</ref>
    that shows you local and remote files</li>
<li>Use the <label>SQL table</label> button to get the 
    <ref id="SQLWriteDialog" plaintextref="yes">SQL Output Dialogue</ref></li>
</ul>
In some cases, saving the table to the same name as it was loaded from
can cause problems (e.g. an application crash which loses the data
unrecoverably).
In other cases, it's perfectly OK.  The main case in which it's
problematic is when editing an uncompressed FITS binary table on disk.
TOPCAT will attempt to warn you if it thinks you are doing something
which could lead to trouble; ignore this at your own risk.
</p>

<p>There is no option
to compress files on output (though you can of course compress them
yourself once they have been written).
</p>

<p>If the table is large, a progress bar indicating how near the
save is to completion will appear.
It is not advisable to edit the table during a save operation.
</p>

<p>In some cases, when saving a table to a format other than the one
from which it was loaded, or if some new kinds of metadata have been
added, it may not be possible to express all
the data and metadata from the table in the new format.
For instance a WDC table can contain data which represent epoch (date),
and this cannot be stored in a FITS table.  In this case the table
may be written with such columns missing.  Some message to this effect
may be output in this case.
</p>


<subsubsect id="saveString">
<subhead><title>Enter Location</title></subhead>

<p>You can specify where to save a table by typing its location
directly into the <label>Output Location</label> field of the
Save Table window.
This will usually be the name of a new file to
write to, but could in principle be a URL or a SQL specifier.
</p>

</subsubsect>

<subsubsect id="FilestoreTableSaveDialog">
<subhead><title>Filestore Browser</title></subhead>

<figure>
<caption><px>Filestore Browser for table saving</px></caption>
<figureimage src="&FIG.FilestoreTableSaveDialog;"/>
</figure>

<p>By clicking the <label>Browse Filestore</label> button in the
<label>Save Table</label> window,
you can obtain a browser which will display the
files in a given directory.
</p>

<p>The browser initially displays the current directory, but this can be
changed by typing a new directory into the <label>File Name</label> field,
or moving up the directory hierarchy using the selector box at the top,
or navigating the file system by clicking the up-directory button
or double-clicking on displayed directories.
</p>

<p>The browser can display files in remote filestores such as on
MySpace or SRB servers; see the section on the load filestore
browser (<ref id="FilestoreTableLoadDialog"/>) for details.
</p>

<p>To save to an existing file, select the file name and click the
<label>OK</label> button at the bottom; this will overwrite that file.
To save to a new file, type it into the <label>File Name</label> field;
this will save the table under that name into the directory which is displayed.
You can (re)set the format in which the file will be written using
the <label>Output Format</label> selector box on the right
(see <ref id="outFormats"/> for discussion of output formats).
</p>

</subsubsect>

<subsubsect id="SQLWriteDialog">
<subhead><title>SQL Output Dialogue</title></subhead>

<figure>
<caption><px>SQL table writing dialogue</px></caption>
<figureimage src="&FIG.SQLWriteDialog;"/>
</figure>

<p>If you want to 
<ref id="outSql" plaintextref="yes">write a table to an SQL database</ref>,
you can use a specialised dialogue to specify the table destination by clicking
the <label>SQL Table</label> button in the <label>Save Table</label>
window.
</p>

<p>This provides you with a list of fields to fill in which define
the new table to write, as follows:
<dl>
<dt>Protocol</dt>
<dd><p>The name of the appropriate JDBC sub-protocol.
    This is defined by the JDBC driver that you are using, and is
    for instance "<code>mysql</code>" for MySQL's Connector/J driver
    or "<code>postgresql</code>" for PostgreSQL's JDBC driver.
    </p></dd>

<dt>Host</dt>
<dd><p>The hostname of the machine on which the database resides
    (may be "<code>localhost</code>" if the database is local).
    </p></dd>

<dt>Database name</dt>
<dd><p>The name of the database.
    </p></dd>

<dt>New table name</dt>
<dd><p>The name of a new table to write into the given database.
    Subject to user privileges,
    this will overwrite any existing table in the database which has the
    same name, so should be used with care.
    </p></dd>

<dt>User name</dt>
<dd><p>The username under which you wish to access the database.
    This is not strictly necessary if there is no access control for
    the database in question.
    </p></dd>

<dt>Password</dt>
<dd><p>The password for the given username.  Again, whether this is
    necessary depends on the access policy of the database.
    </p></dd>
</dl>
</p>

<p>There are a number of criteria which must be satisfied for SQL
access to work within TOPCAT (installation of appropriate drivers
and so on) - see the section on 
<ref id="jdbcConfig" plaintextref="yes">JDBC configuration</ref>.
If you don't take these steps, this dialogue may be inaccessible.
</p>

</subsubsect>

</subsect>

<subsect id="ConcatWindow">
<subhead><title>Concatenation Window</title></subhead>

<figure>
<caption><px>Concatenation Window</px></caption>
<figureimage src="&FIG.ConcatWindow;"/>
</figure>

<p>The Concatenation Window allows you to join two tables together
top-to-bottom.  It can be obtained using the 
<label>Concatenate Tables</label> button (&IMG.CONCAT;) in the
<ref id="ControlWindow">Control Window</ref> toolbar or Joins menu.
</p>

<p>When two windows are concatenated
all the rows of the first ("base") table are followed by all
the rows of the second ("appended") table.  The result is a new
table which has a number of rows equal to the sum of the two it has
been made from.  
The columns in the resulting table are the same as those of the base table.
To perform the concatenation, you have to specify which columns from the
appended table correspond to which ones in the base table.  Of course,
this sort of operation only makes sense if at least some of the columns in
both tables have the same meaning.
This process is discussed in more detail in <ref id="concat"/>.
</p>

<p>The concatenation window allows you to select the base and appended
tables, and for each column in the base table to specify which column
in the appended table corresponds to it.  You may select a blank for
this, in which case the column in question will have all null entries
in the resulting table.
In some cases these column selectors may have a value filled in
automatically if the program thinks it can guess appropriate ones,
but you should ensure that it has guessed correctly in this case.
Only suitable columns are available for choosing from these column
selectors; in most cases this means numeric ones.
</p>

<p>When you have filled in the fields to your satisfaction, hit
the <label>Concatenate</label> button at the bottom of the window,
and a new table will be created and added to the table list
in the <ref id="ControlWindow">Control Window</ref> 
(a popup window will inform you this has happened).
</p>

<p>The result is created from the 
<ref id="apparent" plaintextref="yes">Apparent</ref>
versions of the base and appended tables, so that any row subsets,
hidden columns, or sorts currently in force will be reflected in the
output.
</p>

</subsect>

<subsect id="MatchWindow">
<subhead><title>Pair Match Window</title></subhead>

<figure>
<caption><px>Pair Match Window</px></caption>
<figureimage src="&FIG.MatchWindow;"/>
</figure>

<p>The Pair Match Window allows you to join two tables together
side-by-side, aligning rows by matching values in some of their
columns between the tables.  It can be obtained using the
<label>Pair Match</label> (&IMG.MATCH2;) button in the 
<ref id="ControlWindow">Control Window</ref> toolbar or 
<label>Joins</label> menu.
</p>

<p>In a typical scenario you might have two tables each representing
a catalogue of astronomical objects, and you want a
third table with one row for each object which has an entry in both
of the original tables.  An object is defined as being the same one
in both tables if the co-ordinates in both rows are "similar",
for instance if the
difference between the positions indicated by RA and Dec columns
differ by no more than a specified angle on the sky.
Matching rows to produce the join requires you to specify the criteria
for rows in both tables to refer to the same object and
what to do when one is found - the options are discussed in
more detail in <ref id="pairMatch"/>.
</p>

<p>The result is created from the <ref id="apparent">Apparent</ref>
versions of the tables being joined, so that any row subsets,
hidden columns, or sorts currently in force will be reflected in the
output.
Progress information on the match, which may take some time,
is provided in the logging window and by a progress bar at the bottom
of the window.  When it is completed, you will be informed by a
popup window which indicates that a new table has been created.
This table will be added to the list in the Control Window and can
be examined, manipulated and saved like any other.
In some cases, some additional columns will be added to the 
output table which give you more information about how it
has progressed (see <ref id="matchRowSelect"/>.
</p>

<p>The Match Window provides a set of controls which allow you
to choose how the match is done and what the results will look like.
It consists of these main parts:
<dl>

<dt><ref id="matchCriteria">Match Criteria box</ref></dt>
<dd><p>Allows you to define what counts as a match between two rows.
    </p></dd>

<dt><ref id="matchColumnSelect">Column Selection boxes</ref></dt>
<dd><p>Allows you to select which tables are to be joined and which 
    columns in them supply the matching coordinates.
    </p></dd>

<dt><ref id="matchRowSelect">Output Rows selector</ref></dt>
<dd><p>Allows selection of which rows are to be included in the output
    table (for instance whether only those rows matching in both tables
    should be output or not).
    </p></dd>

<dt>Log window</dt>
<dd><p>Reports on progress as the match is taking place.  The progress bar
    at the bottom of the window also provides an indication of how
    far through each stage processing has got.
    </p></dd>

<dt>Control buttons</dt>
<dd><p>The <label>Go</label> button starts the search when you are
    happy with the selections that you have made, and the
    <label>Stop</label> button interrupts it midway if you decide
    you no longer want the results (closing the Match Window also
    interrupts the calculation).
    </p></dd>

</dl>
</p>

<p>The following sections describe some of these components in more detail.
</p>

<subsubsect id="matchCriteria">
<subhead><title>Match Criteria</title></subhead>

<p>The match criteria box allows you to specify what counts as a match
between two rows.  The selection you make in this box will determine
which columns you have to fill in for the table(s) being matched
in the rest of the window.  In most cases what you are selecting here
is the coordinate space in which rows will be compared against each other,
and a numerical value or values to determine how close two rows have to be
in terms of a metric on that space to count as a match.
</p>

<p>The following match types are offered:
<dl>

<dt>Sky</dt>
<dd><p>Comparison of positions on the celestial sphere.
    In this case you will need to specify columns giving
    Right Ascension and Declination
    for each table participating in the match.
    The Max Error value you must fill in is the 
    maximum separation of matched points around a great circle.
    </p></dd>

<dt>Sky with Errors</dt>
<dd><p>The matching is like that for the <label>Sky</label> option above,
    but an error radius (positional uncertainty) can be given for each
    row in the input tables, rather than just a single value for the whole
    match.
    You need to specify a single Max Error value, which gives the
    global maximum separation applying to all matches, and for each
    of the input tables, along with the Right Ascension and 
    Declination columns, you also specify an Error column
    which gives the error radius corresponding to that position.
    Two rows are considered to match when the separation between the
    two RA,Dec positions is smaller than <em>both</em> the 
    Max Error value <em>and</em> the sum of the two
    Error values for the corresponding rows.
    If either of the per-row Error values is blank, then any separation
    up to the Max Error is considered to match.
    According to these rules, you might decide to set the Max Error
    to an arbitarily large number so that only the sum of per-row Errors
    will determine the actual match criteria.  
    However please <em>don't</em> do this, since the Max Error also 
    functions as a tuning parameter for the matching algorithm,
    and ought to be reasonably close to the actual maximum acceptable
    separation - 
    if necessary use the <ref id="StatsWindow">Statistics Window</ref>
    to determine the actual maximum uncertainty.
    </p></dd>

<dt>Sky 3D</dt>
<dd><p>Comparison of positions in the sky taking account of 
    distance from the observer.
    In this case you will need to specify columns giving
    Right Ascension and Declination in angular units, 
    as well as distance along the line of sight in arbitrary units
    for each table participating in the match.
    The Error value is a maximum separation in Cartesian space 
    of matched points in the same units as the radial distance.
    </p></dd>

<dt>Exact Value</dt>
<dd><p>Requires exact matching of values.
    In this case you will need to specify the column containing the match key
    for each table participating in the match;
    this might typically be an object name or index number.
    Two rows count as matching if they have exactly the same entry in
    the specified field, except rows with a null value in that column,
    which don't match any other row.
    </p></dd>

<dt>N-dimensional Cartesian</dt>
<dd><p>Comparison of positions in an isotropic N-dimensional Cartesian space.
    In this case you will need to specify N columns giving
    coordinates for each table participating in the match.
    The Error value is the maximum spatial separation of matched points.
    Currently the highest dimensionality you can select is 3-d -
    does anyone want a higher number?
    </p></dd>

<dt>N-dimensional Cartesian (anisotropic)</dt>
<dd><p>Comparison of positions in an N-dimensional Cartesian space
    with an anisotropic metric.
    In this case you will need to specify N columns giving coordinates
    for each table participating in the match,
    and an error radius for each of these dimensions.
    Points P1 and P2 are considered to match if P2 falls within
    the ellipsoid defined by the error radii centered on P1.
    This kind of match will typically be used for non-'spatial' spaces,
    for instance (magnitude,redshift) space, in which the metrics in 
    different dimensions are not related to each other.
    Currently the highest dimensionality you can select is 4-d -
    does anyone want a higher number?
    </p></dd>

<dt>Sky + X</dt>
<dd><p>Comparison of positions on the celestial sphere with an additional
    numeric constraint.
    This is a combination of the Sky and 
    1-d Cartesian matches above, so the columns you need
    to supply are RA, Dec and one extra, and the errors are 
    angular separation on the sky and the error in the extra column.
    A match is registered if it matches in both of the constituent tests.
    You could use this for instance to match objects which are both close
    on the sky and have similar luminosities.
    </p></dd>

<dt>Sky + XY</dt>
<dd><p>Comparison of positions on the celestial sphere with an additional
    2-d anisotropic Cartesian constraint.
    This is a combination of the Sky and 2-d Anisotropic Cartesian
    matches above, so the columns you need to supply are
    RA, Dec and two extra, and the errors are 
    angular separation on the sky and the error radii corresponding to
    the extra columns.
    A match is registered if it matches in both of the constituent tests.
    You could use this for instance to match objects which are both close
    on the sky and have similar luminosities and redshifts.
    </p></dd>

<dt>HTM</dt>
<dd><p>Performs sky matching in just the same way as the <label>Sky</label>
    option above, but using a different algorithm (pixelisation of the
    celestial sphere is performed using the Hierarchical Triangular Mesh
    rather than the HEALPix scheme).  The results in both cases 
    should be identical, but HTM is much slower.  Hence, this option
    is only useful for debugging.  It may be withdrawn in future releases.
    </p></dd>

</dl>
</p>

<p>Depending on the match type, the units of the error value(s) you enter
may be significant.  In this case, there will be a unit selector
displayed alongside the entry box.  You must choose units which 
are correct for the number you enter.
</p>

</subsubsect>

<subsubsect id="matchColumnSelect">
<subhead><title>Column Selection Boxes</title></subhead>

<p>The column selection boxes allow you to select which of the
columns in the input tables will provide the data
(the coordinates which have to match).
For each table you must select the names of the required columns;
the ones you need to select will depend on the 
<ref id="matchCriteria">match criteria</ref> you have chosen.
</p>

<p>For some columns, such as Right Ascension and Declination in sky matches,
units are important for the columns you select.
In this case, there will be a selector box for the units alongside
the selector box for the column itself.  You must ensure that the
correct units have been selected, or the results of the match will be 
rubbish.
</p>

<p>In some cases these column and/or unit selectors may have a value filled in
automatically (if the program thinks it can guess appropriate ones)
but you should ensure that it has guessed correctly in this case.
Only suitable columns are available for choosing from these column
selectors; in most cases this means numeric ones.
</p>

</subsubsect>

<subsubsect id="matchRowSelect">
<subhead><title>Output Rows Selector Box</title></subhead>

<p>When the match is complete a new table will be created which 
contains rows determined by the matches which have taken place.
The Output Rows selector box allows you to choose on what 
basis the rows will be included in the output table as a function
of the matches that were found.
</p>

<p>In all cases each row will refer to only one matched
(or possibly unmatched) "object", so that any non-blank columns
in a given row refer come from only rows in the input tables
which match according to the specified <ref id="matchCriteria">criteria</ref>.
However, you have two (somewhat interlinked) choices to make
about which rows are produced.
</p>

<p>The <label>Match Selection</label> selector allows you to choose
what happens when a given row in one table can be matched by 
more than one row in the other table.  There are two choices:
<dl>
<dt>Best Match Only</dt>
<dd><p>Only the best match is chosen, and the other correct but inferior
    matches are ignored.  The best match is usually the "closest" - it
    is the one with the lowest match score, where the definition of this
    score is determined by the match criteria you have selected.
    </p></dd>

<dt>All Matches</dt>
<dd><p>Any pairs which meet the match criteria are retained in
    the output table.
    This means that you may have data from some of the same input rows
    appearing more than once in the output.
    </p></dd>
</dl>
</p>

<p>The <label>Join Type</label> selector allows you to choose what
output rows result from a match in the input tables.
<dl>
<dt>1 and 2</dt>
<dd><p>The output table contains only rows which have an entry from 
    both of the input tables, so that every output row represents an
    actual matched pair.
    </p></dd>

<dt>All from 1</dt>
<dd><p>All of the matched rows are present in the output as for
    <label>1 and 2</label>, but additionally the unmatched rows from
    the first table are present with the columns from the second
    table blank.
    </p></dd>

<dt>All from 2</dt>
<dd><p>As for <label>All from 1</label> but the other way round.
    </p></dd>

<dt>1 or 2</dt>
<dd><p>Every row, matched and unmatched, from both of the input 
    tables appears in the output.
    This is the union of rows from <label>All from 1</label> and
    <label>All from 2</label>.
    </p></dd>

<dt>1 not 2</dt>
<dd><p>This presents all the rows in the first table which
    do <em>not</em> have matches in the second table.
    Consequently, it only contains columns from the first table, since
    all the entries from the second one would be blank in any case.
    </p></dd>

<dt>2 not 1</dt>
<dd><p>The same as <label>1 not 2</label> but the other way round.
    </p></dd>

<dt>1 xor 2</dt>
<dd><p>The "exclusive or" of the match - the output only contains 
    rows from the first table which don't have matches in the second
    table and vice versa.  It is the union of <label>1 not 2</label>
    and <label>2 not 1</label>.
    </p></dd>
    
</dl>
</p>

<p>In most cases (all the above except for <label>1 not 2</label> and
<label>2 not 1</label>, the set of columns in the output table contains
all the columns from the first table followed by all the columns
from the second table.  If this causes a clash of column names,
offending columns will be renamed with a trailing "<code>_1</code>" or 
"<code>_2</code>".
Depending on the details of the match however,
some additional useful columns may be added:
<dl>
<dt>Match Score</dt>
<dd><p>For rows that represent a match, a numeric value representing
    how good the match was will usually be present.  This is typically
    a separation in real or notional space - for instance for a 
    <label>Sky</label> match it is the distance between the two matched
    celestial positions in arcseconds along a great circle.  It will
    always be greater than or equal to zero, and a smaller value 
    represents a better match.  The name and exact meaning of this
    column depends on the match criteria - examine its description 
    in the <ref id="ColumnInfoWindow">Columns Window</ref> for details.
    </p></dd>

<dt>GroupSize, GroupID</dt>
<dd><p>If you choose the <label>All Matches</label> option and some of
    the rows match more than once, two columns named 
    <label>GroupID</label> and <label>GroupSize</label> will be added.
    These allow you to identify which matches are multiple.
    In the case of rows which represent a unique match, they are blank.
    But for rows which represent a set of multiple matches, the 
    GroupSize value tells you how many rows participate in this match,
    and the GroupID value is an integer which is the same for 
    all the rows which participate in the same match.
    So if you do a sort on the GroupID value, you'll see all the rows
    in the first non-unique match group together,
    followed by all the rows in the second non-unique group...
    and after them all the unique matches.
    </p></dd>

</dl>
</p>

<p>Here is an example.  If your input tables are these:
<verbatim>
      X          Y         Vmag
      -          -         ----
   1134.822    599.247     13.8
    659.68    1046.874     17.2
    909.613    543.293      9.3
</verbatim>
and
<verbatim>
     X           Y         Bmag
     -           -         ---- 
   909.523     543.800     10.1
   1832.114    409.567     12.3
   1135.201    600.100     14.6
    702.622   1004.972     19.0
</verbatim>
then a Cartesian match of the two sets of X and Y values with an error of 1.0
using the <label>1 and 2</label> option would give you a result like this:
<verbatim>
     X_1       Y_1         Vmag    X_2        Y_2         Bmag    Separation
     ---       ---         ----    ---        ---         ----    ----------
   1134.822    599.247     13.8   1135.201    600.100     14.6     0.933
    909.613    543.293      9.3    909.523    543.800     10.1     0.515
</verbatim>
using <label>All from 1</label> would give you this:
<verbatim>
     X_1       Y_1         Vmag    X_2        Y_2         Bmag    Separation
     ---       ---         ----    ---        ---         ----    ----------
   1134.822    599.247     13.8    1135.201   600.100     14.6     0.933
    659.68    1046.874     17.2
    909.613    543.293      9.3     909.523   543.800     10.1     0.515
</verbatim>
and <label>1 not 2</label> would give you this:
<verbatim>
     X         Y           Vmag
     -         -           ----
    659.68    1046.874     17.2
</verbatim>
</p>

</subsubsect>

</subsect>


<subsect id="MatchWindow1">
<subhead><title>Internal Match Window</title></subhead>

<figure>
<caption><px>Internal Match Window</px></caption>
<figureimage src="&FIG.MatchWindow1;"/>
</figure>

<p>The Internal Match Window allows you to perform matching between
rows of the same table, grouping rows that have the same or similar 
values in specified columns and producing a new table as a result.
It can be obtained by using the <label>Internal Match</label>
(&IMG.MATCH1;) button in the <ref id="ControlWindow">Control Window</ref>
toolbar or <label>Joins</label> menu.
</p>

<p>You might want to use this functionality to remove all rows which
refer to the same object from an object catalogue, 
or to ensure that only one entry exists for each object,
or to identify groups of several "nearby" objects in some way.
</p>

<p>The result is created from the <ref id="apparent">Apparent</ref>
versions of the tables being joined, so that any row subsets,
hidden columns, or sorts currently in force will be reflected in the
output.
Progress information on the match, which may take some time,
is provided in the logging window and by a progress bar at the bottom
of the window.  When it is completed, you will be informed by a
popup window which indicates that a new table has been created.
This table will be added to the list in the Control Window and can
be examined, manipulated and saved like any other.
</p>

<p>The window has the following parts:
<dl>

<dt><ref id="matchCriteria">Match Criteria box</ref></dt>
<dd><p>Allows you to define what counts as a match between two rows
    (the same as for pair matching).
    </p></dd>

<dt><ref id="matchColumnSelect">Column Selection box</ref></dt>
<dd><p>Allows you to select which table to operate on and which columns
    supply the matching coordinates
    (the same as for pair matching).
    </p></dd>

<dt><ref id="matchInternalAction">Match Action box</ref></dt>
<dd><p>Allows you to select what will be done (what new table will be
    created) when the matching groups of rows have been identified.
    </p></dd>

<dt>Log Window</dt>
<dd><p>Displays progress as the match is taking place.  The progress bar
    at the bottom of the window also provides an indication of how
    far through each stage processing has got.
    </p></dd>

<dt>Control buttons</dt>
<dd><p>The <label>Go</label> button starts the search when you are
    happy with the selections that you have made, and the
    <label>Stop</label> button interrupts it midway if you decide
    you no longer want the results (closing the Match Window also
    interrupts the calculation).
    </p></dd>

</dl>
</p>

<subsubsect id="matchInternalAction">
<subhead><title>Internal Match Action box</title></subhead>

<p>The Internal Match Action box gives a list of options for what
will happen when an internal match calculation has completed.
In each case a new table will be
created as a result of the match.  The options for what it will look like
are these:
<dl>

<dt>Mark Groups of Rows</dt>
<dd><p>The result is a table the same as the input table but with two
    additional columns: <label>GroupID</label> and <label>GroupSize</label>.
    Each group of rows which matched is assigned a unique integer,
    recorded in the GroupId column, and the size of each group is
    recorded in the GroupSize column.
    Rows which don't match any others (singles) have null values in
    both these columns.
    So for example by sorting the resulting table
    on GroupID you can group rows that match next to each other;
    or by sorting on GroupSize you can see all the pairs, followed by
    all the triples, ...
    </p>
    <p>You can use this information in other ways, for instance if you
    create a new <ref id="subsets">Row Subset</ref> using the expression
    "<code>GroupSize == 5</code>" you could select only those
    rows which form part of 5-object clusters.
    </p></dd>

<dt>Eliminate All Grouped Rows</dt>
<dd><p>The result is a new table containing only "single" rows, that is
    ones which don't match any other rows in the table according to the
    match criteria.  Any rows which match are thrown out.
    </p></dd>

<dt>Eliminate All But First of Each Group</dt>
<dd><p>The result is a new table in which only one row (the first in the
    input table order) from each group of matching ones is retained.
    A subsequent internal match with the same criteria would therefore
    show no matches.
    </p></dd>

<dt>New Table With Groups of Size N</dt>
<dd><p>The result is a new "wide" table consisting of matched rows in
    the input table stacked next to each other.
    Only groups of exactly N rows in the input table are used to
    form the output table; each row of the output table consists of
    the columns of the first group member, followed by the columns of
    the second group member and so on.  The output table therefore has
    N times as many columns as the input table.
    The column names in the new table have "_1", "_2", ...
    appended to them to avoid duplication.
    </p></dd>

</dl>
</p>

</subsubsect>

</subsect>

<subsect id="ActivationQueryWindow">
<subhead><title>Activation Window</title></subhead>

<figure>
<caption><px>Activation Window</px></caption>
<figureimage src="&FIG.ActivationQueryWindow;"/>
</figure>

<p>The Activation Window allows you to configure an action to perform
when a table row is <ref plaintextref="yes" id="activation">activated</ref>
by clicking on a row in the Data Window or a point in the Plot Window.
It can be obtained by clicking the <label>Activation Action</label>
selector at the bottom of the properties panel in the Control Window.
</p>

<p>You have various options for how to define the action.
On the left of the window is a list of options; you have to choose
one of these to determine what kind of action will take place.
When you click on one of these options the corresponding 
controls on the right hand side will become enabled:
use these to select the details of the action and then 
click the <label>OK</label> button so that subsequent 
activation events will cause the action you have defined
(or <label>Cancel</label> so that they won't).
When you click OK the <label>Activation Action</label>
in the control window will indicate the action you have configured.
</p>

<p>The available options are as follows:
<dl>

<dt>No Action</dt>
<dd><p>If this is selected, no special action will take place when a 
    row is activated.  This is the default.
    </p></dd>

<dt>Display Cutout Image</dt>
<dd><p>This option presents an easy-to-use way of popping up a
    cutout image from an image server displaying a region of sky
    around an activated row.
    You need to select the columns in your table which 
    represent Right Ascension and Declination, including the units 
    in which they are entered in the table (TOPCAT may be able to
    guess some or all of this information based on column names, UCDs
    and unit values, in which case it will enter its guesses in the
    selectors for you to accept or change).
    You also need to select the size in pixels of the image you want 
    to see and the name of the survey which will supply the image 
    from one of the listed ones:
    <ul>
    <li>SuperCOSMOS All-Sky Blue</li>
    <li>SuperCOSMOS All-Sky Red</li>
    <li>SDSS Colour Images (note does not provide all-sky coverage)</li>
    </ul>
    When you activate the row, the program will attempt to contact the
    web server which provides these images, retrieve the image, and
    display it in an image viewer window.
    </p></dd>

<dt>View URL as Image</dt>
<dd><p>This option is suitable if one of the columns in your table 
    gives the location (filename or URL) of an image file.
    The image may be in FITS, GIF, JPEG or PNG format, optionally 
    compressed using gzip, Unix compress, or bzip2 format.
    Select the column which contains the location, and activating a 
    row will pop up an image viewer to display it.
    See <ref id="imageViewers"/> for more information about image viewers.
    </p></dd>

<dt>View URL as Spectrum</dt>
<dd><p>This option is suitable if one of the columns in your table
    gives the location (filename or URL) of a spectrum file.
    The spectrum may be in FITS or text format, optionally compressed.
    Select the column which contains the location, and activating a
    row will try to pop up a spectrum viewer to display it.
    Note this may not be possible if some components are not installed -
    see <ref id="spectrumViewers"/> for information about spectrum viewers.
    </p></dd>

<dt>View URL as Web Page</dt>
<dd><p>This option is suitable if one of the columns in your table
    gives the location (filename or URL) of a web page; this should
    normally be in HTML or plain text, but depending on what browser
    you use other kinds of document may be supported.
    Select the column which contains the location and the browser
    which you would like to use for display, and activating a row
    will try to pop up a browser window to display it.
    See <ref id="documentViewers"/> for more information about browsers.
    </p></dd>

<dt>Execute Custom Code</dt>
<dd><p>This option must be used if none of the others 
    (which are fairly restrictive) do what you want.
    It is highly flexible, but not so easy to use.
    What you have to do is to write an expression following the rules
    in <ref id="jel"/> involving some
    of the column names which will be invoked when a row is activated.
    This expression will typically have the effect of popping up
    an image or a spectrum in a viewer,
    but, especially if you link in your own functions 
    (see <ref id="jelExtend"/>) it can do pretty much anything.
    </p>
    <p>Functions which are expected to be useful for activation actions
    are described in <ref id="activationJel"/> and include some
    general-purpose ones 
    (<code>displayImage</code> and <code>displaySpectrum</code> to display
    an image or spectrum in an external viewer) as well as a few 
    which are relevant to particular survey data, for instance the
    <code>spectra2QZ()</code> function, which will pop up a spectrum
    viewer displaying all the spectra related to a given row of 2QZ
    survey data based on the contents of its NAME column.
    </p></dd>

</dl>
</p>

<p>As the above list shows, most of the activation actions you can
define result in a viewer window of some kind popping up.
Exactly what kind of viewer is used depends on how TOPCAT is set up
and in some cases on your choices.  More details of the viewer
programs available are given in the following subsections.
If these don't do what you want, you can use the 
<label>Execute Custom Code</label> option, perhaps in conjunction with
<ref id="jelExtend">user-defined</ref> functions or the 
<code>System</code> <code>exec()</code> functions
described in <ref id="activationJel"/>, to invoke your own.
</p>

<subsubsect id="imageViewers">
<subhead><title>Image Viewer Applications</title></subhead>

<p>If you choose the <label>Display Cutout Image</label> or
<label>View URL as Image</label> option in the 
<ref id="ActivationQueryWindow">Activation Window</ref>,
then activating a row will display an image in an image viewer.
</p>

<p>The default image viewer is 
<webref plaintextref="yes" url="http://www.starlink.ac.uk/sog/">SoG</webref>,
an astronomical image viewer based on JSky, which offers 
colourmap manipulation, image zooming, graphics overlays, and other features.
For this to work JAI, otherwise known as
<webref plaintextref="yes" url="http://java.sun.com/products/java-media/jai/"
        >Java Advanced Imaging</webref> must be installed.
JAI is a free component available from Sun, but not a part of the Java 2
Standard Edition by default.  In operation, SoG looks like this:
</p>

<figure>
<caption><px>SoG Image Viewer</px></caption>
<figureimage src="&FIG.SoG;"/>
</figure>

<p>If JAI or the SoG classes themselves are absent, a fallback viewer
which just displays the given image in a basic graphics window 
with no manipulation facilities is used.
The fallback image viewer looks like this:
</p>

<figure>
<caption><px>Fallback Image Viewer</px></caption>
<figureimage src="&FIG.ImageWindow;"/>
</figure>

</subsubsect>

<subsubsect id="spectrumViewers">
<subhead><title>Spectrum Viewers</title></subhead>

<p>If you choose the <label>View URL as Spectrum</label> option in
the <ref id="ActivationQueryWindow">Activation Window</ref>,
then activating a row will display a spectrum in a spectrum viewer.
</p>

<p>The default spectrum viewer is 
<webref plaintextref="yes" url="http://www.starlink.ac.uk/splat/"
        >SPLAT</webref>,
a sophisticated multi-spectrum analysis program.
This requires the presence of a component named JNIAST, which may
or may not have been installed with TOPCAT (it depends on some
non-Java, i.e. platform-specific code).  
There is currently no fallback spectrum viewer, so if JNIAST is 
not present, then spectra cannot be displayed. 
In this case it will not be possible to select the
<label>Display Named Spectrum</label> item in the 
Activation Window.
An example of SPLAT display of multiple spectra is shown below.
</p>

<figure>
<caption><px>SPLAT Spectrum Viewer</px></caption>
<figureimage src="&FIG.Splat;"/>
</figure>

<p>Full documentation for SPLAT is available on-line within the program,
or in <docxref doc="sun243"/>.
</p>

</subsubsect>

<subsubsect id="documentViewers">
<subhead><title>Web Browsers</title></subhead>

<p>If you choose the <label>View URL as Web Page</label> option in
the <label>Activation Window</label>,
then activating a row will display the web page whose URL 
is in one of the columns in a web browser.
You are given the option of what browser you would like to use in this case.
</p>

<p>The default <label>basic browser</label> option uses a simple
browser which can view HTML or plain text pages and has forward and
back buttons which work as you'd expect.  In many cases this is fine
for viewing HTML pages, and it is available regardless of the system
that you are running TOPCAT on.  It looks like this:
</p>

<figure>
<caption><px>Basic HTML browser</px></caption>
<figureimage src="&FIG.HtmlWindow;"/>
</figure>

<p>In some circumstances, it's possible to use your normal web browser
for web page display instead.  
The list of browsers currently includes Firefox, Mozilla
and Netscape as well as the basic one.  Selecting these will generally
only work if (1) the browser you select is installed and on your path, 
(2) you're on some Unix-like operating system,
(3) the browser is already running when the action is invoked.
In this case, the selected URL should be displayed in an existing
browser window rather than opening a new one.
Doing it this way has the advantage that your browser can probably 
display many types of document (perhaps using plugins) as well as HTML.
</p>

</subsubsect>

</subsect>

<subsect id="HelpWindow">
<subhead><title>Help Window</title></subhead>

<figure>
<caption><px>Help Window</px></caption>
<figureimage src="&FIG.HelpWindow;"/>
</figure>

<p>The help window is a browser for displaying help information on TOPCAT.
It views the text contained in this document, so it may be what you are
looking at now.
The panel on the left hand side gives a hierarchical
view of the available help topics, and the panel on the right hand
side displays the help text itself.  The bar in between the two
can be dragged with the mouse to affect the relative sizes of
these windows.
</p>

<p>The toolbar contains these extra buttons:
<dl>
<dt>&IMG.BACKWARD; Back</dt>
<dd><p>Moves backward through the list of topics in the order you have
    looked at them.
    </p></dd>

<dt>&IMG.FORWARD; Forward</dt>
<dd><p>Moves forward through the list of topics in the order you have
    looked at them.
    </p></dd>

<dt>&IMG.PRINT; Print</dt>
<dd><p>Pops up a dialogue to permit printing of the current page to a
    file or printer (but see below).
    </p></dd>

<dt>&IMG.PAGE_SETUP; Page Setup</dt>
<dd><p>Pops up a dialogue to do printer setup.
    </p></dd>
</dl>
</p>

<p>Although the printing buttons work, if you want to print out the
whole of this document rather than just a few sections you may be better off
printing the PDF version, 
or printing the single-page HTML version through a web browser.
The most recent version of these should be available
on the web at
<webref url="http://www.starlink.ac.uk/topcat/sun253/sun253.html"/> and
<webref url="http://www.starlink.ac.uk/topcat/sun253.pdf"/>;
you can also find the HTML version in the topcat jar file at
<code>uk/ac/starlink/topcat/help/sun253.html</code>
or, if you have a full TOPCAT installation, in 
<code>docs/topcat/sun253/sun253.html</code> and
<code>docs/topcat/sun253.pdf</code>
(the single-page HTML version is available 
<webref url="sun253.html">here</webref> in the HTML version).
</p>

<p>The help browser is an HTML browser and some of the hyperlinks in
the help document point to locations outside of the help document
itself.  Selecting these links will go to the external documents.
When the viewer is displaying an external document, its URL will
be displayed in a line at the bottom of the window.  You can cut
and paste from this using your platform's usual mechanisms for this.
</p>

</subsect>

<subsect id="ParameterQueryWindow">
<subhead><title>New Parameter Window</title></subhead>

<figure>
<caption><px>New Parameter dialogue window</px></caption>
<figureimage src="&FIG.ParameterQueryWindow;"/>
</figure>

<p>The New Parameter window allows you to enter a new table parameter
to be added to a table.
It can be obtained by clicking the <label>New Parameter</label> (&IMG.ADD;)
button in the <ref id="ParameterWindow"/>.
A parameter is simply a fixed value attached to a table and can contain
information which is a string, a scalar, an array... in fact exactly
the same sorts of values which can appear in table cells.
</p>

<p>The window is pretty straightforward to use: fill in the fields
and click <label>OK</label> to complete the addition.
The <label>Type</label> selector allows you to select what kind of
value you have input.  The only compulsory field is
<label>Parameter Name</label>; any of the others may be left blank,
though you will usually want to fill in at least the <label>Value</label>
field as well.  Often, the parameter will have a string value, 
in which case the <label>Units</label> field is not very relevant.
</p>

</subsect>


<subsect id="SyntheticColumnQueryWindow">
<subhead><title>Synthetic Column Window</title></subhead>

<figure>
<caption><px>Synthetic Column dialogue window</px></caption>
<figureimage src="&FIG.SyntheticColumnQueryWindow;"/>
</figure>

<p>The Synthetic Column Window allows you to define a new "Synthetic" column,
that is one whose values are defined using an algebraic expression 
based on the values of other columns in the same row.
The idea is that the value of the cells in a given row in this column
will be calculated on demand as a function of the values of cells
of other columns in that row.  You can think of this as providing
functionality like that of a column-oriented spreadsheet.
You can activate the dialogue using the 
<label>Add Column</label> (&IMG.ADD;) or
<label>Replace Column</label> (&IMG.MODIFY;) buttons in the
<ref id="ColumnInfoWindow">Columns Window</ref> or from the 
(right-click) popup menu in the <ref id="TableViewerWindow">Data Window</ref>.
</p>

<p>The window consists of a number of fields you must fill in to 
define the new column:
<dl>
<dt>Name</dt>
<dd><p>The name of the new column.  This should preferably be unique
    (different from all the other column names).  It will be easier to
    use it in <ref id="jel">algebraic expressions</ref> if it is also:
    <ul>
    <li>Different from other columns even apart from upper/lower case
        distinctions</li>
    <li>In the form of a java identifier (starts with a letter, continues
        with alphanumerics including underscore)</li>
    <li>Not too long</li>
    </ul>
    </p></dd>

<dt>Expression</dt>
<dd><p>This is the algebraic expression which defines the values that the
    cells in the new column of the table will have.  The rules for
    writing algebraic expressions are described in <ref id="jel"/>,
    and detailed documentation of the functions you can use can be 
    seen in the <ref id="MethodWindow">Available Functions Window</ref>,
    which you can see by clicking the <label>Show Functions</label>
    (&IMG.FUNCTION;) button on the toolbar.
    </p></dd>

<dt>Units</dt>
<dd><p>The units of the column.  If the quantity it represents is dimensionless
    or you don't know the units, this can be left blank.  It would be
    a good idea to use a similar format for the units to that used for
    the existing columns in the table.
    </p></dd>

<dt>Description</dt>
<dd><p>A short textual description of what the values contained by this
    column are.  May be left blank.
    </p></dd>

<dt>UCD</dt>
<dd><p>A <webref url="http://vizier.u-strasbg.fr/doc/UCD.htx"
                 >Unified Content Descriptor</webref>
    for the column; a UCD is a semantic label
    attached to the column indicating what kind of quantity it contains
    by picking one option from a list defined by the
    <webref url="http://cdsweb.u-strasbg.fr/">CDS</webref>.
    The list of known UCDs is available via a selection box, or you
    can type a UCD in by hand.  You may leave this blank if the you do not
    wish to assign a UCD to the column.
    A brief description of the UCD selected is visible below
    selection box itself.
    </p></dd>

<dt>Index</dt>
<dd><p>Determines the position in the displayed table at which the new
    column will initially appear.
    </p></dd>
</dl>
Of these, the <label>Expression</label> is the only one which must be
filled in.  
</p>

<p>Having filled in the form to your satisfaction, hit the
<label>OK</label> button at the bottom and the new column will be
added to the table.  If you have made some mistake in filling in 
the fields, a popup window will give you a message describing the
problem.  This message may be a bit arcane - try not to panic and
see if you can rephrase the expression in a way that the parser might
be happier with.  If you can't work out the problem, it's time to
consult your friendly local Java programmer (failing that, your
friendly local C programmer may be able to help) or, by all means,
contact the author.
</p>

<p>If you wish to add more metadata items you can edit the appropriate
cells in the <ref id="ColumnInfoWindow">Columns Window</ref>.
You can edit the expression of an existing synthetic column in the same way.
</p>

<p>Once created, a synthetic column is added to the
<ref id="apparent">Apparent Table</ref> and behaves just like any other;
it can be moved, hidden/revealed, used in expressions for other
synthetic columns and so on.
If the table is saved the new column and its contents will
be written to the new output table.
</p>

</subsect>


<subsect id="SyntheticSubsetQueryWindow">
<subhead><title>Algebraic Subset Window</title></subhead>

<figure>
<caption><px>Algebraic Subset dialogue window</px></caption>
<figureimage src="&FIG.SyntheticSubsetQueryWindow;"/>
</figure>

<p>The Algebraic Subset Window allows you to define a new 
<ref id="subsets">Row Subset</ref> which uses an algebraic expression
to define which rows are included.  The expression must be a 
boolean one, i.e. its value is either true or false for each row of
the table.
You can activate this dialogue using the
<label>Add Subset</label> button in the
<ref id="SubsetWindow">Subsets Window</ref>.
</p>

<p>The window consists of two fields which must be filled in to 
define the new subset:
<dl>

<dt>Subset Name</dt>
<dd><p>The name of the new subset.  This should preferably be unique
    (different from existing subset names).  It will be easier to
    use it in other expressions if it is also:
    <ul>
    <li>Different from other columns even apart from upper/lower case
        distinctions</li>
    <li>In the form of a java identifier (starts with a letter, continues
        with alphanumerics including underscore)</li>
    <li>Not too long</li>
    </ul>
    </p></dd>

<dt>Expression</dt>
<dd><p>This is a boolean expression which defines the subset;
    it is a function of the values of any combination of the columns;
    only rows for which it evaluates to true will be included in the subset.
    The values of the other columns in the same row are referenced
    using their names or &column.id.char;ID identifiers,
    and other subsets may be
    referenced using their names or &subset.id.char;ID identifiers.
    The rules for expression syntax are described in <ref id="jel"/>,
    and detailed documentation of the functions you can use can be 
    seen in the <ref id="MethodWindow">Available Functions Window</ref>,
    which you can see by clicking the <label>Show Functions</label>
    (&IMG.FUNCTION;) button on the toolbar.
    </p></dd>

</dl>
</p>

<p>Having filled in the form to your satisfaction, hit the
<label>OK</label> button at the bottom and the new subset will be
added to the list that can be seen in the 
<ref id="SubsetWindow">Subsets Window</ref> where it behaves like any other.
If you have made some mistake in filling in
the fields, a popup window will give you a message describing the
problem.
</p>


</subsect>

<subsect id="MethodWindow">
<subhead><title>Available Functions Window</title></subhead>

<figure>
<caption><px>Available Functions Window</px></caption>
<figureimage src="&FIG.MethodWindow;"/>
</figure>

<p>This window displays all the functions (Java methods) which are
available for use when writing 
<ref id="jel" plaintextref="yes">algebraic expressions</ref>.
This includes both the built-in expressions and any 
<ref id="jelExtend">extended ones</ref> you might have added.
You can find this window by using the 
<label>Show Functions</label> (&IMG.FUNCTION;) button in the
<ref id="SyntheticColumnQueryWindow">Synthetic Column</ref> or 
<ref id="SyntheticSubsetQueryWindow">Algebraic Subset</ref>
window toolbars.
</p>

<p>On the left hand side of the window is a tree-like representation
of the functions you can use.  Each item in this tree is one of the
following:
<dl>

<dt>&IMG.FOLDER_NODE; Folder</dt>
<dd><p>A group of classes.  There's only one of these, marked 
    "Activation Functions", and it contains functions which are only
    available for use in 
    <ref plaintextref="yes" id="activation">Activation Actions</ref>.
    When defining a new synthetic columns or algebraic subsets they
    are not used.
    </p></dd>

<dt>&IMG.LIBRARY_NODE; Class</dt>
<dd><p>A set of functions and/or constants; 
    it doesn't matter what class a function
    is in when you use it, but since the functions in a class are 
    usually related this makes it easier to find the one you're looking
    for in this window.
    </p></dd>

<dt>&IMG.FUNCTION_NODE; Function</dt>
<dd><p>A function that you can use in an expression.
    </p></dd>

<dt>&IMG.CONSTANT_NODE; Constant</dt>
<dd><p>A constant value which you can refer to by name in an expression
    (as long as it doesn't clash with a column name).
    </p></dd>

</dl>
</p>

<p>Of these, the Folder and Class items have a 'handle' (&IMG.COLLAPSED;),
which means that they contain other items 
(classes and functions/constants respectively).
By clicking on the handle (or equivalently double-clicking on the name)
you can toggle whether the item is open (so you can see its contents)
or closed (so you can't).  So to see the functions in a class,
click on its handle and they will be revealed.
</p>

<p>You can click on any of these items and information about it 
will appear in the right hand panel.  In the case of functions
this describes the function, its arguments, what it does, and
how to use it.  The explanations should be fairly self-explanatory;
for instance the description in the figure above indicates that
you could use the invocation <code>atan2(X_POS,Y_POS)</code> 
as the expression for a new table column which gives the angle from
the X axis of a point whose position is given by columns with 
the names X_POS and Y_POS.
Examples of a number of these functions are given in 
<ref id="jelExamples"/>.
</p>

<p>Using the Add button (&IMG.ADD;)
you can specify the name of a class to add to those available.
You should enter the fully-qualified class name (i.e. including the
dot-separated package path).  The class that you specify must be
on the class path which was current when TOPCAT was started,
as explained in <ref id="jvmClasspath"/>.
Note however it would be more usual to specify these using
the system property <code>jel.classes</code> or 
<code>jel.classes.activation</code> at startup,
as described in <ref id="jelExtend"/>.
Classes added in this way will be visible in the tree, but may 
not have proper documentation (clicking on them may not reveal
a description in the right hand panel).
</p>

</subsect>

<subsect id="LogWindow">
<subhead><title>Log Window</title></subhead>

<figure>
<caption><px>Log Window</px></caption>
<figureimage src="&FIG.LogWindow;"/>
</figure>

<p>The log window can be obtained using the <label>View Log</label>
option on the <label>File</label> menu of the 
<ref id="ControlWindow">Control Window</ref>.
</p>

<p>This window displays any log messages which the application has
generated.  Depending on whether the <code>-verbose</code> flag has
been specified, some or all of these messages may have been written
to console as well (if there is a console - this depends on how you
have invoked TOPCAT).  
Under some circumstances, messages way back in the list may not be
displayed.
</p>

<p>To clear the display of all the existing messages you can use
the <label>Clear Log</label> button (&IMG.CLEAR;).
</p>

<p>The messages displayed here are those written through Java's
<webref url="&URL.J2SE_DOCS;guide/util/logging/index.html"
        >logging system</webref>
- in general they are intended for 
debugging purposes and not for users to read, but if something 
unexpected is happening, or if you are filing a bug report, 
it may provide some clues about what's going on.
Although it tries not to disturb things too much, TOPCAT's 
manipulation of the logging infrastructure affects how it is 
set up, so if you have customised your logging setup using,
e.g., the <code>java.util.logging.config.*</code> system 
properties, you may find that it's not behaving exactly as
you expected.  Sorry.
</p>

</subsect>

</sect>

<sect id="release">
<subhead><title>Release Notes</title></subhead>

<p>This is TOPCAT, Tool for OPerations on Catalogues And Tables.
It is a general purpose viewer and editor for astronomical tabular
data developed within the UK
<webref url="http://www.starlink.ac.uk/">Starlink</webref> project.
<dl>
<dt>Author</dt>
<dd><p>Mark Taylor (Starlink, Bristol University)</p></dd>

<dt>Email</dt>
<dd><p><webref url="mailto:m.b.taylor@bristol.ac.uk"
                          >m.b.taylor@bristol.ac.uk</webref></p></dd>

<dt>WWW</dt>
<dd><p><webref url="http://www.starlink.ac.uk/topcat/"/></p></dd>
</dl>
User comments, suggestions, requests and bug reports to the above address
are welcomed.
</p>

<p>Related software products are
<dl>
<dt><webref url="http://www.starlink.ac.uk/stil/">STIL</webref></dt>
<dd><p>The Starlink Tables Infrastructure Library, which provides the
    table handling classes on which TOPCAT is based.
    </p></dd>

<dt><webref url="http://www.starlink.ac.uk/stilts/">STILTS</webref></dt>
<dd><p>The STIL Tool Set, which provides some command-line tools based
    on STIL.  The intention is that this should be a non-graphical
    counterpart to TOPCAT, providing many of the same facilities
    (matching, row selection, format conversion etc) but in a 
    form which can be incorporated into scripts, web services, etc.
    The current release only contains a few of these features however.
    </p></dd>
</dl>
</p>

<p>The Starlink project under which TOPCAT and friends have been 
developed has been shut down as of July 2005.
At the time of writing, this means that there is currently no
provision for continued support and development of the software.
The author is currently pursuing possibilities for further funding,
but it's not yet clear whether or how these will work out.
Probably at least a minimal level of support will continue to be
available, one way or another. 
The email address above may or may not continue to be active; 
check the 
<webref url="http://www.starlink.ac.uk/topcat/" plaintextref="yes"
        >TOPCAT</webref> web page for news in the future.
</p>

<subsect>
<subhead><title>Acknowledgements</title></subhead>

<p>Inspiration for many of TOPCAT's features has been taken from the
following pre-existing tools:
<ul>
<li><webref url="http://cm.bell-labs.com/who/tkh/mirage/index.html"
            >Mirage</webref>
    (Bell labs)</li>
<li><webref url="http://vo.iucaa.ernet.in/~voi/voplot.htm">VOPlot</webref>
    (VO-India)</li>
</ul>
</p>

<p>Apart from the excellent Java 2 Standard Edition itself, 
the following external libraries provide important parts of TOPCAT's
functionality:
<ul>
<li><webref url="http://galaxy.fzu.cz/JEL/">JEL</webref>
    (GNU) for algebraic expression evaluation</li>
<li><webref url="http://home.fnal.gov/~kuropat/HEALPIX/PixTools.html"
            >PixTools</webref>
    (Fermilab EAG) for HEALPix-based celestial sphere row matching</li>
<li><webref url="http://www.sdss.jhu.edu/htm/">HTM</webref>
    (Sloan Digital Sky Survey) for HTM-based celestial sphere row matching
    (now deprecated within TOPCAT)</li>
<li><webref url="http://ptolemy.eecs.berkeley.edu/java/ptplot5.2/ptolemy/plot/doc/index.htm">Ptplot</webref>
    (Ptolemy) for axis plotting</li>
<li><webref url="http://www.jibble.org/epsgraphics/">EPSGraphics2D</webref>
    (Jibble) for encapsulated postscript output</li>
<li><webref url="http://www.acme.com/java/software/Acme.JPM.Encoders.GifEncoder.html">GifEncoder</webref>
    (Acme) for GIF output</li>
<li><webref url="http://skyservice.pha.jhu.edu/develop/vo/ivoafits/"
            >IVOA FITS Package</webref>
    (Sloan Digital Sky Survey) for simple (non-SoG) display of FITS images</li>
<li><webref url="http://browserlauncher.sourceforge.net/"
            >BrowserLauncher</webref> for launching default web browser</li>
</ul>
</p>

<p>The following users, testers and programmers have supplied useful
comments (apologies for any missed out):
<ul>
<li>Malcolm Currie (Starlink, RAL)</li>
<li>David Giaretta (Starlink, RAL)</li>
<li>Clive Page (AstroGrid, Leicester)</li>
<li>Clive Davenhall (Royal Observatory Edinburgh)</li>
<li>Tim Jenness (JACH)</li>
<li>Mike Read (ROE)</li>
<li>Peter Draper (Starlink, Durham)</li>
<li>Alasdair Allan (Starlink, Exeter)</li>
<li>Roy Platon (RAL)</li>
<li>Norman Gray (Starlink, Glasgow)</li>
<li>Jonathan Irwin (Cambridge)</li>
<li>Mark Allen (Strasbourg)</li>
<li>Francois Ochsenbein (Strasbourg)</li>
<li>Mike Watson (ROE)</li>
<li>Bob Mann (Edinburgh/Strasbourg)</li>
<li>David Mills (Bristol)</li>
<li>Douglas Morgan (Bristol)</li>
<li>James Price (Bristol)</li>
</ul>
</p>

</subsect>

<subsect id="versions">
<subhead><title>Version History</title></subhead>

<p>Releases to date have been as follows:
<dl>

<dt>Version 0.3b (4 June 2003)</dt>
<dd><p>First public release
</p></dd>

<dt>Version 0.4b (8 July 2003)</dt>
<dd><p>
<ul>
<li>Row subset count column in subsets window.</li>
<li>Fixed and improved broken Parameter window.</li>
<li>Fixed output of table name and parameters.</li>
<li>Output to LaTeX <code>tabular</code> environment now available.</li>
<li>SQL access buttons now greyed out when no JDBC drivers are present.</li>
<li>UCD selection now available from New Synthetic Column dialogue.</li>
<li>Column metadata display made more logical and flexible.</li>
<li>Column cardinality now calculated in Stats window.</li>
<li>Sythetic column expressions and most other column metadata now
    editable.</li>
<li>Null value support in evaluated expressions.</li>
<li>Integral example data provided.</li>
<li>Hierarchical browser for tables available in load dialogue.</li>
</ul>
</p></dd>

<dt>Version 0.4-1b (10 July 2003)</dt>
<dd><p>
<ul>
<li>Fixed a VOTable output bug (not escaping XML special characters).</li>
<li>Fixed a serious FITS output bug.</li>
<li>Improved bad value handling for FITS tables.</li>
</ul>
</p></dd>

<dt>Version 0.5b (20 October 2003)</dt>
<dd><p>
<ul>
<li>Can now read plain text format tables.</li>
<li>FITS files of arbitrary size can now be read
    (they are not loaded into memory).</li>
<li>TOPCAT can now run without errors in a secure environment
    (e.g. as an unsigned jar file under WebStart).  Of course some actions
    such as Save Table are unavailable in this context.</li>
<li>Files compressed with Unix <code>compress</code> now work
    (as well as gzip and bzip2).</li>
<li>Added hierarchy browser to load dialog.</li>
<li>Added integral demo data (accessible from load dialog).</li>
<li>Can now drag tables from
    <webref url="http://www.starlink.ac.uk/treeview/">Treeview</webref>
    into TOPCAT load dialog (or load button).</li>
<li>Some bugfixes.</li>
</ul>
</p></dd>

<dt>Version 0.5-1 (18 November 2003)</dt>
<dd><p>
<ul>
<li>Rewrite of FITS binary table access for big efficiency improvements.</li>
<li>It's now possible to plug in user-defined algebraic methods at runtime.</li>
<li>Improved unit testing leads to some bugfixes.</li>
</ul>
</p></dd>

<dt>Version 1.1-0 (21 April 2004)</dt>
<dd><p>
<ul>
<li>User interface redesigned - now based around Control Window 
    not table browser (much easier to work with multiple tables).</li>
<li>Extensive facilities for table joining by matching rows between 
    multiple tables or within a single one.</li>
<li>Documentation much improved and available on- or off-line as 
    <docxref doc="sun253"/>.</li>
<li>Self-contained table access library 
    <webref url="http://www.starlink.ac.uk/stil/">STIL</webref> now provided
    as a separate product.</li>
<li>Tables can be concatenated.</li>
<li>Better top-level control over window proliferation.</li>
<li>Columns can now be hidden/revealed not just deleted.</li>
<li>Additional output formats/variants supported:
    <ul>
    <li>VOTable using BINARY or FITS encoding, inline or by reference</li>
    <li>Machine-readable plain ASCII stream</li>
    <li>HTML &lt;TABLE&gt; element or document</li>
    </ul>
</li>
<li>Hybrid DOM/SAX parsing of VOTables for improved efficiency/memory usage.</li>
<li>New flag <code>-demo</code> starts up with demo data.</li>
<li>Miscellaneous efficiency improvements and bug fixes.</li>
</ul>
</p></dd>

<dt>Version 1.1-3 (5 May 2004)</dt>
<dd><p>
<ul>
<li>Functions provided for radians&lt;-&gt;sexagesimal conversion</li>
</ul>
</p></dd>

<dt>Version 1.3 (20 October 2004)</dt>
<dd><p>This version has introduced many improvements in scalability,
efficiency and functionality.  TOPCAT is now quite happy with tables
of a million rows or more (and hundreds of columns) even on systems 
with quite modest memory/CPU resources.
The main improvements are as follows:
<dl>

<dt>Plotting</dt>
<dd><p>
    <ul>
    <li>Plotting is much faster and can handle many more points</li>
    <li>Subsets can be selected from plot window by tracing out a 
        non-rectangular region</li>
    <li>You have more choice over plotting symbols
        (including semi-transparent ones)</li>
    <li>Finally X or Y axes can be flipped!</li>
    <li>Export to encapsulated PostScript is of improved quality
        (though for many points file sizes can get large)</li>
    <li>Export to GIF format is available</li>
    <li>Regression lines can be plotted and coefficients displayed
        (experimental capability - could be improved)</li>
    </ul>
    </p></dd>

<dt>Table Formats</dt>
<dd><p>
    <ul>
    <li>"<code>-disk</code>" flag allows use of disk backing storage for
        large tables</li>
    <li>New 'FITS-plus' format stores rich table/column metadata in a
        FITS file</li>
    <li>VOTable handler now fully VOTable 1.1 and 1.0 compatible</li>
    <li>VOTable parsing now works with Java 5.0 platform</li>
    <li>Comma-Separated Value format now supported for input and output</li>
    <li>ASCII input handler rewritten to cope with much larger tables</li>
    <li>ASCII handler now understands d/D as exponent letter as well as e/E</li>
    <li>ASCII handler now uses Short/Float not Integer/Double where 
        appropriate to save memory</li>
    <li>ASCII format fixed bug for -0 degrees/hours in sexagesimal
        angles</li>
    <li>Null handling improved for FITS &amp; VOTable formats</li>
    <li>FITS files store column descriptions in TCOMMx headers</li>
    <li>Better error messages for unparsable tables</li>
    </ul>
    </p></dd>

<dt>Table Joins</dt>
<dd><p>
    <ul>
    <li>Various efficiency improvements and reductions in memory 
        requirements</li>
    <li>In cases of multiple possible matches, the closest is now chosen
        rather than picking one at random</li>
    <li>Pair match now adds column containing score for each match
        (distance between points)</li>
    <li>Units can be selected RA/Dec columns and match errors 
        (so it doesn't need to be all in radians)</li>
    <li>New match types suitable for multivariate matching 
        (anistropic Cartesian, Sky+X, Sky+XY)</li>
    </ul>
    </p></dd>

<dt>Data/Metadata Manipulation</dt>
<dd><p>
    <ul>
    <li>Can add/remove table parameters</li>
    <li>One-step column replacement dialogue from data or column 
        windows</li>
    <li>Synthetic column expressions now written out to column
        descriptions</li>
    </ul>
    </p></dd>

<dt>GUI Navigation and Display</dt>
<dd><p>
    <ul>
    <li>Improved rendering of numbers in tables (esp. Floats)</li>
    <li>Better detection of displayed table column widths</li>
    <li>New Control Window option on File menus</li>
    <li>Better window resizing for some dialogue boxes</li>
    <li>Less confusing error messages in many places</li>
    </ul>
    </p></dd>

<dt>Algebraic Expressions</dt>
<dd><p>
    <ul>
    <li>All available functions are now fully documented in help document
        and interactive Method Window</li>
    <li>Many new trig, coordinate, type conversion, string manipulation 
        functions</li>
    <li>Big performance improvements for null values</li>
    </ul>
    </p></dd>

<dt>Activation Actions</dt>
<dd><p>
    <ul>
    <li>Clicking a point in the plot highlights the corresponding row in the
        data window and vice versa</li>
    <li>Row selection can trigger display sky cutout region display</li>
    <li>Row selection can trigger user-defined actions on activation</li>
    </ul>
    </p></dd>

</dl>
</p>

<p>In addition, the following incompatibilities and changes have been
introduced since the last version:
<ul>
<li>The input format for tables can now be specified in the load window
    (via a selection box) or on the command line
    (using the "<code>-f</code>" flag).  FITS files and VOTables can
    still be identified automatically (i.e. it's not necessary to 
    specify format in this case) but ASCII tables cannot:
    you <em>must</em> now specify the format when loading ASCII tables.
    This change allows better error messages and support for 
    more text-like formats.</li>
<li>Algebraic expressions referencing row subsets now use the 
    underscore character ("_") rather than the hash character ("#")
    to indicate a subset ID.</li>
<li>Classes containing user-supplied functions for algebraic expressions
    are now specified using the properties "<code>jel.classes</code>"
    and "<code>jel.classes.activation</code>", 
    not "<code>gnu.jel.static.classes</code>".</li>
<li>The default output format for FITS tables is now the so-called
    "FITS-plus" format, which has a BINTABLE in its first extension 
    as before, but the text of a VOTable stored in its primary HDU.  
    This can store more metadata for TOPCAT, but should behave just
    the same for other FITS-compatible applications.
    The old behaviour can be restored if desired by specifying "FITS-basic" 
    format.</li>
</ul>
</p></dd>

<dt>Version 1.3-1 (10 November 2004)</dt>
<dd><p>Minor changes:
<ul>
<li>2MASS cutout servers now available from Activation Window</li>
<li>Added Starlink logo to all windows</li>
</ul>
</p></dd>

<dt>Version 1.3-2 (6 Dec 2004)</dt>
<dd><p>Bug fix:
<ul>
<li>Error in parsing empty VOTable TD elements fixed.</li>
</ul>
</p></dd>

<dt>Version 1.4 (4 Feb 2005)</dt>
<dd><p><dl>

    <dt>Load Dialogues</dt>
    <dd><p>The graphical table load dialogue has been overhauled, and now
        has two main new features.  First, it has been rewritten so that
        the GUI does not freeze during a long load; it is still currently
        not possible to interact with other TOPCAT windows while a load is
        taking place, but you can now cancel a load that is in progress.
        </p>

        <p>Secondly, the provision of load dialogues has been modularised,
        and a number of new dialogues provided.  The new ones are:
        <ul>
        <li><ref id="ConeSearchDialog">Cone Search</ref></li>
        <li>MySpace Browser</li>
        <li>Registry Query</li>
        <li>SIAP Query</li>
        </ul>
        If the required classes are present, you can acquire tables from 
        these external sources as well as the traditional methods of loading
        from disk etc.  New command line flags corresponding to each 
        of these have been added to ensure that they are present and
        make them prominent in the load dialogue. 
        Furthermore it is possible to plug in additional load dialogues at
        runtime using the <code>startable.load.dialogs</code> system property.
        </p>

        <p>The appearance of the <ref id="LoadQueryWindow">Load Window</ref>
        has changed; now only the <label>File Browser</label> button
        is visible along with the <label>Location</label> field in the
        body of the window, but the <label>DataSources</label> menu
        can be used to display other available table import dialogues.
        </p></dd>


    <dt>Packaging</dt>
    <dd><p>The program can now be obtained in two standalone forms:
        <code>topcat-full.jar</code> and <code>topcat-lite.jar</code>.
        The former is much larger than before (11 Mbyte), 
        since it contains a number
        of classes to support custom load dialogues such as the MySpace
        browser and web service interaction, as well as the SoG classes.
        The latter contains only the classes for the core functionality,
        and is much smaller (3 Mbyte).
        </p></dd>

    <dt>Explode Array Column action</dt>
    <dd><p>There is now a new button in the 
        <ref id="ColumnInfoWindow">Columns Window</ref> which replaces an
        array-valued column with a scalar column for each of its elements.
        </p></dd>

    <dt>Paste'n'Load</dt>
    <dd><p>You can now load a table by pasting its filename or URL as
        text into the table list in the Control Window (using the X selection
        on X-windows - not sure if or how this works on other platforms).
        </p></dd>

    <dt>Help message</dt>
    <dd><p>The result of <code>topcat -help</code> is now more comprehensive,
        describing briefly what each option does and listing system
        properties as well as arguments/flags proper.
        </p></dd>

    </dl></p></dd>

<dt>Version 1.4-1 (8 February 2005)</dt>
<dd><p>
    <ul>
    <li>Added Search Column item to Data Window column popup menu</li>
    </ul>
    </p></dd>

<dt>Version 1.5 (17 March 2005)</dt>
<dd>
<p><dl>
  <dt>File Access</dt>
  <dd><p>Load dialogues have changed again somewhat, and save 
      dialogues as well.
      The default file browser in both cases is now a
      <em>Filestore Browser</em>,
      which is very much like the standard file browser, but can browse files
      in remote filesystems as well; currently supported are files in 
      AstroGrid's 
      <webref url="http://www.astrogrid.org/maven/docs/HEAD/mySpace/"
              >MySpace</webref>
      or on an 
      <webref url="http://www.sdsc.edu/srb/">SRB</webref>
      (Storage Resource Broker) server.
      You can now save files to these remote locations as well as
      load from them.
      </p>

      <p>In addition, the save dialogue now displays the current row
      subset and sort order - this makes it easier to see and/or
      change the details of the table you're about to save.
      </p>
  </dd>

  <dt>BugFixes</dt>
  <dd><p>A few more minor changes have been made.
    <ul>
      <li>Error display dialogue boxes have been improved in some places</li>
      <li>Various bugs relating to JDBC database access have been fixed</li>
      <li>Some minor issues relating to VOTables with single-character
          columns have been addressed</li>
    </ul>
  </p></dd>
</dl></p>
</dd>

<dt>Version 1.6 (30 June 2005)</dt>
<dd><p><dl>

  <dt>Activation Actions</dt>
  <dd><p>Some more activation functionality has been added:
    <ul>
      <li>New <label>View URL as Web Page</label> option introduced in 
          Activation Window</li>
      <li>New <label>System</label> class of activation functions containing
          <code>exec</code> functions which execute commands on the local
          operating system</li>
      <li>New <label>Browsers</label> class of activation functions for 
          displaying URLs in web browsers (external or basic fallback one)</li>
    </ul>
  </p></dd>

  <dt>Algebraic Functions</dt>
  <dd><p>New <label>Times</label> class added containing functions for
      converting between Modified Julian Day and ISO 8601 format epochs.
      </p></dd>

  <dt>Sky Matching</dt>
  <dd><p>The default sky matching algorithm now uses HEALPix rather than
      HTM for assigning sky pixels to RA,Dec positions.  This gives much
      faster sky matches in most cases, and uses somewhat less memory 
      so can be used on larger tables.  It has also fixed a bug
      which missed out some possible matches.  HTM-based matching 
      is currently still provided as an option, but this is mainly
      for debugging purposes and may be withdrawn in the future.
      </p></dd>

  <dt>Logging</dt>
  <dd><p>The message logging has been tidied up.  The main observable
      consequence of this is that fewer untidy messages are written to
      the console when TOPCAT is run from a standalone jar file
      rather than a full starjava installation.
      By specifying the new <code>-verbose</code> (or <code>-v</code>) 
      flag one or more times you can get those messages back.
      The messages (in fact all logging messages at any level) 
      can also be viewed from the GUI by using the new
      <label>File</label>|<label>Show Log</label> menu option from the
      Control Window.
      </p></dd>

  <dt>SOAP Services</dt>
  <dd><p>TOPCAT now acts as a SOAP server; SOAP requests can now be made
      to a running instance of TOPCAT to get it to display tables by 
      location or by sending XML for a VOTable direct.  Because of 
      limitations in Axis, this latter method won't work for arbitrarily
      large tables.
      </p></dd>

  <dt>Documentation changes</dt>
  <dd><p>The <code>tablecopy</code> tool is no longer covered in this
      document; it is replaced by the <code>tcopy</code> tool in 
      the separate
      <webref url="http://www.starlink.ac.uk/stilts/" plaintextref="yes"
              >STILTS</webref> package.
      There has also been some reorganisation of this document, mainly
      in the appendices.
      </p></dd>

  <dt>Minor changes</dt>
  <dd><p>
    <ul>
      <li>Added <code>-version</code> flag</li>
      <li>Added (dummy) <label>Print</label> option to Data Window.
          This just presents a message to the effect that you should save
          to a printable format.</li>
      <li>Fixed a bug which gave errors when expressions contained a 
          <code>NULL_</code> test on the first column of a table.</li>
      <li>Modified one of the demo tables to contain a column with URLs
          in it.</li>
    </ul>
  </p></dd>

</dl></p></dd>

<dt>Version 1.6-1 (7 July 2005)</dt>
<dd><p>Bugfixes:
<ul>
<li>Work around AstroGrid/Sun bug which prevented loading short VOTables 
    from MySpace.</li>
<li>Ensure that filestore browsers are kept up to date when dialogues are
    displayed.</li>
</ul>
</p></dd>

<dt>Next version</dt>
<dd><p>
<ul>
<li>When you select a column in the Columns window, it now scrolls the
    table in the Data Window so that the selected column is visible.
    This is a boon when dealing with tables that have very many columns.</li>
<li>Added new activation action to launch system default browser.</li>
<li>Added Julian Epoch and Besselian Epoch conversion functions to
    <code>Times</code> class.</li>
<li>MySpace login no longer uses system username as default MySpace
    username.</li>
<li>Added <code>RANDOM</code> special function to algebraic expressions.</li>
<li>Fixed some relatively harmless bugs to do with actions available
    when you select the dummy "Index" column.  You can now unsort 
    from a popup menu in the table viewer window.</li>
<li>MatchScore columns which result from performing
    matches now contain values in more useful units, as well as
    helpful metadata (names, units and descriptions).
    "Spherical Polar" match type is now rebadged as the hopefully less
    confusing "Sky 3d".</li>
<li>Substantially improved pair matching options.</li>
<li>MySpace access re-implemented - you now need to have the 
    Astrogrid Desktop running in order to read from or write to MySpace.</li>
<li>Believed to work fine with Java 1.5 now.</li>
<li>String "<code>null</code>" interpreted as a blank value in ASCII 
    tables.</li>
<li>New "Sky with Errors" match type introduced".</li>
</ul>
</p></dd>

</dl>
</p>

</subsect>

</sect>

</appendices>

</docbody>

</sun>
