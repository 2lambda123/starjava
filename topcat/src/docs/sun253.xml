<?xml version='1.0'?>
<!DOCTYPE sun SYSTEM "docs.dtd" [
  <!ENTITY % image-defs SYSTEM "image.defs">
  %image-defs;

  <!ENTITY URL.VOTABLE "http://www.ivoa.net/Documents/latest/VOT.html">
]>

<sun>

<docinfo>

<title>TOPCAT - Tool for OPerations on Catalogues And Tables</title>

<authorlist>
<author>Mark Taylor</author>
</authorlist>

<docnumber>253</docnumber>

<docdate>9 March 2004</docdate>

<contactlist>
<contact>TOPCAT web page:
         <webref url="http://www.starlink.ac.uk/topcat/"/></contact>
<contact>Author email:
         <webref url="mailto:m.b.taylor@bristol.ac.uk"
                 >m.b.taylor@bristol.ac.uk</webref></contact>
<contact>Starlink: <webref url="http://www.starlink.ac.uk/"/></contact>
</contactlist>

</docinfo>

<!-- ............................................................... -->
<docbody>

<abstract>
<px>TOPCAT is a viewer and editor for tabular data.
It has been designed for use with astronomical tables such as object catalogues,
but is not restricted to astronomical use.
It understands a number of different astronomically important formats,
and more formats can be added.
</px>

<px>It can offer a various of views on the data in a table, including
a browser for the rows and columns themselves, viewers for 
information about table and column metadata, a window for plotting
columns against each other, and a display of the statistics for each column.
Using a powerful and extensible Java-based expression language 
new columns can be defined and row subsets selected for separate analysis.
Table data and metadata can be edited and the resulting modified table
can be written out in a wide range of output formats.
</px>

</abstract>

<sect>
<subhead><title>Introduction</title></subhead>

<p>TOPCAT is a graphical program which can view, analyse, edit and
write out tables.  A table is, roughly, anything with columns and rows;
each column contains objects of the same type 
(for instance floating point numbers) and each row has an entry for
each of the columns (though some entries might be blank).
A common astronomical example of a table is an object catalogue.
</p>

<p>TOPCAT can read in tables in a number of formats, allow you to
inspect and manipulate them in a number of ways, and if you have
edited them optionally write them out in the modified state for later use,
again in a variety of formats.
Here is a summary of its main capabilities:
<ul>
<li>View/edit table data in a scrollable browser</li>
<li>View/edit table and column metadata</li>
<li>Re-order or delete columns</li>
<li>Insert 'synthetic' columns (algebraic expression)</li>
<li>Sort rows on the values in a given column</li>
<li>Define row subsets in various ways</li>
<li>Plot columns against each other, distinguishing different subsets</li>
<li>Calculate statistics on each column for some or all rows</li>
<li>Write modified table out in original or different format</li>
<li>Launch other programs (Mirage)</li>
</ul>
</p>

<p>Recent news about the program can be found on the 
<webref url="http://www.starlink.ac.uk/topcat/">TOPCAT web page</webref>.
It has been written by the 
<webref url="http://www.starlink.ac.uk/">Starlink</webref> project.
The underlying table handling facilities are supplied by
the Starlink Tables Infrastructure Library 
(<webref url="http://www.starlink.ac.uk/stil/">STIL</webref>),
which is documented more fully in 
<webref url="http://www.starlink.ac.uk/stil/sun252/">SUN/252</webref>.
</p>

</sect>

<sect id="invoke">
<subhead><title>Invoking TOPCAT</title></subhead>

<p>There are various ways of starting up TOPCAT depending on how (and whether) 
it has been installed on your system; some of these are described below.
</p>

<p>There may be some sort of short-cut icon on your desktop which 
starts up the program - in this case just clicking on it will probably work.
Failing that you may be able to located the
jar file (<code>topcat.jar</code> or <code>topcat-full.jar</code>)
and click on that.  These files would be located in the 
<code>java/lib/topcat/</code> directory in a standard Starjava installation.
Note that when you start by clicking on something 
you do not have the option of entering
any of the command line options described below.
</p>

<p>Alternatively you will have to invoke the program from the command line.
If you have the full starjava installation on a Unix-like operating
system, you can use the <code>topcat</code> script, which should
be in the <code>java/bin/</code> directory.  So if that directory is
on your path, you can write:
<verbatim>
   topcat [java-args] [topcat-args]
</verbatim>
In this case any arguments which start <code>-D</code> or <code>-X</code> 
are assumed to be arguments to the java command, 
a <code>-classpath</code> <var>path</var> defines a class path to 
be used in addition to the TOPCAT classes, 
and any remaining arguments are used by TOPCAT.
</p>

<p>If you don't have the starjava Unix installation to start from the 
command line you will have to use the java command itself.
The most straightforward way of doing this will look like:
<verbatim>
   java [java-args] -jar path/to/topcat.jar [topcat-args]
</verbatim>
(or the same for <code>topcat-full.jar</code>).
However <strong>NOTE</strong>: using java's <code>-jar</code> flag ignores
any other class path information, such as the CLASSPATH environment
variable or java's <code>-classpath</code> flag - this is to do with
Java's security model.  If you need to make any additional classes
available to TOPCAT (such as extensions to the functions available
in writing algebraic expressions, or for JDBC connectivity with SQL
databases) an invocation like this will not work.  Instead you 
should write:
<verbatim>
   java -classpath path/to/topcat.jar:other-classpaths [java-args]
        uk.ac.starlink.topcat.Driver [topcat-args]
</verbatim>
(or the same for <code>topcat-full.jar</code>).
</p>

<p>Note that Java 
<webref url="http://java.sun.com/products/javawebstart/">Web Start</webref> 
can also be used to invoke the program
without requiring any prior download/installation - sorry, this isn't
documented properly here yet.
</p>

<p>The meaning of the optional <code>[java-args]</code>
and <code>[topcat-args]</code> sequences are described below.
</p>

<subsect id="jvmOpt">
<subhead><title>Java options</title></subhead>

<p>As described in <ref id="invoke"/>, depending on how you 
invoke TOPCAT you may be able to specify arguments to Java itself
(the 'Java Virtual Machine') which affect how it runs.
These may be defined on the command line or in some other way.
The form of these is dependent on the environment in which you are
running, so there's no guarantee that the information here about 
how to specify these options will be correct for you, but it's quite
a good bet that it is.
</p>

<p>
<dl>

<dt>Class path</dt>
<dd><p>When running TOPCAT you will need to include the TOPCAT classes
    themselves in your classpath - how to do this is described in 
    <ref id="invoke"/>.  However, for certain purposes you might need
    access to some other classes, in particular additional driver
    classes for JDBC drivers (SQL access) or user-provided mathematical
    functions (for synthetic column or subset definitions).
    To specify this when using the <code>topcat</code> script do this:
    <verbatim>
    topcat -classpath <var>other-paths</var>
    </verbatim>
    when using the java command directly do this:
    <verbatim>
    java -classpath path/to/topcat.jar:<var>other-paths</var>
         uk.ac.starlink.topcat.Driver
    </verbatim>
    or set your CLASSPATH environment variable something like this:
    <verbatim>
    setenv CLASSPATH <var>other-paths</var>
    </verbatim>
    </p>
    <p>Note that if you are running TOPCAT using java's <code>-jar</code> 
    flag, any attempt you make to specify the classpath will be ignored!
    If you need to specify a classpath which includes more than the
    TOPCAT classes themselves, you can't use <code>java -jar</code>.
    </p></dd>

<dt>Memory size</dt>
<dd><p>If TOPCAT fails during operation with a message that says something
    about a <code>java.lang.OutOfMemoryError</code>, then your heap
    size is too small for what you are trying to do.  You will have to
    run java with a bigger heap size using the <code>-Xmx</code> flag.
    You would do something like:
    <verbatim>
    java -Xmx256M topcat.jar
    </verbatim>
    which means use up to 256 megabytes of memory (don't forget the 'M'
    for megabyte).  JVMs typically default to a heap size of 64M.
    You probably don't want to specify a heap size larger than the
    physical memory of the machine that you are running on.
    </p></dd>

<dt>System properties</dt>
<dd><p>System properties are a way of getting information into the JVM.
    The following ones have special significance within TOPCAT:
    <ul>
    <li><code>jdbc.drivers</code>:
        The JDBC driver classes using which SQL databases can be accessed</li>
    <li><code>gnu.jel.static.classes</code>:
        Classes containing static methods which define user-provided 
        functions for synthetic columns or subsets.</li>
    </ul>
    On the command line you'd write something like:
    <verbatim>
    -Djdbc.drivers=org.postgresql.Driver
    </verbatim>
    Alternatively you can write these definitions in a file called 
    <code>.starjava.properties</code> in your home directory; the above
    command-line flag would be equivalent to inserting the line:
    <verbatim>
    jdbc.drivers=org.postgresql.Driver
    </verbatim>
    in your <code>.starjava.properties</code> file.
    </p></dd>
</dl>
</p>

</subsect>

<subsect>
<subhead><title>TOPCAT arguments</title></subhead>

<p>You can start TOPCAT from the command line with no arguments - 
in this case it will just pop up the command window from which you
can load in tables.  However you may specify flags and/or table locations.
</p>

<p>Curently the only defined flag is as follows:
<dl>
<dt>-h</dt>
<dd><p>If the <code>-h</code> flag is given, TOPCAT will write a usage
    message and exit straight away.
</p></dd>
</dl>
</p>

<p>Other arguments on the command line are taken to be the locations
of tables.  Any tables so specified will be loaded into TOPCAT at startup.
These locations are typically filenames, but may also
be URLs or SQL queries, or perhaps something else.  In addition
they may contain 'fragment identifiers' to locate a table within
a given resource, so that for instance the location
<verbatim>
   /my/data/cat1.fits#2
</verbatim>
means the second extension in the multi-extension FITS file 
<code>/my/data/cat1.fits</code>.
</p>

</subsect>

</sect>

<sect>
<subhead><title>Input and Output</title></subhead>

<p>TOPCAT can be used just as a table viewer, or as an editor too.
Having loaded a table into the application you can edit its data
and metadata and subsequently write the modified table out again,
either in the same format as it was originally read in, or in a
completely different format.  TOPCAT's view of the table while it
is running is format-neutral, so viewing and editing proceeds in
the same way regardless of the original format of the data, but it
can nevertheless preserve much of the the data and metadata detail
when writing tables out.  Editing of table data and metadata do
not (currently) modify the stored table itself; such changes
will only be preserved if the table is subsequently saved.
</p>

<p>Loading and saving tables are not done by the same components,
so in some cases a table can be read in a given format but not
written out in the same format, or vice versa.  The rest of this
section describes the I/O capabilities in detail.
</p>

<subsect id="load">
<subhead><title>Loading Tables</title></subhead>

<p>You can read tables into TOPCAT by
<ul>
<li>Giving the table location on the command line at startup</li>
<li>Using the "Open Table" dialogue, which is activated by:
  <ul>
  <li>The <label>Open</label> button (&IMG.LOAD;) on the toolbar</li>
  <li>The <label>Open</label> item in the <label>File</label> menu</li>
  </ul>
</li>
<li>Dragging a table type node from the separate application
    <webref url="http://www.starlink.ac.uk/treeview/">Treeview</webref>
    and dropping it on the table list in the Control window.</li>
</ul>
</p>

<p>The "Open Table" dialog allows you to specify a new table to open in the
following ways, described in more detail in the following sections:
<ul>
<li>Type in the location directly in the <label>Location</label> field</li>
<li>Use the <label>Browse Files</label> button to get a 
    standard file browser</li>
<li>Use the <label>Browse Hierarchy</label> button to get a
    more sophisticated hierarchical table browser</li>
<li>Use the <label>SQL Database</label> button to get the SQL 
    query dialog box</li>
</ul>
</p>

<p>In most cases TOPCAT can happily read files or resources which are
compressed (using gzip, bzip2 or Unix compress).
You do not need to indicate what table format you are referring to,
TOPCAT will detect the format and any compression
based on the location given.
</p>

<p>If you successfully specify the location of a table in any of these ways, 
a new entry will be added into the list of available tables in the 
Control window.  By clicking on this you can see its characteristics,
and by using the toolbar buttons you can open up windows to view the
table data itself in various ways.
If you choose a location which can't be turned into a table
(for instance because the file doesn't exist),
a window will pop up telling you what went wrong.
</p>

<p>If you receive an <code>OutOfMemoryError</code> while loading a table,
you will have to run TOPCAT with more memory, as described in 
<ref id="jvmOpt"/> (though note that not all data formats require the
table to be loaded into memory).
</p>

<subsubsect>
<subhead><title>Enter Location</title></subhead>

<p>You can load a table by typing its location into the <label>Location</label>
field of the "Open Table" dialog box.
</p>

<p>In the simplest case this is the name of a file holding the
table in one of the formats TOPCAT understands.
However it may be a URL for remote data, and in some cases
may have an additional "fragment identifier" appended to the
filename after a "#" character to indicate where in the URL or
file the table is located;
The details of what such fragment identifiers mean can be found 
in the relevant subsection within <ref id="inFormats"/>.
It may also be a location which does not correspond to a file
at all, such as the specification of an SQL query on a relational database.
For these more complicated cases you may find it easier to use
one of the other methods for specifying a table to load.
</p>

</subsubsect>

<subsubsect id="fileLoader">
<subhead><title>File Browser</title></subhead>

<p>By clicking the <label>Browse Files</label> button in the 
<label>Open Table</label>
dialogue box, you can obtain a normal file browser which will
display the files in a given directory.
</p>

<p>The browser initially displays the current directory, but this can be
changed by typing a new directory into the <label>File Name</label> field,
or moving up the directory hierarchy using the selector box at the top,
or navigating the file system by clicking the up-directory button
or double-clicking on displayed directories.
</p>

<p>All files are shown, and there is no indication of which ones represent
tables and which do not.  To open one of the displayed files as a table,
double click on it or select it by clicking once and click the
<label>Open Table</label> button.  If you pick a file which cannot be converted
into a table (it is not in a recognised input format) an error window
will pop up.
</p>

<p>Because this browser only works at the file level, there is a limit
to what tables it can access.  For instance if you select a FITS file,
the table opened will correspond to the first TABLE or BINTABLE
HDU within it.
For a more table-aware view of the file system, use the
<ref id="nodeLoader">Hierarchy Browser</ref> instead.
</p>

</subsubsect>


<subsubsect id="nodeLoader">
<subhead><title>Hierarchy Browser</title></subhead>

<p>By clicking the <label>Browse Hierarchy</label> button in the 
<label>Open Table</label>
dialogue box, you can obtain a browser which presents a table-aware
hierarchical view of the file system.
(Note that a freestanding version of this panel with additional
functionality is available in the separate
<webref url="http://www.starlink.ac.uk/treeview/">Treeview</webref>
application).
</p>

<p>This browser resembles the <ref id="fileLoader">File Browser</ref>
in some ways, but with important differences:
<ul>
<li>It shows the file system in a 'tree-like' fashion, so that multiple
    levels of the hierarchy are displayed at once</li>
<li>It understands which items in the hierarchy represent tables and
    which represent other kinds of object (for instance plain files)</li>
<li>It can look inside hierarchical files, so for instance it can
    investigate a Tar or Zip archive which may contain table entries,
    or display multiple tabular HDUs in a FITS file, or multiple
    TABLE elements at different levels in a VOTable document</li>
</ul>
</p>

<p>The main part of the window shows a 'tree' representation of the
hierarchy, initially rooted at the current directory.
Each line displayed represents a 'node' which may be a file or
some other type of item (for instance an HDU in a FITS file or an
entry in a tar archive).  The line contains a little icon
which indicates what kind of node it is and a short text string which
gives its name and maybe some description.
For nodes which have some internal structure there is also a
'handle' which indicates whether they are
collapsed (&IMG.COLLAPSED;) or expanded (&IMG.EXPANDED;).
</p>

<p>If you select a node by clicking on it, it will be highlighted
and some additional description will appear in the panel below the
hierarchy display.  The text is in <strong>bold</strong> if the node in
question can be opened as a table, and non-bold if it is some
non-table item.
</p>

<p>You can see how this browser works on an example directory of tables
as described in <ref id="demoData"/>.
</p>

<subsubsubsect>
<subhead><title>Navigation</title></subhead>

<p>Navigation is a bit different from navigation in the File Browser window.
To expand a node and see its contents, click on its handle
(clicking on the handle when it is expanded will collapse it again).
When you have identified the table you want to open, highlight it
by clicking on it, and then click the <label>Open Table</label> button
at the bottom.
</p>

<p>To move to a different directory, i.e. to change the root of the tree
which is displayed, use one of the buttons above the tree display:
<dl>
<dt>Selector box</dt>
<dd><p>Allows you to move straight to any directory higher up than the
    current one.
    </p></dd>

<dt>Up button &IMG.TV_UP;</dt>
<dd><p>Moves to the parent of the current directory.
    </p></dd>

<dt>Down button &IMG.TV_DOWN;</dt>
<dd><p>Moves to the currently selected (highlighted) node.
    </p></dd>

<dt>Home button &IMG.HOME;</dt>
<dd><p>Moves to the user's home directory.
    </p></dd>
</dl>
Alternatively, you can type in a new directory
in the <label>Go to</label> field at the bottom of the window.
</p>

<p>(In fact the above navigation options are not restricted to changing
the root to a new directory, they can move to any node in the
tree, for instance a level in a Tar archive.)
</p>

</subsubsubsect>

<subsubsubsect>
<subhead><title>Table Searches</title></subhead>

<p>There are two more buttons in the browser, <label>Search Selected</label>
and <label>Search Tree</label>.  These do a recursive search for tables in all
the nodes starting at the currently selected one or the current
root respectively.
What this means is that the program will investigate the whole
hierarchy looking for any items which can be used as tables.
If it finds any it will open up the tree so that they are visible
(note that this doesn't mean that the only nodes revealed will
be tables, ancestors and siblings will be revealed too).
This can be useful if you believe there are a few tables buried
somewhere in a deep directory structure or Tar archive, but you're
not sure where.  Note that this may be time-consuming - a busy
cursor is displayed while the search is going on.
Changing the root of the tree will interrupt the search.
</p>
</subsubsubsect>

</subsubsect>

<subsubsect id="SQLReadDialog">
<subhead><title>SQL Query Dialogue</title></subhead>

<p>If you want to <ref id="jdbcRead">read a table from an SQL database</ref>,
you can use a specialised dialogue to specify the SQL query by clicking
the <label>SQL Database</label> button in the <label>Open Table</label>
dialogue box.
</p>

<p>This provides you with a list of fields to fill in which make
up the query, as follows:
<dl>
<dt>Protocol</dt>
<dd><p>The name of the appropriate JDBC sub-protocol.
    This is defined by the JDBC driver that you are using, and is
    for instance "<code>mysql</code>" for MySQL's Connector/J driver 
    or "<code>postgresql</code>" for PostgreSQL's JDBC driver.
    </p></dd>

<dt>Host</dt>
<dd><p>The hostname of the machine on which the database resides
    (may be "<code>localhost</code>" if the database is local).
    </p></dd>

<dt>Database name</dt>
<dd><p>The name of the database.
    </p></dd>

<dt>SQL Query</dt>
<dd><p>The text of the query which will define the resulting table.
    If you want to look at a table called XXX as it exists in the database,
    you can write something like "<code>SELECT * from XXX</code>".
    In principle any SQL query on the database can be used here,
    but the details of what SQL syntax is permitted will be defined
    by the JDBC driver you are using.
    </p></dd>

<dt>User name</dt>
<dd><p>The username under which you wish to access the database.
    This is not strictly necessary if there is no access control for
    the database in question.
    </p></dd>

<dt>Password</dt>
<dd><p>The password for the given username.  Again, whether this is
    necessary depends on the access policy of the database.
    </p></dd>
</dl>
</p>

<p>There are a number of criteria which must be satisfied for SQL
access to work within TOPCAT (installation of appropriate drivers
and so on) - see <ref id="jdbcConfig"/>.
</p>

</subsubsect>

<subsubsect id="demoData">
<subhead><title>Example Tables</title></subhead>

<p>Some example table data is provided with TOPCAT.
<ul>
<li>To load an example table you can use the <label>Load Example Table</label>
    item in the <label>Examples</label> menu.</li>
<li>The <label>Browse Example Hierarchy</label> item in that menu,
    or equivalently the &IMG.DEMO; button in the toolbar, will
    show you a hierarchy browser with a number of example tables of different
    kinds, including some stored within a tar archive.  This option is
    designed to show some of the organisational complexity which TOPCAT
    can handle when loading tables.</li>
</ul>
</p>

</subsubsect>

</subsect>

<subsect id="save">
<subhead><title>Saving Tables</title></subhead>

<p>A table in the viewer can be written out any time using the "Save Table"
dialogue.  This is activated from the Control window by:
<ul>
<li>The <label>Save</label> button (&IMG.SAVE;) on toolbar</li>
<li>The <label>Save</label> item in the 
    <ref id="ControlWindow">Control Window</ref> <label>File</label> menu</li>
</ul>
Note that the table which will be saved is the 
<ref id="apparent">Apparent Table</ref>, which takes into account 
modifications you have made to it during this session.
Row Subsets which have been defined on the table in the current session
will not be saved themselves, but you can save information about 
subset membership by creating new boolean columns based on subsets
using the "To Column" button (&IMG.TO_COLUMN;) from the 
<ref id="SubsetWindow">subset window</ref>.
</p>

<p>The "Save Table" dialogue invites you to specify a format and
a location for the written table.
</p>

<p>You can use the <label>Table output format</label> selector box to pick
the format in which the table will be written from one
of the <ref id="outFormats">supported output formats</ref>.
There is no default format, but if you leave it on "(auto)" it
will try to guess the format based on the filename given;
for instance if you specify the name "out.fits", a FITS binary table
extension will be written.
</p>

<p>You can specify the location of the output table in these ways,
which are described in the following sections:
<ul>
<li>Type in the location directly in the <label>Output location</label> 
    field</li>
<li>Use the <label>Browse files</label> button to get 
    a standard file browser</li>
<li>Use the <label>SQL table</label> button to get the SQL table dialog box</li>
</ul>
In some cases, saving the table to the same name as it was loaded from
can cause problems (e.g. an application crash which loses the data 
unrecoverable).
In other cases, it's perfectly OK.  The main case in which it's 
problematic is when editing an uncompressed FITS binary table on disk.
TOPCAT will attempt to warn you if it thinks you are doing something
which could lead to trouble; ignore this at your own risk.
</p>

<p>There is no option
to compress files on output (though you can of course compress them
yourself once they have been written).
</p>

<p>If the table is large, a progress bar indicating how near the
save is to completion will appear in a popup window.
It is not advisable to edit the table during a save operation.
</p>

<p>In some cases, when saving a table to a format other than the one
from which it was loaded, or if some new kinds of metadata have been
added, it may not be possible to express all
the data and metadata from the table in the new format.
For instance a WDC table can contain data which represents epoch (date),
and this cannot be stored in a FITS table.  In this case the table
may be written with such columns missing.  Some message to this effect
may be output in this case.
</p>

<p>You can also export a table by dragging it off the <label>Save</label>
button on the toolbar onto a cooperating application 
(e.g. <webref url="http://www.starlink.ac.uk/treeview/">Treeview</webref>).
</p>


<subsubsect>
<subhead><title>Enter Location</title></subhead>

<p>You can specify where to save a table by typing its location
directly into the <label>Output Location</label> field of the
"Save Table" dialog box.  This will usually be the name of a new file to
write to, but could in principle be a URL or a JDBC specifier.
</p>

</subsubsect>

<subsubsect>
<subhead><title>File Browser</title></subhead>

<p>By clicking the <label>Browse Files</label> button in the 
   <label>Save Table</label>
dialogue box , you can obtain a file browser which will display the
files in a given directory.
</p>

<p>The browser initially displays the current directory, but this can be
changed by typing a new directory into the <label>File Name</label> field,
or moving up the directory hierarchy using the selector box at the top,
or navigating the file system by clicking the up-directory button
or double-clicking on displayed directories.
</p>

<p>To save to an existing file, select the file name and click the
<label>Save</label> button at the bottom; this will overwrite that file.
To save to a new file, type it into the <label>File Name</label> field;
this will save the table under that name into the directory which is displayed.
You can (re)set the format in which the file will be written using
the <label>Output Format</label> selector box on the right.
</p>

</subsubsect>

<subsubsect id="SQLWriteDialog">
<subhead><title>SQL Output Dialogue</title></subhead>

<p>If you want to <ref id="jdbcWrite">write a table to an SQL database</ref>,
you can use a specialised dialogue to specify the table destination by clicking
the <label>SQL Table</label> button in the <label>Save Table</label> 
dialogue box.
</p>

<p>This provides you with a list of fields to fill in which define
the new table to write, as follows:
<dl>
<dt>Protocol</dt>
<dd><p>The name of the appropriate JDBC sub-protocol.
    This is defined by the JDBC driver that you are using, and is
    for instance "<code>mysql</code>" for MySQL's Connector/J driver 
    or "<code>postgresql</code>" for PostgreSQL's JDBC driver.
    </p></dd>

<dt>Host</dt>
<dd><p>The hostname of the machine on which the database resides
    (may be "<code>localhost</code>" if the database is local).
    </p></dd>

<dt>Database name</dt>
<dd><p>The name of the database.
    </p></dd>

<dt>New table name</dt>
<dd><p>The name of a new table to write into the given database.
    Subject to user privileges, 
    this will overwrite any existing table in the database which has the
    same name, so should be used with care.
    </p></dd>

<dt>User name</dt>
<dd><p>The username under which you wish to access the database.
    This is not strictly necessary if there is no access control for
    the database in question.
    </p></dd>

<dt>Password</dt>
<dd><p>The password for the given username.  Again, whether this is
    necessary depends on the access policy of the database.
    </p></dd>
</dl>
</p>

<p>There are a number of criteria which must be satisfied for SQL
access to work within TOPCAT (installation of appropriate drivers
and so on) - see the section on <ref id="jdbcConfig">JDBC configuration</ref>.
</p>

</subsubsect>

</subsect>

<subsect id="inFormats">
<subhead><title>Supported Input Formats</title></subhead>

<p>The following sections describe the table formats which TOPCAT
can read.</p>

<subsubsect>
<subhead><title>FITS Tables</title></subhead>

<p>FITS BINARY and ASCII tables can be read.
Unless told otherwise, TOPCAT will display the first TABLE or BINTABLE
extension in a given FITS file.
If a later extension is required, this is indicated by giving the
extension number after a '#' at the end of the table location.
The first extension (first HDU after the primary HDU) is numbered 1.
Thus in a compressed FITS table called "spec23.fits.gz"
with one primary HDU and two BINTABLE extensions,
you would view the first one using the name "spec23.fits.gz"
or "spec23.fits.gz#1" and the second one using the name.
"spec23.fits.gz#2".  The suffix "#0" is never used for a legal
FITS file, since the primary HDU cannot contain a table.
</p>

<p>You can select which extension to use more conveniently than
by specifying the HDU numbers if you use the
<ref id="nodeLoader">Hierarchy Browser</ref> to load the table.
</p>

<p>If the table is stored in a FITS binary table extension in a file
on local disk in uncompressed form, then any size table can be
loaded (TOPCAT does not load the table into memory in this case).
</p>

<p>Compressed FITS files, or ones referred to as URLs, may be used.
</p>

</subsubsect>

<subsubsect>
<subhead><title>VOTables</title></subhead>

<p>It should be possible to read any table which conforms to the
<webref url="&URL.VOTABLE;">VOTable 1.0 specification</webref>.
This includes tables in which the cell data is
included in-line as XML elements (TABLEDATA format),
or included/referenced as a FITS table (FITS format)
or included/referenced as a raw binary stream (BINARY format).
</p>

<p>VOTable documents can have a complicated hierarchical structure,
and may contain more than one actual table.
Unless told otherwise, TOPCAT will load the first table it finds
in the document, so in the (common) case that the document holds
exactly one table, giving the filename will load that sole table.
To display a table other than the first, you must indicate the
zero-based index of the TABLE element in a breadth-first search
after a '#' character at the end of the table specification.
Here is an example VOTable document:
<verbatim><![CDATA[
   <VOTABLE>
     <RESOURCE>
       <TABLE name="Star Catalogue"> ... </TABLE>
       <TABLE name="Galaxy Catalogue"> ... </TABLE>
     </RESOURCE>
   </VOTABLE>
]]></verbatim>
If this is available in a file called "cats.xml"
then open the Star Catalogue using the name "cats.xml"
or "cats.xml#0", and the Galaxy Catalogue using the name
"cats.xml#1".
</p>

<p>Compressed VOTable documents, or ones referred to as URLs, may be used.
</p>

</subsubsect>

<subsubsect id="jdbcRead">
<subhead><title>SQL Database Queries</title></subhead>

<p>With appropriate configuration, TOPCAT can be used to examine the
results of queries on a relational database such as MySQL.
</p>

<p>Database queries can be specified as a string in the form:
<verbatim>
   jdbc:<var>driver-specific-url</var>#<var>sql-query</var>
</verbatim>
The exact form is dependent on the driver.
Here is an example for MySQL:
<verbatim><![CDATA[
   jdbc:mysql://localhost/astro1?user=mbt#SELECT ra, dec FROM swaa WHERE vmag<18
]]></verbatim>
which would get a two-column table (the columns being "ra" and "dec"),
constructed from certain rows from the table "swaa" in the database
"astro1" on the local host, using the access privileges of user mbt.
</p>

<p>Fortunately you do not have to construct this by hand, there is
an <ref id="SQLReadDialog">SQL dialogue box</ref> to assist
in putting it together.
</p>

<p>Note that TOPCAT does not view a table in the database directly,
but the result of an SQL query on that table.  If you want to view
the whole table you may use the query
<verbatim>
   SELECT * FROM table-name
</verbatim>
but be aware that such a query may be expensive on a large table.
</p>

<p>Use of SQL queries requires some additional configuration of TOPCAT;
see <ref id="jdbcConfig"/>.
</p>

</subsubsect>

<subsubsect>
<subhead><title>World Data Center Tables</title></subhead>

<p>Some support is provided for files produced by the
<webref url="http://www.wdc.rl.ac.uk/">World Data Centre for 
Solar Terrestrial Physics</webref>.
The format itself apparently has no name, but files in this format
look something like the following:
<verbatim><![CDATA[
  Column formats and units - (Fixed format columns which are single space seperated.)
  ------------------------
  Datetime (YYYY mm dd HHMMSS)            %4d %2d %2d %6d      -
                                          %1s
  aa index - 3-HOURLY (Provisional)       %3d                  nT

  2000 01 01 000000  67
  2000 01 01 030000  32
      ...
]]></verbatim>
</p>

<p>Compressed files, or ones referred to as URLs, may be used.
</p>

<p>This handler is experimental;
it was reverse-engineered from looking at a couple of
data files in the target format, and may not be very robust.
</p>

</subsubsect>

</subsect>

<subsect id="outFormats">
<subhead><title>Supported Output Formats</title></subhead>

<p>The following sections describe the table formats to which TOPCAT
can write.
</p>

<subsubsect>
<subhead><title>FITS</title></subhead>

<p>When saving in FITS format a new file is written consisting of two HDUs: 
a primary one containing minimal headers, and a single extension of
type BINTABLE containing the table data.
</p>

</subsubsect>

<subsubsect>
<subhead><title>VOTable</title></subhead>

<p>When a table is saved to VOTable format, a document conforming to the
VOTable 1.0 specification containing a single TABLE element within 
a single RESOURCE element is written.
</p>

<p>The format in which the table data (DATA element) 
is written is determined by
the format name chosen from the "Table Output Format" selector.
These names are quite self-explanatory in conjunction with the
VOTable specification:
<dl>

<dt>votable-tabledata</dt>
<dd><p>TABLEDATA element (pure XML)</p></dd>

<dt>votable-binary-inline</dt>
<dd><p>BINARY element containing base64-encoded data within the document
    </p></dd>

<dt>votable-fits-href</dt>
<dd><p>FITS element containing a reference to an external newly-written FITS 
    file (with a name derived from that of the VOTable document)
    </p></dd>

<dt>votable-binary-href</dt>
<dd><p>BINARY element containing a reference to an external newly-written 
    binary file (with a name derived from that of the VOTable document)
    </p></dd>

<dt>votable-fits-inline</dt>
<dd><p>FITS element containing base64-encoded data within the document
    </p></dd>
</dl>
See the <webref url="&URL.VOTABLE;">VOTable specification</webref> for
more explanation of these formats.
</p>

</subsubsect>

<subsubsect id="jdbcWrite">
<subhead><title>SQL Tables</title></subhead>

<p>With appropriate configuration, TOPCAT can write out tables as
new tables in an SQL-compatible relational database.
</p>

<p>For writing, the location is specified as the following URL:
<verbatim>
   jdbc:<var>driver-specific-url</var>#<var>new-table-name</var>
</verbatim>
The exact form is dependent on the driver.
Here is an example for MySQL:
<verbatim><![CDATA[
   jdbc:mysql://localhost/astro1?user=mbt#newtab
]]></verbatim>
which would write the current contents of the browser into a new table
called "newtab" in the database "astro1" on the local host with the
access privileges of user mbt.
</p>

<p>Fortunately you do not have to construct this URL by hand, there is
an <ref id="SQLWriteDialog">SQL dialogue box</ref> to assist
in putting it together.
</p>

<p>Use of SQL queries requires some additional configuration of TOPCAT;
see <ref id="jdbcConfig"/>.
</p>

</subsubsect>

<subsubsect>
<subhead><title>HTML</title></subhead>

<p>A table can be written out as an HTML 3.2 
<webref url="http://www.w3c.org/TR/REC-html32#table">TABLE</webref> element,
suitable for use as a web page or insertion into one.
According to the output format selected, this may or may not be
wrapped in header and footer text to turn it into a freestanding
HTML document.
</p>

</subsubsect>

<subsubsect>
<subhead><title>Plain Text</title></subhead>

<p>Tables can be written to a simple text-based format which is
designed to be read by humans.  No reader exists for this format.
</p>

<p>Here is an example of a short table written in this format:
<verbatim>
   +-------+----------+--------+------+--------+--------+
   | index | Species  | Name   | Legs | Height | Mammal |
   +-------+----------+--------+------+--------+--------+
   | 1     | pig      | Bland  | 4    | 0.8    | true   |
   | 2     | cow      | Daisy  | 4    | 2.0    | true   |
   | 3     | goldfish | Dobbin | 0    | 0.05   | false  |
   | 4     | ant      |        | 6    | 0.0010 | false  |
   | 5     | ant      |        | 6    | 0.0010 | false  |
   | 6     | human    | Mark   | 2    | 1.9    | true   |
   +-------+----------+--------+------+--------+--------+
</verbatim>
</p>

</subsubsect>

<subsubsect>
<subhead><title>LaTeX</title></subhead>

<p>A tables can be written out as a LaTeX <code>tabular</code> environment,
suitable for insertion into a document intended for publication.
According to the output format selected, this may or may not be
wrapped in header and footer text to turn it into a freestanding
LaTeX document.
</p>

<p>Obviously, this isn't so suitable for very large tables.
</p>

</subsubsect>

<subsubsect>
<subhead><title>Mirage Format</title></subhead>

<p><webref url="http://www.bell-labs.com/project/mirage/">Mirage</webref>
is a powerful standalone java tool developed at Bell Labs for analysis of
multidimensional data.  It uses its own file format for input.
TOPCAT can write tables out in the input format which Mirage uses,
so that you can prepare tables in TOPCAT and write them out for
subsequent use by Mirage.
</p>

<p>It is also possible in principle to launch Mirage directly 
from within TOPCAT.
In order for this to work the Mirage classes must
be on your classpath (see <ref id="jvmOpt"/>) when TOPCAT is run.
Mirage will run on the table currently visible in the data browser,
i.e. with any column or data changes or row subsetting you have applied
in effect.
</p>

<p>There is a bug in Mirage which means this does not always work -
sometimes Mirage starts up with no data loaded into it.
In this case you will have to save the data to disk in Mirage format,
start up Mirage separately, and load the data in using the
<label>New Dataset</label> item in Mirage's <label>Console</label> menu.
</p>

<p>Note that when Mirage has been launched from TOPCAT, exiting Mirage
or closing its window will exit TOPCAT as well.
</p>

</subsubsect>

</subsect>

<subsect id="jdbcConfig">
<subhead><title>JDBC Configuration</title></subhead>

<p>With appropriate configuration, TOPCAT can be used to access
SQL-compatible releational databases such as MySQL.
This requires the installation of an appropriate JDBC driver
specific to that database, as well as, of course, access to such
a database.
</p>

<p>To use TOPCAT in this way you must:
<ul>
<li>Have access to an SQL-compatible database locally or over the network</li>
<li>Have a JDBC driver appropriate for that database</li>
<li>Install this driver for use with TOPCAT</li>
<li>Know the format the driver uses for URLs to access database tables</li>
<li>Have appropriate privileges on the database to perform the
    desired operations</li>
</ul>
Installing the driver consists of two steps:
<ol>
<li>Set the <code>jdbc.drivers</code> system property to the name of the
    driver class</li>
<li>Ensure that the classpath you are using includes this driver class</li>
</ol>
For details on how to do these, see <ref id="jvmOpt"/>.
</p>

<p>These steps are all standard for use of the 
<webref url="http://java.sun.com/j2se/1.4/docs/guide/jdbc/">JDBC</webref>
system.
</p>

<p>To the author's knowledge, TOPCAT has so far successfully been used
with the following RDBMSs and corresponding JDBC drivers:
<dl>

<dt><webref url="http://www.mysql.org/">MySQL</webref></dt>
<dd><p>MySQL 3.23.55 on Linux has been tested with the
    <webref url="http://mirrors.sunsite.dk/mysql/products/connector-j/"
            >Connector/J</webref>
    driver version 3.0.8 and seems to work, though tables with very
    many columns cannot be written owing to SQL statement length restrictions.
    Note there is known to be a column metadata bug in version 3.0.6 of the
    driver which can cause a ClassCastException error when tables are written.
    </p></dd>

<dt><webref url="http://www.postgresql.org/">PostgreSQL</webref></dt>
<dd><p>PostgreSQL 7.4.1 apparently works with the driver it comes with.
    Thanks to Jonathan Irwin for writing a patch to fix a problem with 
    this driver.
    </p></dd>
</dl>
ther RDBMSs and drivers may or may not work - please let us know the
results of any experiments you carry out.
</p>

</subsect>

</sect>

<sect>
<subhead><title>Windows</title></subhead>

<p>This section describes the windows used by TOPCAT.
First some common features of windows used by the program are described,
then there is a tour of each of the viewer windows.
</p>

<subsect>
<subhead><title>Common Window Features</title></subhead>

<p>This section describes some features which are common to many or
all of the windows used in the TOPCAT program.
</p>

<subsubsect>
<subhead><title>Toolbar Buttons</title></subhead>

<p>Each window has a toolbar at the top containing various buttons 
representing actions that can be invoked from the window.
Many or all of them contain the following buttons:
<dl>

<dt>&IMG.CLOSE; Close</dt>
<dd><p>Closes the window.
    </p></dd>

<dt>&IMG.HELP; Help</dt>
<dd><p>Pops up a <ref id="HelpWindow">Help browser</ref> window, or makes 
    sure it is visible if it has already been opened.
    The window will display help information relevant to the window in
    which the button appears.
    </p></dd>

</dl>
</p>
</subsubsect>

<subsubsect>
<subhead><title>Menu Items</title></subhead>

<p>The windows have a menu at the top containing various options
representing actions that the window can carry out.  In most cases,
actions which can be carried out using the toolbars or in other ways
can be done from a menu too.  Most windows have the following menu
items:
<dl>
<dt>Exit</dt>
<dd><p>The <label>Exit</label> item in the <label>File</label> menu
    will exit TOPCAT, asking you for confirmation first.
    </p></dd>

<dt>Help</dt>
<dd><p>The <label>Help</label> item in the <label>Help</label>
    menu will display the
    help browser without changing its content to anything appropriate
    for this window.
    </p></dd>

<dt>About</dt>
<dd><p>The <label>About</label> item in the <label>Help</label> menu
    will pop up a short message about the TOPCAT application.
    </p></dd>

<dt>Display</dt>
<dd><p>The <label>Display</label> menu appears in most windows which contain
    a <ref id="JTable">JTable</ref>; it can be used to select which
    JTable columns are visible.
    </p></dd>
</dl>
</p>


</subsubsect>

<subsubsect id="JTable">
<subhead><title>JTable</title></subhead>

<p>Many of the windows, including the Data window, display
their data in a Java widget called a <label>JTable</label>.
This displays a grid of values, with headings for each column, in
a window which you can scroll around.  Although JTables are used for
a number of different things (for instance, showing the table data itself
and showing the column metadata), the fact that the same widget is
used provides a common look and feel.
</p>

<p>Here are some of the things you can do with a JTable:
<dl>
<dt>Scroll around</dt>
<dd><p>Using the scrollbars which may appear to the right and below the
    table you can scroll around it to see parts which are not initially
    visible.
    </p></dd>

<dt>Move columns</dt>
<dd><p>By clicking on the header (grey title bit at the top) of a column
    and dragging it left or right, you can change the order of columns
    as displayed.  In some cases (the main browser display window)
    this actually has the effect of changing the order of the columns
    in the table; in other cases it is just cosmetic.
    </p></dd>

<dt>Resize columns</dt>
<dd><p>By dragging on the line between row headers you can change the width
    of the columns in the table.
    </p></dd>

<dt>Edit cells</dt>
<dd><p>In some cases, cells are editable.  If they are, then double-clicking
    in the cell will begin an edit session for that cell, and pressing
    return will confirm that the edit has been made.
    </p></dd>

<dt>Select rows</dt>
<dd><p>Sometimes rows can be highlighted; you can select one row by clicking
    on it, several by clicking and dragging over a range of rows,
    and select an extra set without deselecting an existing selection
    by keeping the 'control' key pressed down while you do it.
    </p></dd>
</dl>
</p>

<p>In some cases where a JTable is displayed, there will be a menu
on the menu bar called <label>Display</label>.
This permits you to select which columns are visible and which are hidden.
Clicking on the menu will give you a list of all the available columns
in the table, each with a checkbox by it; click the box to toggle
whether the column is displayed or not.
</p>


</subsubsect>

</subsect>

<subsect>
<subhead><title>Global Windows</title></subhead>

<p>This section provides a tour of all the windows which are not tied
to a particular table.
The main window is the <ref id="ControlWindow">Control Window</ref>;
other windows can in general be popped up from there.
</p>

<subsubsect id="ControlWindow">
<subhead><title>Control Window</title></subhead>

<p>The control window is the single top-level window from which all
the others are controlled.  When TOPCAT starts up you will see
this window, which may or may not have some tables loaded into it
according to how you started it up.
</p>

<p>The window consists of two main parts: the Table List panel on
the left, and the Current Table Properties panel on the right.
Tables loaded into TOPCAT are listed in the list panel on the left, 
identified by an index number which never changes for a given table, 
and a label which is initially its location, but can be changed
for convenience.
</p>

<p>One of the tables in the list is highlighted, which means it is selected;
you can change the selection by clicking on an item in the list.
Information about the selected table is shown
in the properties panel on the right.  This shows such things as the
number of rows and columns, current sort order, current row subset
selection and so on.  It contains some controls which allow you to
change these properties.  
Additionally, most of the buttons in the toolbar relate to the 
currently selected table.
</p>

<p>The following buttons deal with importing and exporting tables 
from TOPCAT:
<dl>
<dt>&IMG.LOAD; <ref id="load">Load Table</ref></dt>
<dd><p>Pops up a dialogue from which a new table can be loaded 
    into the Table List panel.
    </p></dd>

<dt>&IMG.SAVE; <ref id="save">Save Table</ref></dt>
<dd><p>Pops up a dialogue from which the selected table can be written out.
    </p></dd>

<dt>&IMG.COPY; Duplicate Table</dt>
<dd><p>Introduces a new copy of the currently selected table into the
    Table List panel.  Note that this table will be a copy of the current
    view of the selected table, so for instance it will only contain the
    rows in the current subset selection, and its natural row ordering will
    correspond to the current sort order.  See <ref id="save"/> for more
    details on exactly what constitutes the current view.
    </p></dd>

<dt>&IMG.REMOVE; Remove Table</dt>
<dd><p>Removes the currently selected table from the table list.
    As well as removing it from the list display on the left, 
    this will hide all windows corresponding to that table.
    It will not be possible to recover the table (except by reloading it).
    This may free up some memory within the application (though it may not,
    it depends on where the table came from).
    You will be asked for confirmation before proceeding.
    </p></dd>
</dl>
</p>

<p>The following buttons deal with creating new tables by joining together
existing ones:
<dl>

<dt>&IMG.MATCH; <ref id="MatchWindow">Match Tables</ref></dt>
<dd><p>Pops up a window which allows you to specify and execute various
    row matching operations.
    </p></dd>

<dt>&IMG.CONCAT; <ref id="ConcatWindow">Concatentate Tables</ref></dt>
<dd><p>Pops up a window which allows you to make a new table formed from
    appending all the rows of one table to the rows of another.
    </p></dd>

</dl>
</p>

<p>Many of the toolbar buttons pop up a window giving a 'view' of
the selected table (if that window has already been opened for the
selected table, the window is raised to the top of the display 
so it is can be seen).  The view buttons are as follows:
<dl>
<dt>&IMG.VIEWER; <ref id="TableViewerWindow">Data window</ref></dt>
<dd><p>Displays the table rows and columns in a scrollable viewer so you
    can see the cell contents themselves.
    </p></dd>

<dt>&IMG.PARAMS; <ref id="ParameterWindow">Parameters window</ref></dt>
<dd><p>Displays table 'parameters', that is metadata which applies to the
    whole table.
    </p></dd>

<dt>&IMG.COLUMNS; <ref id="ColumnInfoWindow">Columns window</ref></dt>
<dd><p>Displays metadata about each column such as data type, units, UCDs etc.
    </p></dd>

<dt>&IMG.SUBSETS; <ref id="SubsetWindow">Subsets window</ref></dt>
<dd><p>Displays the currently defined <ref id="subsets">row subsets</ref> 
    and enables new ones to be defined.
    </p></dd>

<dt>&IMG.STATS; <ref id="StatsWindow">Statistics window</ref></dt>
<dd><p>Calculates statistical quantities for the values in each 
    column of the table.
    </p></dd>

<dt>&IMG.PLOT; <ref id="PlotWindow">Plot window</ref></dt>
<dd><p>Permits plotting of columns against each other.
    </p></dd>

</dl>
Since there may be one of each of these kinds of windows for each
table in the list, it is possible to get a lot of windows cluttering
up your display.  The following toolbar button can help with this:
<dl>
<dt>&IMG.HIDE; Hide Windows</dt>
<dd><p>Hides any view windows corresponding to the currently selected table.
    These can be brought back to view using the toolbar buttons as usual.
    </p></dd>
</dl>
</p>

<p>The <label>Current Table Properties</label> panel contains a number of 
controls which relate to the currently selected table (they will be
blank if no table is selected).
Here is what the individual items mean:
<dl>
<dt>Label</dt>
<dd><p>The short name associated with the selected table.
    It is used in the 
    Table List panel and in labelling view windows so you can see which
    table they refer to.  It usually set initially from the location 
    whence the table was loaded, but you can change it by typing into
    the text field.
    </p></dd>

<dt>Location</dt>
<dd><p>The original source of the selected table.
    This is typically a filename or URL, but may be something else depending
    on where the table came from.
    </p></dd>

<dt>Name</dt>
<dd><p>A name associated with the selected table.
    This shows some string stored within the table which gives it a name.
    Many table formats have nowhere to store such a string, so it may be
    blank.
    </p></dd>

<dt>Rows</dt>
<dd><p>The number of rows in the selected table.
    If a Row Subset is currently in force which does not include all the
    rows, then an indication of how many are visible within that subset
    will be given too.
    </p></dd>

<dt>Columns</dt>
<dd><p>The number of columns in the selected table.
    If some are currently hidden, an indication of how many are visible
    will be given too.
    </p></dd>

<dt>Sort Order</dt>
<dd><p>A selector for the sorting order currently in effect for the 
    selected table.  
    This affects the <ref id="apparent">Apparent Table</ref>.
    You can use the selection box to
    pick one of the columns (as long as it has a sortable value, like 
    a number or a string), and the rows in the table will be sorted 
    according to the values in that column.  Whether the sort is 
    increasing or decreasing depends on the little arrow next to the
    box - you can click on this to change the sense of the sort.
    </p>

    <p>Clicking on the sort selector button calculates a sort order there
    and then, and looking at the column name displayed in it you can see
    the last sort that was done.  If the table data has changed somehow
    since that sort was done, the rows may not be in exactly the order
    the listed sort implies.
    </p></dd>

<dt>Row Subset</dt>
<dd><p>A selector for the <ref id="subsets">Row Subset</ref> currently in
    effect for the selected table.   
    This affects the <ref id="apparent">Apparent Table</ref>.
    You can use the selection box to pick one of the defined subsets,
    and the rows in that subset will become the currently selected ones.
    </p></dd>

</dl>
</p>

</subsubsect>

<subsubsect id="MatchWindow">
<subhead><title>Match Window</title></subhead>

<p>The Match Window allows you to search tables for rows which
"match" in some way. 
In a typical scenario you might have two tables each representing 
a catalogue of astronomical objects, and you want a
third table with one row for each object which has an entry in both 
of the original tables.  An object is defined as being the same one
in both tables if the co-ordinates in both rows are "similar",
for instance if the 
difference between the positions indicated by RA and Dec columns
differ by no more than a specified angle on the sky.
There are a number of variations on this however - your match criteria
might involve Cartesian coordinates instead of sky ones (or not be
physical coordinates at all), you might want to match more than two
tables, you might want to identify groups of matching objects in 
a single table, you might want the output to include rows which 
don't match as well...
</p>

<p>Matching is performed on the <ref id="apparent">Apparent Table</ref>, 
so the currently selected subset(s) of the participating table(s) 
will affect the result.
</p>

<p>Under certain circumstances, matching can be somewhat memory intensive,
and you may receive a popup informing you of an OutOfMemoryError.
To get round this you can try running TOPCAT with more memory
(see <ref id="jvmOpt"/>) or perhaps tweak the details of the match
(do it on a subset of the table rows, modify the match error - 
match errors which are too large or too small can both cause heavy 
memory usage).
</p>

<p>The Match Window provides a set of controls which allow you
to choose how the match is done and what the results will look like.
It consists of for main parts:
<dl>

<dt>Match Criteria box</dt>
<dd><p>Allows you to define what counts as a match between two rows
    </p></dd>

<dt>Match Action selector</dt>
<dd><p>Selects whether you want an <label>Internal</label>
    (between rows of a single table) or a <label>Multi-table</label> match.
    The controls provided below this selector differ according to the
    selection you make.
    </p></dd>

<dt>Log window</dt>
<dd><p>Displays progress as the match is taking place.  The scrollbar 
    at the bottom of the window also provides an indication of how 
    far through each stage processing has got.
    </p></dd>

<dt>Control buttons</dt>
<dd><p>The <label>Go</label> button starts the search when you are
    happy with the selections that you have made, and the
    <label>Stop</label> button interrupts it midway if you decide
    you no longer want the results (closing the Match Window also 
    interrupts the calculation).
    </p></dd>

</dl>
The following sections describe some of the above components in 
more detail.
</p>

<subsubsubsect id="matchCriteria">
<subhead><title>Match Criteria</title></subhead>

<p>The match criteria box allows you to specify what counts as a match
between two rows.  The selection you make in this box will determine
which columns you have to fill in for the table(s) being matched 
in the rest of the window.  In most cases what you are selecting here
is the coordinate space in which rows will be compared against each other, 
and a numerical value to determine how close two rows have to be 
in terms of a metric on that space to count as a match.
</p>

<p>The following options are offered:
<dl>

<dt>Sky</dt>
<dd><p>Comparison of positions on the celestial sphere.
    In this case you will need to specify columns giving
    Right Ascension and Declination (in radians)
    for each table participating in the match.
    The Error value you must fill in is the maximum separation of matched
    points in radians around a great circle.
    </p></dd>

<dt>Spherical Polar</dt>
<dd><p>Comparison of positions in the sky taking account of radial distance.
    In this case you will need to specify columns giving 
    Right Ascension and Declination (in radians) and radial distance 
    (in arbitrary units) 
    for each table participating in the match.
    The Error value is a maximum spatial separation of matched points 
    in the same units as the radial distance.
    </p></dd>

<dt>Exact Value</dt>
<dd><p>Requires exact matching of values.
    In this case you will need to specify the column containing the match key
    for each table participating in the match;
    this might typically be an object name or index number.
    Two rows count as matching if they have exactly the same entry in 
    the specified field, except rows with a null value in that column,
    which don't match any other row.
    </p></dd>

<dt>N-dimensional Cartesian</dt>
<dd><p>Comparison of positions in an N-dimensional Cartesian space.
    In this case you will need to specify N columns giving Cartesian
    coordinates
    for each table participating in the match.
    The Error value is the maximum spatial separation of matched points.
    Currently the highest dimensionality you can select is 4-d - 
    does anyone want a higher number?
    </p></dd>

</dl>
</p>

</subsubsubsect>

<subsubsubsect>
<subhead><title>Internal Matches</title></subhead>

<p>An internal match is one which takes place on the rows of a single table.
You will see the Internal match panel if you choose the 
<label>Internal</label> option from the Match Action selector.
</p>

<p>In this panel you must specify the table
on which the match is to be done, and columns from that table which 
correspond to the values needed by the 
<ref id="matchCriteria">match criteria</ref> you have chosen.
In some cases these column selectors may have a value filled in 
automatically (if the program thinks it can guess appropriate ones)
but you should ensure that it has guessed correctly in this case.
Only suitable columns are available for choosing from these column
selectors; in most cases this means numeric ones.
</p>

<p>You are offered a number of options to determine how
the results will be presented.  In each case a new table will be 
created as a result of the match.  The options for what it will look like
are these:
<dl>

<dt>Mark Groups of Rows</dt>
<dd><p>The result is a table the same as the input table but with two 
    additional columns: <label>MatchID</label> and <label>MatchCount</label>.
    Each group of rows which matched is assigned a unique integer,
    recorded in the MatchId column, and the size of each group is 
    recorded in the MatchCount column.
    Rows which don't match any others (singles) have null values in
    both these columns.
    So for example by sorting the resulting table
    on MatchID you can group rows that match next to each other;
    or by sorting on MatchCount you can see all the pairs, followed by
    all the triples, ...
    </p>
    <p>You can use this information in other ways, for instance if you
    create a new <ref id="subsets">Row Subset</ref> using the expression
    "<code>MatchID == 5</code>" you could select only those 
    rows which form part of 5-object clusters.
    </p>
    <p>If columns called MatchID or MatchCount already exist in the
    input table, they are renamed to MatchID_old/MatchCount_old in the
    result table.
    </p></dd>

<dt>Eliminate All Grouped Rows</dt>
<dd><p>The result is a new table containing only "single" rows, that is
    ones which don't match any other rows in the table according to the
    match criteria.  Any rows which match are thrown out.
    </p></dd>

<dt>Eliminate All But First of Each Group</dt>
<dd><p>The result is a new table in which only one row (the first in the
    input table order) from each group of matching ones is retained.
    A subsequent internal match with the same criteria would therefore
    show no matches.
    </p></dd>

<dt>New Table With Groups of Size N</dt>
<dd><p>The result is a new "wide" table consisting of matched rows in 
    the input table stacked next to each other.  
    Only groups of exactly N rows in the input table are used to 
    form the output table; each row of the output table consists of
    the columns of the first group member, followed by the columns of
    the second group member and so on.  The output table therefore has
    N times as many columns as the input table.
    The column names in the new table have "_1", "_2", ...
    appended to them to avoid duplication.
    </p></dd>
 
</dl>
</p>

</subsubsubsect>

<subsubsubsect>
<subhead><title>Multi-table Matches</title></subhead>

<p>A multi-table match is, as its name suggests, one which combines
results from several input tables to produce one result table based
on what rows from the input tables match each other.
</p>

<p>You can select how many tables you want to match using the
<label>Match Action</label> selector.  According to how many tables
you choose you will see a number of different forms for you to
select which columns correspond to the values needed by the
<ref id="matchCriteria">match criteria</ref> you have selected.
In some cases these column selectors may have a value filled in 
automatically (if the program thinks it can guess appropriate ones)
but you should ensure that it has guessed correctly in this case.
Only suitable columns are available for choosing from these column
selectors; in most cases this means numeric ones.
</p>

<p>Below the column selectors for each table, there is a panel
which allows you to choose what the result will look like.
In all cases, the result table will have all the columns from the
first input table, followed by all the columns from the second
input table, and so on.  If any of the column names clash, they
are renamed to avoid confusion.
For each table, you can choose whether the result should contain
only the matched rows, or all the rows from the input.
If only the matched rows are chosen for all input tables, then each 
result row contains column entries from each of them.
If some of them have "All Rows" selected however, rows in these tables
which don't match will be copied to rows in the result table with
blanks in the columns used for the other tables.
</p>


</subsubsubsect>

<subsubsubsect>
<subhead><title>Notes on Matching</title></subhead>

<p>This section provides a bit more detail on the details of the matching
routines.
</p>

<p>A <em>pair</em> of matched rows is defined according to the selected
<ref id="matchCriteria">match criteria</ref>.
Whether there is one table or multiple ones, the program first 
scans all the rows to find all such pairs.
The matching algorithm should correctly identify all and only those
row pairs which are related in this way.
Following this step, all the pairs are agglomerated into <em>groups</em>,
where a group is a maximal connected graph composed of nodes 
representing rows and edges representing pairs.  It follows that
each row is a member of exactly one group, or has no matches.
If a group has more than two members, then it is not guaranteed that
the selected match criteria hold for all pairs within it.
</p>

</subsubsubsect>

</subsubsect>

<subsubsect id="ConcatWindow">
<subhead><title>Concatenation Window</title></subhead>

<p>The Concatenation Window allows you to join two tables together
so that all the rows of the first ("base") table are followed by all 
the rows of the second ("appended") table.  The result is a new 
table which has a number of rows equal to the sum of the two it has
been made from.
The columns in the resulting table are the same as those of the base table.
To perform the concatenation, you have to specify which columns from the
appended table correspond to which ones in the base table.  Of course,
this sort of operation only makes sense if at least some of the columns in
both tables have the same meaning.
</p>

<p>The concatenation window allows you to select the base and appended
tables, and for each column in the base table to specify which row
in the appended table it corresponds to.  You may select a blank for
this, in which case the column in question will have all null entries
in the resulting table.
In some cases these column selectors may have a value filled in 
automatically if the program thinks it can guess appropriate ones,
but you should ensure that it has guessed correctly in this case.
Only suitable columns are available for choosing from these column
selectors; in most cases this means numeric ones.
</p>

<p>The result is created from the <ref id="apparent">Apparent</ref> 
versions of the base and appended tables, so that any row subsets, 
hidden columns, or sorts currently in force will be reflected in the
output.
</p>

</subsubsect>

<subsubsect id="HelpWindow">
<subhead><title>Help Window</title></subhead>

<p>The help window is a browser for displaying help information on TOPCAT.
It views the text contained in this document.
The panel on the left hand side gives a hierarchical
view of the available help topics, and the panel on the right hand
side displays the help text itself.  The bar in between the two
can be dragged with the mouse to affect the relative sizes of
these windows.
</p>

<p>The toolbar contains these extra buttons:
<dl>
<dt>&IMG.BACKWARD; Back</dt>
<dd><p>Moves backward through the list of topics in the order you have
    looked at them.
    </p></dd>

<dt>&IMG.FORWARD; Forward</dt>
<dd><p>Moves forward through the list of topics in the order you have
    looked at them.
    </p></dd>

<dt>&IMG.PRINT; Print</dt>
<dd><p>Pops up a dialogue to permit printing of the current page to a
    file or printer.
    </p></dd>

<dt>&IMG.PAGE_SETUP; Page Setup</dt>
<dd><p>Pops up a dialogue to do printer setup.
    </p></dd>
</dl>
</p>

<p>The help browser is an HTML browser and some of the hyperlinks in
the help document reference documents outside of the help document
itself.  Selecting these links will go to the external documents.
When the viewer is displaying an external document, its URL will
be displayed in a line at the bottom of the window.  You can cut
and paste from this using your platform's usual mechanisms for this.
</p>

</subsubsect>

<subsubsect id="MethodWindow">
<subhead><title>Available Functions Window</title></subhead>

<p>This window displays all the functions (Java methods) which are
available for use when writing <ref id="jel">algebraic expressions</ref>.
They are grouped by the class which defines them, and displayed
in a tree-like structure.
</p>

<p>When initially displayed, the window shows just the names of
the classes which provide methods.
By double-clicking on these names (or equivalently
by clicking on their 'handle': &IMG.COLLAPSED;)
you can open them up to see the methods they contain.
The listing here doesn't describe what these methods do, but the
name and list of arguments may give you a clue.
</p>

<p>Each method has a listing something like this:
<verbatim>
   float average( int, int )
</verbatim>
which means that there is a function called "average" which takes two
arguments of type <code>int</code> (= integer), and returns a value of
type <code>float</code> (= floating point).
</p>

<p>Using the Add button (&IMG.ADD;)
you can specify the name of a class to add to those available.
You should enter the fully-qualified class name (i.e. including the
dot-separated package path).  The class that you specify must be
on the class path which was current when TOPCAT was started.
It is also possible to specify classes which should appear here
by supplying their names as the values of the system property:
<verbatim>
   gnu.jel.static.classes
</verbatim>
More than one class can be specified; their names should be separated
by colons.  See <ref id="jvmOpt"/> for how to specify property values.
</p>

<p>Any public static methods declared in the classes specified in any
of these ways will be available for use in the expressions you use
to define <ref id="synthetic">synthetic columns</ref> 
or algebraically-defined <ref id="subsets">row subsets</ref>.
</p>


</subsubsect>

</subsect>

<subsect>
<subhead><title>Table View Windows</title></subhead>

<p>Many of the windows you will see within TOPCAT display information
about a single table.
There are several of these, each displaying a different aspect of
the table data - statistics, column metadata, plotted values etc.
There is one of each type for each of the tables currently loaded, 
though they won't necessarily all be displayed at once.
The title bar of these windows will say something like
<label>TOPCAT(3): Table Columns</label>,
which indicates that it is displaying information about the column 
metadata for the table labelled "3:" in the 
<ref id="ControlWindow">Control Window</ref>.
</p>

<p>To open any of these windows, select the table of interest in
the Control Window and click the appropriate toolbar button.
This will either open up a new window of the sort you have requested,
or if you have already viewed it, will make sure it's visible.
</p>

<p>The following sections describe each of these table view windows in turn.
</p>

<subsubsect id="TableViewerWindow">
<subhead><title>Data Window</title></subhead>

<p>The Data Window presents a <ref id="JTable">JTable</ref>
containing the actual cells of the "<ref id="apparent">apparent table</ref>"
- that is it reflects the current row subset and sort order.  
You can scroll around the table in the usual way. 
In most cases you can edit cells by double-clicking in them, though 
some cells (e.g. ones containing arrays rather than scalars) cannot 
currently be edited.  If it looks like an edit has taken place, it has.
</p>

<p>The following buttons are available in the toolbar:
<dl>
<dt>&IMG.INCLUDE_ROWS; Subset From Selected Rows</dt>
<dd><p>Defines a new <ref id="subsets">Row Subset</ref> consisting of those
    rows which are currently highlighted.  You can highlight a 
    contiguous group of rows by dragging the mouse over them; 
    further contiguous groups can be added by holding the 
    <label>Control</label> key down while dragging.
    </p></dd>

<dt>&IMG.EXCLUDE_ROWS; Subset From Unselected Rows</dt>
<dd><p>Defines a new Row Subset consisting of those rows which are visible
    but currently not highlighted.  You can highlight a 
    contiguous group of rows by dragging the mouse over them;
    further contiguous groups can be added by holding the 
    <label>Control</label> key down while dragging.
    </p></dd>
</dl>
</p>

<p>As well as the normal menu, right-clicking over one of the columns
in the displayed table will present a 
column popup menu, which provides a convenient
way to do some things with the column in question:
<dl>

<dt>Hide</dt>
<dd><p>Hides the column.  It can be reinstated from the 
    <ref id="ColumnInfoWindow">Columns window</ref>.
    </p></dd>

<dt>Synthetic Column</dt>
<dd><p>Pops up a dialogue which will insert a new synthetic column
    just after this one.
    </p></dd>

<dt>Sort up</dt>
<dd><p>Sorts the table rows according to ascending value of the contents of
    the column.  Only available if some sort of order (e.g. numeric or
    alphabetic) can sensibly be applied to the column.
    </p></dd>

<dt>Sort down</dt>
<dd><p>Sorts the table rows according to descending value of the contents of
    the column.  Only available if some sort of order (e.g. numeric or
    alphabetic) can sensibly be applied to the column.
    </p></dd>

</dl>
</p>

</subsubsect>

<subsubsect id="ParameterWindow">
<subhead><title>Parameters Window</title></subhead>

<p>The Parameter Window displays metadata which applies to the whole table
(rather than that for each column).  In table/database parlance, an item of
per-table metadata is often known as a "parameter" of the table.
The number of rows and columns will always be listed; many table file
formats don't have facilities for storing other table parameter metadata.
VOTable is one that does.
</p>

<p>The display is a <ref id="JTable">JTable</ref> with one row for each
parameter.  It indicates the parameter's name, its value, the type of 
item it is (integer, string etc) and other items of interest such as 
units, dimensionality or UCD if they are defined.  
If a column of the table has no entries
(for instance, the Units column might be empty because none of the 
parameters has had units defined for it) then that column may be absent
from the display - in this case the <label>Display</label> menu can be
used to reveal it.
Entries in this table can be edited as usual.
</p>

<p>It is not currently possible to add parameters, but it should be -
watch this space.
</p>

</subsubsect>

<subsubsect id="ColumnInfoWindow">
<subhead><title>Columns Window</title></subhead>

<p>The Columns Window displays a <ref id="JTable">JTable</ref>
giving all the information (metadata)
known about each column in the table.  It may take a little bit
of getting used to, since each <var>column</var> in the main data table
is represented by a <var>row</var> in the JTable displayed here.
The order and widths of the columns of JTable widget can be
changed in the same way as those for the 
<ref id="TableViewerWindow">data window</ref> JTable,
but this has no effect on the data.
</p>

<p>The leftmost column, labelled "Visible", contains a checkbox in
each row (one for each column of the data table).
Initially, these are all ticked.
By clicking on those boxes, you can toggle them between ticked and
unticked.  When unticked, the column in question will become hidden.
The row can still be seen in this window, but the corresponding data
column is no longer a part of
the <ref id="apparent">apparent table</ref>, so will not be seen
in the <ref id="TableViewerWindow">Data window</ref> or appear in
exported versions of the table.
You can tick/untick multiple columns at once by highlighting a set of
rows by dragging the mouse over them and then using the
Hide Selected (&IMG.FALSE;) or Reveal Selected (&IMG.TRUE;) toolbar buttons
or menu items.
</p>

<p>Each column in the displayed JTable corresponds to one piece of 
information for each of the columns in the data table -
column name, description, UCD etc.
Tables of different types (e.g. ones read from different input formats)
can have different categories of metadata.  By default a metadata
category is displayed in this JTable if at least one
table column has a non-blank
value for that metadata category, so for instance if no table columns
have a defined UCD then the UCD column will not appear.
Categories can be made to appear and disappear however by using the
<label>Display</label> menu. 
The metadata items are as follows:
<dl>

<dt>Visible</dt>
<dd><p>Indicates whether the column is part of the Apparent Table.
    If this box is not filled in,
    then for most purposes the column will be hidden from display.
    You can toggle visibility by clicking on this column.
    </p></dd>

<dt>Name</dt>
<dd><p>The name of the column.
    </p></dd>

<dt>$ID</dt>
<dd><p>A unique and unchanging ID value for each column.   These are useful
    in defining expressions for synthetic columns, since they are
    guaranteed unique for each column.  Although the column Name can
    be used as well, the Name may not be unique and may not have the
    correct form for use in an algebraic expression.
    </p></dd>

<dt>Class</dt>
<dd><p>The Java class of the items in that column.  You don't have to know
    very much Java to understand these; they are Float or Double for
    floating point numbers; Byte, Short, Integer or Long for integer
    numbers, Boolean for a logical (true/false) flag,
    or String for a string of ASCII or Unicode characters.
    There are other possibilities, but these will cover most.
    The characters '[]' after the name of the class indicates that each
    cell in the column holds an array of the indicated type.
    </p></dd>

<dt>Shape</dt>
<dd><p>Cells of a table can contain arrays as well as scalars.
    If the column contains an array type, this indicates the shape that
    it should be interpreted as.  It gives the dimensions in column-major
    order.  The last element may be a '*' to indicate that the size
    of the array may be variable.  For scalar columns, this item will be blank.
    </p></dd>

<dt>Units</dt>
<dd><p>The units in which quantities in this column are expressed.
    </p></dd>

<dt>Expression</dt>
<dd><p>The algebraic expression defining the values in this column.
    This will only be filled in if the column in question is a
    synthetic column which you have added, rather than one present in
    the data in its original loaded form.
    </p></dd>

<dt>Description</dt>
<dd><p>A textual description of the function of this column.
    </p></dd>

<dt>UCD</dt>
<dd><p>The UCD associated with this column, if one is specified.
    UCDs are <webref url="http://vizier.u-strasbg.fr/doc/UCD.htx">Uniform
    Content Descriptors</webref>, and indicate the semantics
    of the values in this column.
    </p></dd>

<dt>UCD Description</dt>
<dd><p>If the string in the UCD column is the identifier of a known UCD,
    the standard description associated with that UCD is shown here.
    </p></dd>

</dl>
There may be other items in the list specific to the table in question.
</p>

<p>The order in which the rows of this JTable are presented
is the same as the order in which the columns appear in the
browser window.  If the columns are moved around in the browser
window, the corresponding rows will move around in this window.
</p>

<p>The following buttons are available in the toolbar:
<dl>
<dt>&IMG.ADD; New Synthetic Column</dt>
<dd><p>This allows you to add a new column based on the existing ones -
    see the section on <ref id="synthetic">Synthetic columns</ref>.
    The new column will be added by default after the last selected
    column, or at the end if none is selected.
    Also available as the <label>New Synthetic Column</label> item in the
    <label>Columns</label> menu.
    </p></dd>

<dt>&IMG.FALSE; Hide Selected Column(s)</dt>
<dd><p>If any of the JTable rows are selected, then clicking this button
    will hide them, that is, remove them from the
    <ref id="apparent">Apparent Table</ref>.
    This has the same effect as deselecting all the checkboxes corresponding
    to these columns in the <label>Visible</label> column.
    Also available as the <label>Hide selected column(s)</label> item
    in the <label>Columns</label> menu.
    </p></dd>

<dt>&IMG.TRUE; Reveal Selected Column(s)</dt>
<dd><p>If any of the JTable rows are selected, then clicking this button
    will make sure they are visible, that is, that they appear in 
    the <ref id="apparent">Apparent Table</ref>.
    This has the same effect as selecting all the checkboxes corresponding
    to these columns in the <label>Visible</label> column.
    Also available as the <label>Reveal selected column(s)</label> item
    in the <label>Columns</label> menu.
    </p></dd>

</dl>
</p>

<p>The following extra menu items are available:
<dl>
<dt>Sort selected up</dt>
<dd><p>If a single column is selected then the rows in the 
    <ref id="apparent">apparent table</ref>
    will be re-ordered so that the selected column's values appear
    in ascending order.
    </p></dd>

<dt>Sort selected down</dt>
<dd><p>If a single column is selected then the rows in the
    <ref id="apparent">apparent table</ref>
    will be re-ordered so that the selected column's values appear
    in descending order.
    </p></dd>

</dl>
</p>

</subsubsect>

<subsubsect id="SubsetWindow">
<subhead><title>Subsets Window</title></subhead>

<p>The Subsets Window displays the <ref id="subsets">Row Subsets</ref>
which have been defined.
</p>

<p>The subsets are displayed in a <ref id="JTable">JTable</ref>
widget with a row for each subset.  The columns of the JTable
are as follows:
<dl>
<dt>#ID</dt>
<dd><p>A unique and unchanging identifier for the subset, which consists of
    a "#" character followed by an integer.  This can be used to refer
    to it in <ref id="jel">expressions</ref> for synthetic columns
    or other subsets.
    </p></dd>

<dt>Name</dt>
<dd><p>A name used to identify the subset.  It is ideally, but not necessarily,
    unique.
    </p></dd>

<dt>Size</dt>
<dd><p>The number of rows in this subset.  This column is initially blank,
    and is not guaranteed to remain correct if the subset definitions
    or the table data change, since counting may be an expensive
    process so it is not automatically done with every change.
    A count can be forced by using the 'Count Subsets' button described
    below.
    </p></dd>

<dt>Expression</dt>
<dd><p>If the subset has been defined by an algebraic expression, this will be
    here.  It can be edited to change the expression.
    </p></dd>

<dt>Column $ID</dt>
<dd><p>If the subset has been defined by equivalence with a boolean-valued
    column, this will show the $ID of the column that it came from.
    </p></dd>
</dl>
</p>

<p>The following toolbar buttons are available in this window:
<dl>

<dt>&IMG.ADD; New Subset</dt>
<dd><p>Pops up a dialogue inviting you to define a new Row Subset.
    You should enter a name and an expression, following the
    rules presented in the section on <ref id="jel">Expression Syntax</ref>.
    </p></dd>

<dt>&IMG.INVERT; Invert Subset</dt>
<dd><p>Creates a new subset which is the complement of the selected one.
    The new one will include all the rows which are excluded by the
    selected one (and vice versa).
    </p></dd>

<dt>&IMG.TO_COLUMN; To Column</dt>
<dd><p>If one of the rows in the JTable is selected, this will turn that
    subset into a new column.  It will pop up the
    <ref id="synthetic">Synthetic Columns</ref> dialogue, filled in
    appropriately to add a new boolean column to the table based on
    the selected subset.  You can either accept it as is, or
    modify some of the fields.
    </p></dd>

<dt>&IMG.COUNT; Count Subsets</dt>
<dd><p>Counts how many rows are in each subset and displays this in the
    'size' columns.  This forces a count or recount to fill in or
    update these values.
    </p></dd>

</dl>
</p>

</subsubsect>

<subsubsect id="StatsWindow">
<subhead><title>Statistics Window</title></subhead>

<p>The Statistics Window can display statistics for the values in each
of the table's columns.  The calculated values are displayed in a
<ref id="JTable">JTable</ref>  widget with a row for each
column in the main table, and a column for each of a number of
statistical quantities calculated on <ref id="subsets">some or all</ref> of
the values in the data table column corresponding to that grid row.
The following columns are shown by default:
<dl>
<dt>Name</dt>
<dd><p>The name of the column in the main table represented by this grid row.
    </p></dd>

<dt>Mean</dt>
<dd><p>The mean value of the good cells.  For boolean columns, this is
    the proportion of good cells which are True.
    </p></dd>

<dt>S.D.</dt>
<dd><p>The standard deviation of the good cells.
    </p></dd>

<dt>Minimum</dt>
<dd><p>The minimum value.  For numeric columns the meaning of this is quite
    obvious.  For other columns, if an ordering can be reasonably defined
    on them, the 'smallest' value may be shown.  For instance string
    values will show the entry which would be first alphabetically.
    </p></dd>

<dt>Maximum</dt>
<dd><p>As minimum, but shows the largest values.
    </p></dd>

<dt>Good cells</dt>
<dd><p>The number of non-blank cells.
    </p></dd>

</dl>
Several additional items of statistical information are also calculated,
but the columns displaying these are hidden by default.
You can reveal these by using the <label>Display</label> menu:
<dl>

<dt>Index</dt>
<dd><p>The index of the column in the main table, i.e. the order in which
    it appears in the main browser window.
    </p></dd>

<dt>$ID</dt>
<dd><p>The unique identifier label for the column in the main table.
    </p></dd>

<dt>Sum</dt>
<dd><p>The sum of all the values in the column.  For boolean columns this
    is a count of the number of True values in the column.
    </p></dd>

<dt>Variance</dt>
<dd><p>The variance of the good cells.
    </p></dd>

<dt>Row of min.</dt>
<dd><p>The index of the row in the main table at which the minimum value
    occurred.
    </p></dd>

<dt>Row of max.</dt>
<dd><p>The index of the row in the main table at which the maximum value
    occurred.
    </p></dd>

<dt>Bad cells</dt>
<dd><p>The number of blank cells; the sum of
    this value and the Good cells value will be the same for each
    column.
    </p></dd>

<dt>Cardinality</dt>
<dd><p>If the column contains a small number of distinct values
    then that number, the column's <em>cardinality</em> will be shown here.
    Cardinality is the number of distinct values which appear in that column.
    If the number of values represented is large (currently &gt;50) or
    a large proportion of the non-bad values (currently &gt;75%) then
    no value is shown.
    </p></dd>

</dl>
</p>

<p>The quantities displayed in this window are not necessarily those for
the entire table; they are those for a particular
<ref id="subsets">Row Subset</ref>.
At the bottom of the window is a selector button which allows you
to select which subset you want the calculations to be done for.
By clicking on this you can calculate the statistics for different
subsets.
>When the window is first opened, or when it is invoked from a menu
or the toolbar in the main
browser window, the subset will correspond to the active subset in
the main window.
</p>

<p>The toolbar contains the following extra button:
<dl>
<dt>&IMG.REDO; Recalculate</dt>
<dd><p>Once statistics have been calculated for a given subset they are
    cached and not normally recalculated again.
    Use this button if you want to force a recalculation because the
    data may have changed.
    </p></dd>
</dl>
</p>

<p>For a large table the calculations may take a while.  While they are
being performed you can interact with the window as normal,
but a progress bar is shown at the bottom of the window.
If you initiate a new calculation (by pushing the Recalculate button or
selecting a new subset) or close the window during a calculation,
the superceded calculation will be stopped.
</p>

</subsubsect>

<subsubsect id="PlotWindow">
<subhead><title>Plot Window</title></subhead>

<p>The plot window allows you to plot the values in two table
columns against each other.
</p>

<p>On the plotting surface a marker is plotted for each item in the
selected <ref id="subsets">Row Subsets</ref> at a position determined by the
values in the table columns selected to provide the X and Y values.
A marker will only be plotted if both the X and Y values are not blank.
If more than one subset is being plotted, they will be drawn using
different markers.  A key on the right hand side indicates the marker
being used for each subset.  The marker types can be changed using the
<label>Marker Type</label> item in the <label>Plot</label> menu.
</p>

<p>You can zoom in and out of the plot by dragging with the left mouse
button down and right (zoom in) or up and left (zoom out) - this takes
a little practice but is easy to use after a couple of goes.
If you get lost you can push the
Rescale button (&IMG.RESIZE;) to return the scaling to normal.
</p>

<p>Below the plot there are two sets of controls for selecting the
table column which will provide the X and Y axis values.
Each one consists of two parts:
<dl>
<dt>Column selector</dt>
<dd><p>A selection box from which column names in the main table can be
    selected.  Only columns which can be plotted from (i.e. scalar numeric
    ones) will be displayed in this selector.
    </p></dd>

<dt>Log checkbox</dt>
<dd><p>This checkbox can be clicked to toggle whether the axis in question
    is to be plotted logarithmically or not.  If it is logarithmic,
    any negative values are simply ignored (not plotted).
    </p></dd>
</dl>
</p>

<p>Below the plot there is a set of checkboxes headed
<ref id="subsets">Row Subsets</ref>.
Click on these to select or deselect which subsets should be plotted in
this graph.
Different subsets are plotted
using different markers, so you can see where different groups of results
lie in relation to each other.
You can also use the <label>Subsets To Plot</label> item on the
<label>Subsets</label> menu.
</p>

<p>The following extra buttons are available on the toolbar:
<dl>

<dt>&IMG.PRINT; Print</dt>
<dd><p>Pops up a dialogue which will print the current plot as an EPS file
    The plot is currently not really of publication quality.
    </p></dd>

<dt>&IMG.REDO; Replot</dt>
<dd><p>Redraws the current plot from scratch.
    This may be useful if the data in the
    table has been changed.
    </p></dd>

<dt>&IMG.RESIZE; Rescale</dt>
<dd><p>Rescales the axes of the current plot so that it contains all
    the data points in the currently selected subsets.
    By default the plot will be scaled like this, but it it may have changed
    because of changes in the subset selection or from zooming in or out.
    </p></dd>

<dt>&IMG.GRID_ON; Grid</dt>
<dd><p>Toggles whether a grid is drawn over the plotting surface or not.
    </p></dd>

<dt>&IMG.VISIBLE_SUBSET; Subset From Visible</dt>
<dd><p>Defines a new <ref id="subsets">Row Subset</ref>
    consisting of only the points which
    are currently visible on the plotting surface.
    A dialogue will be popped up to ask for a name for the new subset.
    In this way points in a given region of the parameter space can
    be grouped together.
    </p></dd>

</dl>
</p>

<p>For a large table and/or many subsets the plotting may take a little while.
While it is being done you can see the points appearing in the plot
as they are done, and a progress bar is shown at the bottom of the window.
If you start a new plot (by changing the plot characteristics or pressing
the Replot button &IMG.REDO;) or close the window while a plot is being done,
the superceded plot will be stopped.
</p>

</subsubsect>

</subsect>

</sect>

<sect id="apparent">
<subhead><title>Apparent Table</title></subhead>

<p>An "Apparent Table" is a particular view of a table which can be
influenced by some of the viewing controls.
</p>

<p>When you load a table into TOPCAT it has a number of characteristics
like the number of columns and rows it contains, the order of the rows
that make up the data, the data and metadata themselves, and so on.
While manipulating it you can modify the way that the table appears
to the program, by changing or adding data or metadata, 
or changing the order or selection of columns or rows that are visible.
For each table the "apparent table" is a table which corresponds to
the current state of the table according to the changes that you have made.
</p>

<p>In detail, the apparent table consists of the table as it was originally
imported into the program plus any of the following changes that you
have made:
<ul>
<li>New columns added</li>
<li>Existing columns hidden</li>
<li>Order of columns changed</li>
<li>Order of rows changed by doing a sort</li>
<li>Selection of rows changed by applying a 
    <ref id="subsets">Row Subset</ref></li>
<li>Changes to cell data by editing cells in the Data window</li>
<li>Changes to table metadata by editing cells in the Parameter window</li>
<li>Changes to column metadata by editing cells in the Columns window</li>
</ul>
</p>

<p>The apparent table is used in the following contexts:
<dl>

<dt>Data Window</dt>
<dd><p>The <ref id="TableViewerWindow">Data window</ref>
    always shows the apparent table, so if you are in doubt about what
    form a table will get exported in, you can see what it looks like there.
    </p></dd>

<dt>Exports</dt>
<dd><p>When you save a table, or export it by dragging it off the 
    Table List panel in the <ref id="ControlWindow">Control Window</ref>,
    or create a duplicate table, 
    it is the apparent table which is copied.
    So for instance if you define a subset containing only the first 
    ten rows of a table
    and then save it to a new table, or create a duplicate within TOPCAT
    using the &IMG.COPY; toolbar button, the resulting table will contain
    only those ten rows.
    </p></dd>

<dt>Joins</dt>
<dd><p>When you use the <ref id="MatchWindow">Match Window</ref> or
    <ref id="ConcatWindow">Concatenation Window</ref> to construct a 
    new table on the basis of one or more existing ones,
    the new table will be built on the basis of the apparent versions
    of the tables being operated on.
    </p></dd>

</dl>
Some of the other table view windows are affected too, for instance
the Columns window displays its columns in the order that they
appear in the Apparent Table.
</p>

</sect>


<sect id="subsets">
<subhead><title>Row Subsets</title></subhead>

<p>A useful feature of the TOPCAT is the ability to define
<var>Row Subsets</var>.  A Row Subset is effectively a table composed
from some subset of the rows in a whole table being viewed by the TOPCAT
tool.  You can define these and use them in several different ways;
the usefulness comes from defining them in one context and using them
in another.
The <ref id="SubsetWindow">Subset Window</ref> displays the currently
defined Row Subsets and permits some operations on them.
</p>

<p>You can define a group of rows in the table
in a number of ways (by writing a boolean expression, selecting
rows in the browser, identifying points in a plot) and view this
subset as a separate table, or display different subsets using different
markers during plotting.
</p>

<subsect>
<subhead><title>Defining Subsets</title></subhead>

<p>You can define a Row Subset in one of the following ways:

<dl>
<dt>Selecting rows in the browser</dt>
<dd><p>You can select a single row in the main table browser window by
    clicking on it, or select a group of adjacent rows by dragging
    the mouse over them.  You can add more rows to the selection by
    keeping the &lt;Control&gt; button pressed while you do it.
    Once you have a set of rows selected you can use the
    <label>Subset From Selected Rows</label> or
    <label>Subset From Unselected Rows</label>
    items in the <ref id="TableViewerWindow">Data window</ref> 
    <label>Subsets</label> menu to create a new subset based
    on the set of highlighted rows or their complement.
    </p>

    <p>Combining this with sorting the rows in the table can be
    useful; if you do a Sort Up on a given column and then drag out the
    top few rows of the table you can easily create a subset consisting
    of the highest values of a given field.
    </p></dd>

<dt>Defining an algebraic expression</dt>
<dd><p>From the <ref id="SubsetWindow">Subset Window</ref> using the
    <label>Add New Subset</label> tool or menu item will pop up a 
    dialogue in which you can enter an algebraic expression.
    This is a java-like expression which can refer to the
    values of cells in various columns in a row to produce a boolean
    (true/false) result indicating whether the row should be included
    in that subset or not.  
    Specifying these is explained in <ref id="jel"/>.
    </p></dd>

<dt>Boolean columns</dt>
<dd><p>Any column which has a boolean (true/false) type value can be used
    as a subset; rows in which it has a true value are in the subset
    and others are not.
    </p></dd>

<dt>Visible plotted points</dt>
<dd><p>In the <ref id="PlotWindow">Plot Window</ref> you can plot columns
    against each other, and subsequently zoom in and out using the
    mouse.  If you zoom to display only some of the plotted points and
    then use the <label>New Subset From Visible</label>
    menu item or toolbar button
    (&IMG.VISIBLE_SUBSET;) then a new subset will be
    created containing only rows represented by points in the field of
    view of the plot at the time.
    </p></dd>

</dl>
</p>

<p>In all these cases you will be asked to assign a name for the subset.
As for column names, it is a good idea to follow a few rules for these
names.  They should be:
<ul>
<li>Different from other subset names, even apart from upper/lower case
    distinctions</li>
<li>In the form of a java identifier (starts with a letter, continues with
    alphanumerics including underscore)</li>
<li>Not too long</li>
</ul>
</p>

<p>In the first two subset definition methods above, the newly-defined
subset will be applied immediately to the 
<ref id="apparent">Apparent Table</ref>
</p>

</subsect>

<subsect>
<subhead><title>Using Subsets</title></subhead>

<p>Once a Row Subset is defined it can be used in one of the following ways:

<dl>
<dt>Apply to Apparent Table</dt>
<dd><p>You can select a defined subset from the
    <label>Row Subset</label> control in the 
    <ref id="ControlWindow">Control Window</ref>.
    In this case it will become the current subset of the 
    <ref id="apparent">Apparent Table</ref>,
    so that only the selected rows will be visible in
    the <ref id="TableViewerWindow">Data window</ref> and 
    any export (such as a save) of the table will only use those rows.
    </p></dd>

<dt>Calculating Statistics</dt>
<dd><p>In the <ref id="StatsWindow">Statistics Window</ref> you can calculate
    statistics not just for the column values in the whole table, but
    for any defined subset of the rows.  Use the subset selector
    button at the bottom of the window.
    </p></dd>

<dt>Plotting</dt>
<dd><p>In the <ref id="PlotWindow">Plot Window</ref> the plot is drawn with
    different markers for points appearing in different subsets.
    Use the <label>Subsets to Plot</label> item in the <label>Subsets</label>
    menu to select which
    subsets should be displayed.  Markers are chosen for each subset
    automatically, and a key of which subset is represented by which
    kind of marker is shown to the right of the plot.
    In general markers from earlier subsets in the list
    are obscured by ones later in the list.  In future versions more
    flexibility will be introduced into the display.
    </p></dd>

</dl>
</p>

</subsect>

</sect>

<sect id="synthetic">
<subhead><title>Synthetic Columns</title></subhead>

<p>As well as the columns that are present in the table as loaded into TOPCAT,
it is possible to define additional "synthetic" columns, composed
as a function of the other columns.
The idea is that the value of the cells in a given row in this column
will be calculated on demand as a function of the values of cells
of other columns in that row.  You can think of this as providing
functionality like that of a column-oriented spreadsheet.
</p>

<p>This is done using the Synthetic Column dialogue, which can be
activated from the <label>Columns</label> menu of the 
<ref id="ColumnInfoWindow">Columns Window</ref>
or a popup menu got by right clicking on one of the columns in
the main browser window.
</p>

<p>The Synthetic Column dialogue asks you to enter the following
pieces of information for the new column you will create:
<dl>
<dt>Name</dt>
<dd><p>The name of the new column.  This should preferably be unique
    (different from all the other column names).  It will be easier to
    use it in other expressions if it is also:
    <ul>
    <li>Different from other columns even apart from upper/lower case
        distinctions</li>
    <li>In the form of a java identifier (starts with a letter, continues
        with alphanumerics including underscore)</li>
    <li>Not too long</li>
    </ul>
    </p></dd>

<dt>Units</dt>
<dd><p>The units of the column.  If the quantity it represents is dimensionless
    or you don't know the units, this can be left blank.  It would be
    a good idea to use a similar format for the units to that used for
    the existing columns in the table.
    </p></dd>

<dt>Description</dt>
<dd><p>A short textual description of what the values contained by this
    column are.  May be left blank.
    </p></dd>

<dt>Expression</dt>
<dd><p>This is the algebraic expression which defines the values that the
    cells in the new column of the table will have.  It may be any
    legal expression which returns a primitive or object.  Broadly
    speaking you can use mathematical operators to combine values
    taken from the same row in other columns which are referred to
    by the names or $ID identifiers of those columns.
    The rules are explained in <ref id="jel"/>.
    If the expression you enter doesn't make sense you will be shown
    an error message and asked to re-enter the expression.
    </p></dd>

<dt>UCD</dt>
<dd><p>A <webref url="http://vizier.u-strasbg.fr/doc/UCD.htx"
                 >Unified Content Descriptor</webref> 
    for the column; a UCD is a semantic label
    attached to the column indicating what kind of quantity it contains
    by picking one option from a list defined by the
    <webref url="http://cdsweb.u-strasbg.fr/">CDS</webref>.
    The list of known UCDs is available via a selection box, or you
    can type a UCD in by hand.  You may leave this blank if the you do not
    wish to assign a UCD to the column.
    A brief description of the UCD selected is visible near the
    selection box itself.
    </p></dd>

<dt>Index</dt>
<dd><p>Determines the position in the displayed table at which the new
    column will initially appear.
    </p></dd>
</dl>
</p>

<p>If you wish to add more metadata items you can edit the appropriate
cells in the <ref id="ColumnInfoWindow">Columns Window</ref>.
You can edit the expression of an existing synthetic column in the same way.
</p>

<p>Once created, a synthetic column is added to the 
<ref id="apparent">Apparent Table</ref> and behaves just like any other; 
it can be moved, hidden/revealed, used in expressions for other 
synthetic columns and so on.  
If the table is saved the new column and its contents will 
be written to the new output table.
</p>

</sect>

<sect id="jel">
<subhead><title>Algebraic Expression Syntax</title></subhead>

<p>The expressions used to define
<ref id="synthetic">Synthetic Columns</ref> and some
<ref id="subsets">Row Subsets</ref> are actually expressions in
the Java language, which are compiled into Java bytecode before
evaluation.  However, this does not mean that you need to be a
Java programmer to write them.  The syntax is pretty similar to C,
but even if you've never programmed in C it's quite intutitive
how to do a lot of things.
</p>

<p>The following explanation gives
some guidance and <ref id="jelExamples">examples</ref> 
for writing these expressions.
Unfortunately a complete tutorial on writing Java expressions is beyond
the scope of this document, but it should provide enough information
for even a novice to write useful expressions.
</p>

<p>If the functions described in this section are not sufficient,
or it's unwieldy to express your function in one line of code,
you can add new functions by writing your own classes -
see <ref id="MethodWindow"/>.
</p>

<subsect>
<subhead><title>Referencing Cell Values</title></subhead>

<p>To create a useful expression for a cell in a column, you will
have to refer to other cells in different columns of the same table row.
You can do this in two ways:
<dl>
<dt>By Name</dt>
<dd><p>The Name of the column may be used if it is unique (no other column in
    the table has the same name) and if it has a suitable form.
    This means that it must have the form of a Java variable - basically
    starting with a letter and continuuing with
    letters or numbers.  In particular it cannot have any spaces in it.
    The underscore and currency symbols count as
    letters for this purpose.
    Column names are treated case-insensitively.
    </p></dd>

<dt>By $ID</dt>
<dd><p>The "$ID" identifier of the column may always be used to refer to it.
    This is just a "$" sign followed by a unique integer assigned by the
    viewer to each column when it is first encountered.
    You can find out the $ID identifier by looking in the
    <ref id="ColumnInfoWindow">Columns Window</ref>.
    </p></dd>
</dl>
</p>

<p>There is a special column whose name is "Index" and whose ID is "$0".
The value of this is the same as the row number in the unsorted table
(the grey numbers on the left of the grid in the main browser window).
</p>

<p>The value of the variables so referenced will be a primitive
(boolean, byte, short, char, int, long, float, double) if the
column contains one of the corresponding types.  Otherwise it will
be an Object of the type held by the column.
</p>

</subsect>

<subsect>
<subhead><title>Referencing Row Subset Flags</title></subhead>

<p>If you have any <ref id="subsets">Row Subsets</ref> defined
you can also access the value
of the boolean (true/false) flag indicating whether the current row
is in each subset.  Again there are two ways of doing this:
<dl>
<dt>By Name</dt>
<dd><p>The name assigned to the subset when it was created can be used
    if it is unique and if it has a suitable form.  The same comments
    apply as to column names above.
    </p></dd>

<dt>By #ID</dt>
<dd><p>The "#ID" identifier of the subset may always be used to refer to it.
    As for the "$ID" identifier for columns above, this is a unique
    index preceded by a special symbol, "#".
    </p></dd>
</dl>
In either case, the value will be a boolean value; these can be useful
in conjunction with the ternary "<code>? :</code>" operator or
when combining existing subsets using logical operators to create
a new subset.
</p>
</subsect>

<subsect>
<subhead><title>Null values</title></subhead>

<p>Without taking any special steps, if a null value (blank cell)
is encountered
in evaluating an expression (usually because one of the columns
it relies on has a null value in the row in question) then the
result of the expression is also null.
</p>

<p>It is possible to exercise more control than this, but it
requires a little bit of care,
because the expressions work in terms of primitive values
(numeric or boolean ones) which don't in general have a defined null
value.  The name "null" in expressions gives you the java <code>null</code>
reference, but this cannot be matched against a primitive value
or used as the return value of a primitive expression.
</p>

<p>For most purposes, the following two tips should enable you to
work with null values:

<dl>
<dt>Testing for null</dt>
<dd><p>To test whether a column contains a null value, prepend the
    string "<code>NULL_</code>" 
    (use upper case) to the column name or $ID.  This
    will yield a boolean value which is true if the column contains
    a blank or a floating point NaN (not-a-number) value,
    and false otherwise.
    </p></dd>

<dt>Returning null</dt>
<dd><p>To return a null value from a numeric expression, use the name 
    "<code>NULL</code>"
    (upper case).  To return a null value from a non-primitive expression
    (e.g. a String column) use the name "<code>null</code>" (lower case).
    </p></dd>
</dl>
</p>

<p>Null values are often used in conjunction with the ternary conditional
operator, "<code>? :</code>"; the expression
<verbatim>
   test ? tval : fval
</verbatim>
returns the value <code>tval</code> if the boolean expression <code>test</code>
evaluates true, or <code>fval</code> if <code>test</code> evaluates false.
See <ref id="jelExamples"/> for some examples.
</p>

</subsect>

<subsect>
<subhead><title>Operators</title></subhead>

<p>The operators are pretty much the same as in C.
The common ones are:
<dl>
<dt>Arithmetic</dt>
<dd><p>
  <dl>
  <dt><code>+</code> (add)</dt>
  <dt><code>-</code> (subtract)</dt>
  <dt><code>*</code> (multiply)</dt>
  <dt><code>/</code> (divide)</dt>
  <dt><code>%</code> (modulus)</dt>
  </dl>
</p></dd>

<dt>Logical</dt>
<dd><p>
  <dl>
  <dt><code>!</code> (not)</dt>
  <dt><code>&amp;&amp;</code> (and)</dt>
  <dt><code>||</code> (or)</dt>
  <dt><code>==</code> (identity)</dt>
  <dt><code>!=</code> (non-identity)</dt>
  <dt><code>&lt;</code> (less than)</dt>
  <dt><code>&gt;</code> (greater than)</dt>
  <dt><code>&lt;=</code> (less than or equal)</dt>
  <dt><code>&gt;=</code> (greater than or equal)</dt>
  </dl>
</p></dd>

<dt>Other</dt>
<dd><p>
  <dl>
  <dt><code>[]</code> (array dereferencing)</dt>
  <dt><code>?:</code> (conditional switch)</dt>
  <dt><code>instanceof</code> (class membership)</dt>
  </dl>
</p></dd>
</dl>
</p>

</subsect>

<subsect>
<subhead><title>Functions</title></subhead>

<p>All the static methods of Java's <code>Math</code> class 
and some other classes are available.  
You can see a full listing of these in the
<ref id="MethodWindow">Available Functions window</ref>.
Some of the more useful ones are as follows:
<dl>
<dt>Math static methods</dt>
<dd><p>
  <dl>
  <dt><code>abs(x)</code> (absolute value)</dt>
  <dt><code>cos(x)</code> (cosine)</dt>
  <dt><code>sqrt(x)</code> (square root)</dt>
  <dt><code>max(a,b)</code> (maximum)</dt>
  <dt><code>pow(a,b)</code> (exponentiation)</dt>
  <dt><code>toDegrees(rad)</code> (angle conversion)</dt>
  <dt><code>toRadians(deg)</code> (angle conversion)</dt>
  </dl>
  (See the 
   <webref url="http://java.sun.com/j2se/1.4/docs/api/java/lang/Math.html"
           >Math class javadocs</webref> for full list and details).
  </p></dd>
</dl>
</p>

<p>All the instance methods of the <code>String</code> class are provided,
for example:
<dl>
<dt>String instance methods</dt>
<dd><p>
  <dl>
  <dt><code>startsWith(s)</code> (comparison)</dt>
  <dt><code>equals(s)</code> (equality)</dt>
  <dt><code>equalsIgnoreCase(s)</code> (case-insensitive)</dt>
  <dt><code>matches(regex)</code> (regular expression matching)</dt>
  </dl>
  (See the
   <webref url="http://java.sun.com/j2se/1.4/docs/api/java/lang/String.html"
           >String class javadocs</webref> for full list and details).
  </p></dd>
</dl>
</p>

<p>Technical note for Java programmers: the public static methods of
these classes are imported into the expression namespace, so unlike
java you should write "<code>sqrt(x)</code>" ant not 
"<code>Math.sqrt(x)</code>".
</p>

</subsect>

<subsect id="jelExamples">
<subhead><title>Examples</title></subhead>

<p>Here are some examples for <ref id="synthetic">synthetic columns</ref>:
<dl>
<dt>Average</dt>
<dd><p><verbatim>
    ( first + second ) * 0.5
</verbatim></p></dd>

<dt>Outlier clipping</dt>
<dd><p><verbatim>
    min( 1000, max( value, 0 ) )
</verbatim></p></dd>

<dt>Converting a magic value to null</dt>
<dd><p><verbatim>
    jmag == 99.9 ? NULL : jmag
</verbatim></p></dd>

<dt>Converting a null value to a magic one</dt>
<dd><p><verbatim>
    NULL_jmag ? 99.9 : jmag
</verbatim></p></dd>
</dl>

and here are some examples of boolean expressions that could be used
to define <ref id="subsets">row subsets</ref> 
(or to create boolean synthetic columns):

<dl>
<dt>Within a circle</dt>
<dd><p><verbatim>
    sqrt( pow($2,2) + pow($3,2) ) &lt; 0.01
</verbatim></p></dd>

<dt>String matching</dt>
<dd><p><verbatim>
    CONSTELLATION.equalsIgnoreCase( "cygnus" )
</verbatim></p></dd>

<dt>Combining subsets</dt>
<dd><p><verbatim>
    ( #1 &amp;&amp; #2 ) &amp;&amp; ! #3
</verbatim></p></dd>

<dt>Test for non-blank value</dt>
<dd><p><verbatim>
    ! NULL_ellipticity
</verbatim></p></dd>
</dl>
</p>

</subsect>

</sect>

<sect>
<subhead><title>Acknowledgements</title></subhead>

<p>TOPCAT and the table-handling classes on which it relies have
mostly been written by
<webref url="http://www.star.bristol.ac.uk/~mbt/">Mark Taylor</webref> in
<webref url="http://www.star.bristol.ac.uk/">Bristol astrophysics group</webref>
for the <webref url="http://www.starlink.ac.uk/">Starlink</webref> project.
</p>

<p>Inspiration for many of its features has been taken from the
following pre-existing tools:
<ul>
<li><webref url="http://cm.bell-labs.com/who/tkh/mirage/index.html"
            >Mirage</webref>
    (Bell labs)</li>
<li><webref url="http://vo.iucaa.ernet.in/~voi/voplot.htm">VOPlot</webref>
    (VO-India)</li>
</ul>
</p>

<p>Apart from the J2SE itself, the following external libraries provide
important bits of its functionality:
<ul>
<li><webref url="http://ptolemy.eecs.berkeley.edu/java/ptplot5.2/ptolemy/plot/doc/index.htm">Ptplot</webref>
    (Ptolemy) for plotting</li>
<li><webref url="http://galaxy.fzu.cz/JEL/">JEL</webref>
    (GNU) for algebraic expression evaluation</li>
<li><webref url="http://www.sdss.jhu.edu/htm/">HTM</webref>
    (Sloan Digital Sky Survey) for celestial sphere row matching</li>
</ul>
</p>

<p>The following users, testers and programmers have supplied useful
comments (apologies for any missed out):
<ul>
<li>Clive Page (AstroGrid, Leicester)</li>
<li>David Giaretta (Starlink, RAL)</li>
<li>Malcolm Currie (Starlink, RAL)</li>
<li>Clive Davenhall (Royal Observatory Edinburgh)</li>
<li>Peter Draper (Starlink, Durham)</li>
<li>Alasdair Allan (Starlink, Exeter)</li>
<li>Tim Jenness (JACH)</li>
<li>Roy Platon (RAL)</li>
<li>Norman Gray (Starlink, Glasgow)</li>
<li>Jonathan Irwin (Cambridge)</li>
<li>Mark Allen (Strasbourg)</li>
<li>Bob Mann (Edinburgh/Strasbourg)</li>
<li>Mike Read (ROE)</li>
</ul>
</p>

</sect>

<sect id="release">
<subhead><title>Release Notes</title></subhead>

<p>This is TOPCAT, Tool for OPerations on Catalogues And Tables.
It is a general purpose viewer and editor for astronomical tabular
data developed by <webref url="http://www.starlink.ac.uk/">Starlink</webref>.
<dl>
<dt>Author</dt>
<dd><p>Mark Taylor (Starlink, Bristol University)</p></dd>

<dt>Email</dt>
<dd><p><webref url="mailto:m.b.taylor@bristol.ac.uk"
                          >m.b.taylor@bristol.ac.uk</webref></p></dd>

<dt>WWW</dt>
<dd><p><webref url="http://www.starlink.ac.uk/topcat/"/></p></dd>

</dl>
</p>

<p>Releases to date have been as follows:
<dl>

<dt>Version 0.5-1 (18 November 2003)</dt>
<dd><p>
<ul>
<li>Rewrite of FITS binary table access for big efficiency improvements.</li>
<li>It's now possible to plug in user-defined algebraic methods at runtime.</li>
<li>Improved unit testing leads to some bugfixes.</li>
</ul>
</p></dd>

<dt>Version 0.5b (20 October 2003)</dt>
<dd><p>
<ul>
<li>Can now read plain text format tables.</li>
<li>FITS files of arbitrary size can now be read
    (they are not loaded into memory).</li>
<li>TOPCAT can now run without errors in a secure environment
    (e.g. as an unsigned jar file under WebStart).  Of course some actions
    such as Save Table are unavailable in this context.</li>
<li>Files compressed with Unix compress now work 
    (as well as gzip and bzip2).</li>
<li>Added hierarchy browser to load dialog.</li>
<li>Added integral demo data (accessible from load dialog).</li>
<li>Can now drag tables from
    <webref url="http://www.starlink.ac.uk/treeview/">Treeview</webref>
    into TOPCAT load dialog (or load button).</li>
<li>Some bugfixes.</li>
</ul>
</p></dd>

<dt>Version 0.4-1b (10 July 2003)</dt>
<dd><p>
<ul>
<li>Fixed a VOTable output bug (not escaping XML special characters).</li>
<li>Fixed a serious FITS output bug.</li>
<li>Improved bad value handling for FITS tables.</li>
</ul>
</p></dd>

<dt>Version 0.4b (8 July 2003)</dt>
<dd><p>
<ul>
<li>Row subset count column in subsets window.</li>
<li>Fixed and improved broken Parameter window.</li>
<li>Fixed output of table name and parameters.</li>
<li>Output to LaTeX <code>tabular</code> environment now available.</li>
<li>SQL access buttons now greyed out when no JDBC drivers are present.</li>
<li>UCD selection now available from New Synthetic Column dialogue.</li>
<li>Column metadata display made more logical and flexible.</li>
<li>Column cardinality now calculated in Stats window.</li>
<li>Sythetic column expressions and most other column metadata now 
    editable.</li>
<li>Null value support in evaluated expressions.</li>
<li>Integral example data provided.</li>
<li>Hierarchical browser for tables available in load dialogue.</li>
</ul>
</p></dd>

<dt>Version 0.3b (4 June 2003)</dt>
<dd><p>First public release
</p></dd>

</dl>
</p>


</sect>


</docbody>

</sun>

