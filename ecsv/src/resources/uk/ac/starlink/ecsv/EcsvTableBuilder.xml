<p>The Enhanced Character Separated Values format was developed within
the <a href="https://www.astropy.org/">Astropy</a> project
and is described at
<a href="https://github.com/astropy/astropy-APEs/blob/master/APE6.rst"
        >https://github.com/astropy/astropy-APEs/blob/master/APE6.rst</a>.
It is composed of a YAML header followed by a CSV-like body,
and is intended to be a human-readable and maybe even human-writable format
with rich metadata.
Most of the useful per-column and per-table metadata
is preserved when de/serializing to this format.
The version supported by this reader is currently ECSV 0.9.
</p>

<p>There are various ways to format the YAML header,
but a simple example of an ECSV file looks like this:
<pre>
# %ECSV 0.9
# ---
# delimiter: ','
# datatype: [
#   { name: index,   datatype: int32   },
#   { name: Species, datatype: string  },
#   { name: Name,    datatype: string  },
#   { name: Legs,    datatype: int32   },
#   { name: Height,  datatype: float64, unit: m },
#   { name: Mammal,  datatype: bool    },
# ]
index,Species,Name,Legs,Height,Mammal
1,pig,Bland,4,,True
2,cow,Daisy,4,2,True
3,goldfish,Dobbin,,0.05,False
4,ant,,6,0.001,False
5,ant,,6,0.001,False
6,human,Mark,2,1.9,True
</pre>
If you follow this pattern, it's possible to write your own ECSV files by
taking an existing CSV file
and decorating it with a header that gives column datatypes,
and possibly other metadata such as units.
This allows you to force the datatype of given columns
(the CSV reader guesses datatype based on content, but can get it wrong)
and it can also be read much more efficiently than a CSV file
and its format can be detected automatically.
</p>

<p>The ECSV datatypes that work well with this reader are
<code>bool</code>,
<code>int8</code>, <code>int16</code>, <code>int32</code>, <code>int64</code>,
<code>float32</code>, <code>float64</code>
and
<code>string</code>.
</p>
