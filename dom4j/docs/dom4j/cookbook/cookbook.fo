<?xml version="1.0" encoding="UTF-8"?>
<fo:root xmlns:fo="http://www.w3.org/1999/XSL/Format" text-align="justify" font-size="12pt" font-family="Times Roman">
<fo:layout-master-set>
<fo:simple-page-master margin-right="1in" margin-left="10pc" margin-bottom="1in" margin-top="1in" page-height="11in" page-width="8.5in" master-name="blank">
<fo:region-body margin-top="24pt" margin-bottom="24pt"/>
<fo:region-before extent="12pt" region-name="xsl-region-before-blank"/>
<fo:region-after extent="12pt" region-name="xsl-region-after-blank"/>
</fo:simple-page-master>
<fo:simple-page-master margin-right="1in" margin-left="10pc" margin-bottom="1in" margin-top="1in" page-height="11in" page-width="8.5in" master-name="simple1">
<fo:region-body margin-top="24pt" margin-bottom="24pt"/>
<fo:region-before extent="12pt"/>
<fo:region-after extent="12pt"/>
</fo:simple-page-master>
<fo:simple-page-master margin-right="1in" margin-left="10pc" margin-bottom="1in" margin-top="1in" page-height="11in" page-width="8.5in" master-name="left1">
<fo:region-body margin-top="24pt" margin-bottom="24pt"/>
<fo:region-before extent="12pt" region-name="xsl-region-before-left"/>
<fo:region-after extent="12pt" region-name="xsl-region-after-left"/>
</fo:simple-page-master>
<fo:simple-page-master margin-right="10pc" margin-left="1in" margin-bottom="1in" margin-top="1in" page-height="11in" page-width="8.5in" master-name="right1">
<fo:region-body margin-top="24pt" margin-bottom="24pt"/>
<fo:region-before extent="12pt" region-name="xsl-region-before-right"/>
<fo:region-after extent="12pt" region-name="xsl-region-after-right"/>
</fo:simple-page-master>
<fo:simple-page-master margin-right="1in" margin-left="1in" margin-bottom="1in" margin-top="1in" page-height="11in" page-width="8.5in" master-name="first1">
<fo:region-body margin-top="24pt" margin-bottom="24pt"/>
<fo:region-before extent="12pt" region-name="xsl-region-before-first"/>
<fo:region-after extent="12pt" region-name="xsl-region-after-first"/>
</fo:simple-page-master>
<fo:simple-page-master margin-right="1in" margin-left="10pc" margin-bottom="1in" margin-top="1in" page-height="11in" page-width="8.5in" master-name="simple2">
<fo:region-body margin-top="24pt" margin-bottom="24pt" column-count="1"/>
<fo:region-before extent="12pt"/>
<fo:region-after extent="12pt"/>
</fo:simple-page-master>
<fo:simple-page-master margin-right="1in" margin-left="10pc" margin-bottom="1in" margin-top="1in" page-height="11in" page-width="8.5in" master-name="left2">
<fo:region-body margin-top="24pt" margin-bottom="24pt" column-count="1"/>
<fo:region-before extent="12pt" region-name="xsl-region-before-left"/>
<fo:region-after extent="12pt" region-name="xsl-region-after-left"/>
</fo:simple-page-master>
<fo:simple-page-master margin-right="10pc" margin-left="1in" margin-bottom="1in" margin-top="1in" page-height="11in" page-width="8.5in" master-name="right2">
<fo:region-body margin-top="24pt" margin-bottom="24pt" column-count="1"/>
<fo:region-before extent="12pt" region-name="xsl-region-before-right"/>
<fo:region-after extent="12pt" region-name="xsl-region-after-right"/>
</fo:simple-page-master>
<fo:simple-page-master margin-right="1in" margin-left="1in" margin-bottom="1in" margin-top="1in" page-height="11in" page-width="8.5in" master-name="first2">
<fo:region-body margin-top="24pt" margin-bottom="24pt" column-count="1"/>
<fo:region-before extent="12pt" region-name="xsl-region-before-first"/>
<fo:region-after extent="12pt" region-name="xsl-region-after-first"/>
</fo:simple-page-master>
<fo:page-sequence-master master-name="titlepage1">
<fo:repeatable-page-master-alternatives>
<fo:conditional-page-master-reference master-name="first1"/>
</fo:repeatable-page-master-alternatives>
</fo:page-sequence-master>
<fo:page-sequence-master master-name="oneside1">
<fo:repeatable-page-master-alternatives>
<fo:conditional-page-master-reference master-name="simple1"/>
</fo:repeatable-page-master-alternatives>
</fo:page-sequence-master>
<fo:page-sequence-master master-name="twoside1">
<fo:repeatable-page-master-alternatives>
<fo:conditional-page-master-reference blank-or-not-blank="blank" master-name="blank"/>
<fo:conditional-page-master-reference odd-or-even="odd" master-name="right1"/>
<fo:conditional-page-master-reference odd-or-even="even" master-name="left1"/>
</fo:repeatable-page-master-alternatives>
</fo:page-sequence-master>
<fo:page-sequence-master master-name="titlepage2">
<fo:repeatable-page-master-alternatives>
<fo:conditional-page-master-reference master-name="first2"/>
</fo:repeatable-page-master-alternatives>
</fo:page-sequence-master>
<fo:page-sequence-master master-name="oneside2">
<fo:repeatable-page-master-alternatives>
<fo:conditional-page-master-reference master-name="simple2"/>
</fo:repeatable-page-master-alternatives>
</fo:page-sequence-master>
<fo:page-sequence-master master-name="twoside2">
<fo:repeatable-page-master-alternatives>
<fo:conditional-page-master-reference blank-or-not-blank="blank" master-name="blank"/>
<fo:conditional-page-master-reference odd-or-even="odd" master-name="right2"/>
<fo:conditional-page-master-reference odd-or-even="even" master-name="left2"/>
</fo:repeatable-page-master-alternatives>
</fo:page-sequence-master>
</fo:layout-master-set>
<fo:page-sequence master-name="titlepage1" hyphenate="true" id="NA2E" language="en">
<fo:flow flow-name="xsl-region-body">
<fo:block>
<fo:block font-family="Helvetica" font-weight="bold" font-size="24.8832pt" text-align="center" space-before="18.6624pt">
<fo:block>dom4j cookbook</fo:block>
</fo:block>
<fo:block font-family="Helvetica" font-weight="bold" font-size="12pt" text-align="center" space-before="2in">
<fo:block font-family="Helvetica" font-weight="bold" font-size="17.28pt" text-align="center" keep-with-next="always" space-before="10.8pt">Mr.
       Tobias Rademacher</fo:block>
<fo:block font-family="Helvetica" font-weight="bold" font-size="17.28pt" text-align="center" keep-with-next="always" space-before="10.8pt">Mr.
       James Strachan</fo:block>
</fo:block>
<fo:block break-after="page"/>
<fo:block font-size="14.4pt" font-family="Helvetica" font-weight="bold">
<fo:block>dom4j cookbook</fo:block>
</fo:block>
<fo:block font-size="10pt">
<fo:block>by Mr.
       Tobias Rademacher and Mr.
       James Strachan</fo:block>
</fo:block>
<fo:block font-size="10pt" space-before="1em">
<fo:block>Published September 2001</fo:block>
</fo:block>
<fo:block font-size="10pt">
<fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">This document provides a practical introduction to dom4j. It guides you through by using a lot of examples and is based on dom4j v1.0</fo:block>
</fo:block>
</fo:block>
<fo:block break-after="page"/>
</fo:block>
</fo:flow>
</fo:page-sequence>
<fo:page-sequence master-name="titlepage1" format="i" hyphenate="true" language="en">
<fo:flow flow-name="xsl-region-body">
<fo:block>
<fo:block>
<fo:block font-family="Helvetica" font-weight="bold" font-size="17.28pt" margin-left="-4pc" space-after="1em">Table of Contents</fo:block>
</fo:block>
<fo:block>Foreword<fo:leader text-align-last="justify" leader-pattern="dots"/>
<fo:page-number-citation ref-id="NAB8"/>
</fo:block>
<fo:block>1.Introducing dom4j<fo:leader text-align-last="justify" leader-pattern="dots"/>
<fo:page-number-citation ref-id="NABD"/>
</fo:block>
<fo:block>2.Creation of an XML Object Model using dom4j<fo:leader text-align-last="justify" leader-pattern="dots"/>
<fo:page-number-citation ref-id="NADD"/>
</fo:block>
<fo:block start-indent="2pc">
<fo:block>Reading XML data<fo:leader text-align-last="justify" leader-pattern="dots"/>
<fo:page-number-citation ref-id="NAE2"/>
</fo:block>
<fo:block>Integrating with other XML APIs<fo:leader text-align-last="justify" leader-pattern="dots"/>
<fo:page-number-citation ref-id="NB2C"/>
</fo:block>
<fo:block>The secret of DocumentFactory<fo:leader text-align-last="justify" leader-pattern="dots"/>
<fo:page-number-citation ref-id="NB59"/>
</fo:block>
</fo:block>
<fo:block>3.Serialization and Output<fo:leader text-align-last="justify" leader-pattern="dots"/>
<fo:page-number-citation ref-id="NB9A"/>
</fo:block>
<fo:block start-indent="2pc">
<fo:block>Serializing to XML<fo:leader text-align-last="justify" leader-pattern="dots"/>
<fo:page-number-citation ref-id="NBB0"/>
</fo:block>
<fo:block start-indent="2pc">
<fo:block>Customizing the output format<fo:leader text-align-last="justify" leader-pattern="dots"/>
<fo:page-number-citation ref-id="NBE3"/>
</fo:block>
</fo:block>
<fo:block>Printing HTML<fo:leader text-align-last="justify" leader-pattern="dots"/>
<fo:page-number-citation ref-id="NC15"/>
</fo:block>
<fo:block>Building a DOM tree<fo:leader text-align-last="justify" leader-pattern="dots"/>
<fo:page-number-citation ref-id="NC2D"/>
</fo:block>
<fo:block>Generating SAX Events<fo:leader text-align-last="justify" leader-pattern="dots"/>
<fo:page-number-citation ref-id="dom4j2SAX"/>
</fo:block>
</fo:block>
<fo:block>4.Navigation in dom4j<fo:leader text-align-last="justify" leader-pattern="dots"/>
<fo:page-number-citation ref-id="NC67"/>
</fo:block>
<fo:block start-indent="2pc">
<fo:block>Using Iterator<fo:leader text-align-last="justify" leader-pattern="dots"/>
<fo:page-number-citation ref-id="NC7C"/>
</fo:block>
<fo:block>Fast index based Navigation<fo:leader text-align-last="justify" leader-pattern="dots"/>
<fo:page-number-citation ref-id="NC91"/>
</fo:block>
<fo:block start-indent="2pc">
<fo:block>Using a backed List<fo:leader text-align-last="justify" leader-pattern="dots"/>
<fo:page-number-citation ref-id="NCA3"/>
</fo:block>
<fo:block>Using XPath<fo:leader text-align-last="justify" leader-pattern="dots"/>
<fo:page-number-citation ref-id="NCBA"/>
</fo:block>
<fo:block>Using Visitor Pattern<fo:leader text-align-last="justify" leader-pattern="dots"/>
<fo:page-number-citation ref-id="NCDB"/>
</fo:block>
</fo:block>
</fo:block>
<fo:block>5.Manipulating dom4j<fo:leader text-align-last="justify" leader-pattern="dots"/>
<fo:page-number-citation ref-id="NCF4"/>
</fo:block>
<fo:block start-indent="2pc">
<fo:block>What <fo:inline font-family="monospace">org.dom4j.Document</fo:inline> provides<fo:leader text-align-last="justify" leader-pattern="dots"/>
<fo:page-number-citation ref-id="NCF9"/>
</fo:block>
<fo:block>Working with <fo:inline font-family="monospace">org.dom4j.Element</fo:inline>
<fo:leader text-align-last="justify" leader-pattern="dots"/>
<fo:page-number-citation ref-id="ND0D"/>
</fo:block>
<fo:block>Qualified Names<fo:leader text-align-last="justify" leader-pattern="dots"/>
<fo:page-number-citation ref-id="ND1A"/>
</fo:block>
<fo:block>Inserting elements<fo:leader text-align-last="justify" leader-pattern="dots"/>
<fo:page-number-citation ref-id="ND28"/>
</fo:block>
<fo:block>Cloning - How many sheeps do you need?<fo:leader text-align-last="justify" leader-pattern="dots"/>
<fo:page-number-citation ref-id="ND32"/>
</fo:block>
</fo:block>
<fo:block>6.Using dom4j with XSLT<fo:leader text-align-last="justify" leader-pattern="dots"/>
<fo:page-number-citation ref-id="ND5F"/>
</fo:block>
<fo:block>7.Schemata-Support<fo:leader text-align-last="justify" leader-pattern="dots"/>
<fo:page-number-citation ref-id="ND9D"/>
</fo:block>
<fo:block start-indent="2pc">
<fo:block>Using XML Schema Data Types in dom4j<fo:leader text-align-last="justify" leader-pattern="dots"/>
<fo:page-number-citation ref-id="NDBE"/>
</fo:block>
<fo:block>Validation<fo:leader text-align-last="justify" leader-pattern="dots"/>
<fo:page-number-citation ref-id="NDCE"/>
</fo:block>
<fo:block start-indent="2pc">
<fo:block>Using Apaches Xerces 1.4.x and dom4j for validation<fo:leader text-align-last="justify" leader-pattern="dots"/>
<fo:page-number-citation ref-id="NDD8"/>
</fo:block>
<fo:block>A perfect team - Multi Schema Validator[MSV] and dom4j <fo:leader text-align-last="justify" leader-pattern="dots"/>
<fo:page-number-citation ref-id="NDFB"/>
</fo:block>
</fo:block>
</fo:block>
<fo:block>Further Reading<fo:leader text-align-last="justify" leader-pattern="dots"/>
<fo:page-number-citation ref-id="NE1A"/>
</fo:block>
</fo:block>
</fo:flow>
</fo:page-sequence>
<fo:page-sequence master-name="oneside1" format="i" hyphenate="true" id="NAB8" language="en">
<fo:static-content flow-name="xsl-region-after">
<fo:block font-size="10pt" text-align="center">
<fo:page-number xmlns:fo="http://www.w3.org/1999/XSL/Format"/>
</fo:block>
</fo:static-content>
<fo:flow flow-name="xsl-region-body">
<fo:block>
<fo:block font-weight="bold" font-family="Helvetica" font-size="17.28pt" margin-left="-4pc">
<fo:block>Foreword</fo:block>
</fo:block>
</fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
</fo:block>
</fo:flow>
</fo:page-sequence>
<fo:page-sequence master-name="oneside1" hyphenate="true" id="NABD" language="en" initial-page-number="1">
<fo:static-content flow-name="xsl-region-before">
<fo:block text-align="center">
<fo:block xmlns:fo="http://www.w3.org/1999/XSL/Format" font-size="10pt">1. Introducing dom4j</fo:block>
</fo:block>
</fo:static-content>
<fo:static-content flow-name="xsl-region-after">
<fo:block font-size="10pt" text-align="center">
<fo:page-number xmlns:fo="http://www.w3.org/1999/XSL/Format"/>
</fo:block>
</fo:static-content>
<fo:flow flow-name="xsl-region-body">
<fo:block>
<fo:block font-family="Helvetica" font-weight="bold" font-size="17.28pt" margin-left="-4pc">
<fo:block>Chapter 1. Introducing dom4j</fo:block>
</fo:block>
</fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
dom4j is a object model representing an XML Tree in memory.
dom4j offers a easy-to-use API that provides a powerfull set of
features to process, manipulate or navigate XML and work with XPath and XSLT as well as integrate with SAX, JAXP and DOM.
</fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
dom4j is designed to be interface-based in order to provide highly configurable implementation strategies.
You are able to create your own XML tree implementations by simply providing a DocumentFactory implementation.
This makes it very simple to resuse much of the dom4j code while extending it to provide whatever implementation features you wish.
</fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
This
document will guide you through dom4j's features in a pratical way.
It uses a lot of examples with source code to achive that. The document is
also desinged as a reference so that you don't have to read the entire document right now. This guide concentrates on daily work with
dom4j and is therefore called <fo:inline font-style="italic">cookbook</fo:inline>.
</fo:block>
</fo:flow>
</fo:page-sequence>
<fo:page-sequence master-name="oneside1" hyphenate="true" id="NADD" language="en">
<fo:static-content flow-name="xsl-region-before">
<fo:block text-align="center">
<fo:block xmlns:fo="http://www.w3.org/1999/XSL/Format" font-size="10pt">2. Creation of an XML Object Model using dom4j</fo:block>
</fo:block>
</fo:static-content>
<fo:static-content flow-name="xsl-region-after">
<fo:block font-size="10pt" text-align="center">
<fo:page-number xmlns:fo="http://www.w3.org/1999/XSL/Format"/>
</fo:block>
</fo:static-content>
<fo:flow flow-name="xsl-region-body">
<fo:block>
<fo:block font-family="Helvetica" font-weight="bold" font-size="17.28pt" margin-left="-4pc">
<fo:block>Chapter 2. Creation of an XML Object Model using dom4j</fo:block>
</fo:block>
</fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
Normally it all starts with a set of xml-files or a single xml file that you want to process, manipulate or navigate through to extract some
values necessary in your application. Most Java Open-Source projects using XML for deployment or as a replacement for property files in order
to get easily readable property data.
</fo:block>
<fo:block id="NAE2">
<fo:block>
<fo:block font-family="Helvetica" margin-left="-4pc">
<fo:block keep-with-next="always">
<fo:block space-before.maximum="2em" space-before.optimum="1.5em" space-before.minimum="1em" font-weight="bold" font-size="16pt">Reading XML data</fo:block>
</fo:block>
</fo:block>
</fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
How does dom4j help you to get at the data stored in XML?
dom4j comes with a set of
builder classes that parses the xml data and creating
a tree like object structure in memory.
You can easily manipulate and navigate through that model.
The following example shows how you can
read your data using dom4j API.

<fo:block space-before.maximum="1.2em" space-before.optimum="1em" space-before.minimum="0.8em" font-family="Courier" linefeed-treatment="preserve" white-space-collapse="false" text-align="start" wrap-option="no-wrap">
import java.io.File;
import org.dom4j.Document;
import org.dom4j.DocumentException;
import org.dom4j.io.SAXReader;

public class DeployFileLoaderSample {

  /** dom4j object model representation of a xml document. Note: We use the interface(!) not its implementation */
  private Document doc;

  /**
   * Loads a document from a file.
   *
   * @throw a org.dom4j.DocumentException occurs whenever the buildprocess fails.
   */
  public void parseWithSAX(File aFile) throws DocumentException {
    SAXReader xmlReader = new SAXReader();
    this.doc = xmlReader.read(aFile);
  }
}
</fo:block>

</fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
The above example code should clarify the use of <fo:inline font-family="monospace">org.dom4j.io.SAXReader</fo:inline> to
build a complete dom4j-tree from a given file.
The org.dom4j.io package of dom4j contains a set of classes
for creating and serializing XML objects.
The read() method
is overloaded so that you able to pass different kind of object that represents a source.
</fo:block>
<fo:list-block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="NB07">
<fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="NB08">
<fo:list-item-label end-indent="label-end()">
<fo:block>•</fo:block>
</fo:list-item-label>
<fo:list-item-body start-indent="body-start()">
<fo:block>
<fo:inline font-family="monospace">java.lang.String</fo:inline> - a SystemId is a String that contains a URI e.g. a URL to a XML file</fo:block>
</fo:list-item-body>
</fo:list-item>
<fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="NB0D">
<fo:list-item-label end-indent="label-end()">
<fo:block>•</fo:block>
</fo:list-item-label>
<fo:list-item-body start-indent="body-start()">
<fo:block>
<fo:inline font-family="monospace">java.net.URL</fo:inline> - represents a Uniform Ressource Loader or a Uniform Ressource Identifier encasulate in a URL instance</fo:block>
</fo:list-item-body>
</fo:list-item>
<fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="NB12">
<fo:list-item-label end-indent="label-end()">
<fo:block>•</fo:block>
</fo:list-item-label>
<fo:list-item-body start-indent="body-start()">
<fo:block>
<fo:inline font-family="monospace">java.io.InputStream</fo:inline> - a open input stream that transports xml data</fo:block>
</fo:list-item-body>
</fo:list-item>
<fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="NB17">
<fo:list-item-label end-indent="label-end()">
<fo:block>•</fo:block>
</fo:list-item-label>
<fo:list-item-body start-indent="body-start()">
<fo:block>
<fo:inline font-family="monospace">java.io.Reader</fo:inline> - more compartable puls the abiltiy of setting the encoding scheme</fo:block>
</fo:list-item-body>
</fo:list-item>
<fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="NB1C">
<fo:list-item-label end-indent="label-end()">
<fo:block>•</fo:block>
</fo:list-item-label>
<fo:list-item-body start-indent="body-start()">
<fo:block>
<fo:inline font-family="monospace">org.sax.InputSource</fo:inline> - a single input source for a XML entity.</fo:block>
</fo:list-item-body>
</fo:list-item>
</fo:list-block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
So we decide to add more flexiblity to our <fo:inline font-family="monospace">DeployFileLoaderSample</fo:inline> and add new methods.
</fo:block>
<fo:block space-before.maximum="1.2em" space-before.optimum="1em" space-before.minimum="0.8em" font-family="Courier" linefeed-treatment="preserve" white-space-collapse="false" text-align="start" wrap-option="no-wrap">
import java.io.File;

import org.dom4j.Document;
import org.dom4j.DocumentException;
import org.dom4j.io.SAXReader;

public class DeployFileLoaderSample {

  /** dom4j object model representation of a xml document. Note: We use the interface(!) not its implementation */
  private Document doc;

  /**
   * Loads a document from a file.
   *
   * @param aFile the data source
   * @throw a org.dom4j.DocumentExcepiton occurs whenever the buildprocess fails.
   */
  public void parseWithSAX(File aFile) throws DocumentException {
    SAXReader xmlReader = new SAXReader();
    this.doc = xmlReader.read(aFile);
  }

  /**
   * Loads a document from a file.
   *
   * @param aURL the data source
   * @throw a org.dom4j.DocumentExcepiton occurs whenever the buildprocess fails.
   */
  public void parseWithSAX(URL aURL) throws DocumentException {
    SAXReader xmlReader = new SAXReader();
    this.doc = xmlReader.read(aURL);
  }


}
</fo:block>
</fo:block>
<fo:block id="NB2C">
<fo:block>
<fo:block font-family="Helvetica" margin-left="-4pc">
<fo:block keep-with-next="always">
<fo:block space-before.maximum="2em" space-before.optimum="1.5em" space-before.minimum="1em" font-weight="bold" font-size="16pt">Integrating with other XML APIs</fo:block>
</fo:block>
</fo:block>
</fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
dom4j offers also classes for integration with
the two original XML processing APIs - SAX and DOM.
So far we have been talking about reading a document with SAX.
The <fo:inline font-family="monospace">org.dom4j.SAXContentHandler</fo:inline> class implements several
SAX interfaces directly (such as ContentHandler) so that you can embed dom4j
directly inside any SAX application.
You can also use this class to implement your own specific SAX-based Reader class if you need to.
</fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
The <fo:inline font-family="monospace">DOMReader</fo:inline> class allows you to convert an existing DOM tree
into a dom4j tree.
This could be usefull if you already used DOM and want to replace it step by step
with dom4j or if you just needs some of DOM's
behaviour and want to save memory ressources by transforming it in a dom4j Model.
You are able to transform a DOM Document, a DOM node branch and a single element.
</fo:block>
<fo:block space-before.maximum="1.2em" space-before.optimum="1em" space-before.minimum="0.8em" font-family="Courier" linefeed-treatment="preserve" white-space-collapse="false" text-align="start" wrap-option="no-wrap">
import org.sax.Document;

import org.dom4j.Document;
import org.dom4j.DocumentException;
import org.dom4j.io.DOMReader;

public class DOMIntegratorSample {

  /** converts a W3C DOM document into a dom4j document */
  public Document buildDocment(org.w3c.dom.Document domDocument) {
    DOMReader xmlReader = new DOMReader();
    return xmlReader.read(domDocument);
  }
}

</fo:block>
</fo:block>
<fo:block id="NB59">
<fo:block>
<fo:block font-family="Helvetica" margin-left="-4pc">
<fo:block keep-with-next="always">
<fo:block space-before.maximum="2em" space-before.optimum="1.5em" space-before.minimum="1em" font-weight="bold" font-size="16pt">The secret of DocumentFactory</fo:block>
</fo:block>
</fo:block>
</fo:block>Right now we have talked a lot of reading exisiting XML information e.g. from files, URL's or even Streams.
Sometimes it's necessary to generate a XML document from scratch within a running Java Application.
The class <fo:inline font-family="monospace">org.dom4j.DocumentFactory</fo:inline>defines a set of factory methods to create documents, document
types, elements, attributes, unparsed character data (CDATA), a namespace, an XPathobject, a NodeFilter and
some other useful instances. This makes the <fo:inline font-family="monospace">DocumentFactory</fo:inline>class to a central class whenever you have to create
one of these instances by yourself.
</fo:block>
<fo:block space-before.maximum="1.2em" space-before.optimum="1em" space-before.minimum="0.8em" font-family="Courier" linefeed-treatment="preserve" white-space-collapse="false" text-align="start" wrap-option="no-wrap">

import org.dom4j.DocumentFactory;
import org.dom4j.Document;
import org.dom4j.Element;

public class DeployFileCreator {

  private DocumentFactory factory = DocumentFactory.getInstance();
  private Document doc;

  public void generateDoc(String aRootElement) {
    doc = DocumentFactory.getInstance().createDocument();
    Element root = doc.addElement(aRootElement);
  }

}

</fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
The listing shows how to generate a new Document from scratch.
The method <fo:inline font-family="monospace">generateDoc(String aRootElement)</fo:inline> takes a String parameter.
The string value contains the name of the root element of the new document.
As you can see <fo:inline font-family="monospace">org.dom4j.DocumentFactory</fo:inline> is a singleton
that is accessable via <fo:inline font-family="monospace">getInstance()</fo:inline> as most Java singletons are.
After we obtained the instance we can <fo:inline font-family="monospace">DocumentFactory</fo:inline> methods.
They follow the <fo:inline font-style="italic">createXXX()</fo:inline> naming convention, so if you want to create a Attribute you would
call <fo:inline font-style="italic">createAttribute()</fo:inline> instead.
If your class uses DocumentFactory a lot or uses a different DocumentFactory instance then
you could add it as a member variable and initiate it via getInstance in your constructor.
</fo:block>
<fo:block space-before.maximum="1.2em" space-before.optimum="1em" space-before.minimum="0.8em" font-family="Courier" linefeed-treatment="preserve" white-space-collapse="false" text-align="start" wrap-option="no-wrap">

import org.dom4j.DocumentFactory;
import org.dom4j.Document;
import org.dom4j.Element;

public class GranuatedDeployFileCreator {

 private DocumentFactory factory;
 private Document doc;

 public GranuatedDeployFileCreator() {
   this.factory = DocumentFactory.getInstance();
 }

 public void generateDoc(String aRootElement) {
    doc = factory.createDocument();
    Element root = doc.addElement(aRootElement);
 }

}

</fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
The <fo:inline font-family="monospace">Document</fo:inline> and <fo:inline font-family="monospace">Element</fo:inline>
interfaces have a number of helper methods for creating an XML document programmatically
in a simple way.
</fo:block>
<fo:block space-before.maximum="1.2em" space-before.optimum="1em" space-before.minimum="0.8em" font-family="Courier" linefeed-treatment="preserve" white-space-collapse="false" text-align="start" wrap-option="no-wrap">

import org.dom4j.Document;
import org.dom4j.DocumentHelper;
import org.dom4j.Element;

public class Foo {

  public Document createDocument() {
    Document document = DocumentHelper.createDocument();
    Element root = document.addElement( "root" );

    Element author2 = root.addElement( "author" )
      .addAttribute( "name", "Toby" )
      .addAttribute( "location", "Germany" )
      .addText( "Tobias Rademacher" );

    Element author1 = root.addElement( "author" )
      .addAttribute( "name", "James" )
      .addAttribute( "location", "UK" )
      .addText( "James Strachan" );

    return document;
  }
}

</fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
As mentioned earlier dom4j is an interface based API.
This means that DocumentFactory and the reader classes in the org.dom4j.io package always use the org.dom4j interfaces
rather than any concrete implementation classes.
The Collection API and W3C's DOM are other examples of APIs that
use this design aproach.
This wide spread design is described by [BillVenners].
</fo:block>
</fo:flow>
</fo:page-sequence>
<fo:page-sequence master-name="oneside1" hyphenate="true" id="NB9A" language="en">
<fo:static-content flow-name="xsl-region-before">
<fo:block text-align="center">
<fo:block xmlns:fo="http://www.w3.org/1999/XSL/Format" font-size="10pt">3. Serialization and Output</fo:block>
</fo:block>
</fo:static-content>
<fo:static-content flow-name="xsl-region-after">
<fo:block font-size="10pt" text-align="center">
<fo:page-number xmlns:fo="http://www.w3.org/1999/XSL/Format"/>
</fo:block>
</fo:static-content>
<fo:flow flow-name="xsl-region-body">
<fo:block>
<fo:block font-family="Helvetica" font-weight="bold" font-size="17.28pt" margin-left="-4pc">
<fo:block>Chapter 3. Serialization and Output</fo:block>
</fo:block>
</fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
Once you have parsed or created a document you want to serialize it to disk or
into a plain (or encrypted) stream. dom4j provides a set of classes to serialize
your dom4j tree in four ways:
</fo:block>
<fo:list-block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="NBA3">
<fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="NBA4">
<fo:list-item-label end-indent="label-end()">
<fo:block>•</fo:block>
</fo:list-item-label>
<fo:list-item-body start-indent="body-start()">
<fo:block>XML</fo:block>
</fo:list-item-body>
</fo:list-item>
<fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="NBA7">
<fo:list-item-label end-indent="label-end()">
<fo:block>•</fo:block>
</fo:list-item-label>
<fo:list-item-body start-indent="body-start()">
<fo:block>HTML</fo:block>
</fo:list-item-body>
</fo:list-item>
<fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="NBAA">
<fo:list-item-label end-indent="label-end()">
<fo:block>•</fo:block>
</fo:list-item-label>
<fo:list-item-body start-indent="body-start()">
<fo:block>DOM</fo:block>
</fo:list-item-body>
</fo:list-item>
<fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="NBAD">
<fo:list-item-label end-indent="label-end()">
<fo:block>•</fo:block>
</fo:list-item-label>
<fo:list-item-body start-indent="body-start()">
<fo:block>SAX Events</fo:block>
</fo:list-item-body>
</fo:list-item>
</fo:list-block>
<fo:block id="NBB0">
<fo:block>
<fo:block font-family="Helvetica" margin-left="-4pc">
<fo:block keep-with-next="always">
<fo:block space-before.maximum="2em" space-before.optimum="1.5em" space-before.minimum="1em" font-weight="bold" font-size="16pt">Serializing to XML</fo:block>
</fo:block>
</fo:block>
</fo:block>
<fo:inline font-family="monospace">org.dom4j.io.XMLWriter</fo:inline>is a easy-to-use and easy-to-understand class used
to serialize a dom4jtree to a plain XML.
You are able
to write the XMLtree to either an <fo:inline font-family="monospace">java.io.OutputStream</fo:inline>or a <fo:inline font-family="monospace">java.io.Writer</fo:inline>.
This can be configured with the overloaded constructor or via the
<fo:inline font-family="monospace">setOutputStream()</fo:inline>or <fo:inline font-family="monospace">setReader()</fo:inline>methods.
Let's have a look at a example.

<fo:block space-before.maximum="1.2em" space-before.optimum="1em" space-before.minimum="0.8em" font-family="Courier" linefeed-treatment="preserve" white-space-collapse="false" text-align="start" wrap-option="no-wrap">

import java.io.OutputStream;

import org.dom4j.Document;
import org.dom4j.io.XMLWriter;
import org.dom4j.io.OutputFormat;

public class DeployFileCreator {

 private Document doc;

 public void serializetoXML(OutputStream out, String aEncodingScheme) throws Exception {
   OutputFormat outformat = OutputFormat.createPrettyPrint();
   outformat.setEncoding(aEncodingScheme);
   XMLWriter writer = new XMLWriter(out, outformat);
   writer.write(this.doc);
   writer.flush();
 }

}
</fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
We use the constructor of <fo:inline font-family="monospace">XMLWriter</fo:inline> to pass a to given
<fo:inline font-family="monospace">OutputStream</fo:inline> along with the required character encoding.
It is easier to use a <fo:inline font-family="monospace">Writer</fo:inline> rather than an <fo:inline font-family="monospace">OutputStream</fo:inline>,
because the <fo:inline font-family="monospace">Writer</fo:inline>  is String based and so has ness
character encoding issues.
The write() methods of <fo:inline font-family="monospace">Writer</fo:inline> are overloaded so that you can write all of the dom4j objects individually if required.
</fo:block>
<fo:block id="NBE3">
<fo:block>
<fo:block font-family="Helvetica" margin-left="-4pc">
<fo:block keep-with-next="always">
<fo:block space-before.maximum="2em" space-before.optimum="1.5em" space-before.minimum="1em" font-weight="bold" font-size="14pt">Customizing the output format</fo:block>
</fo:block>
</fo:block>
</fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
The default output format is to write the XML document as-is.
If you want to change the output format then there is a class
<fo:inline font-family="monospace">org.dom4j.io.OutputFormat</fo:inline> which allows you to define pretty printing options,
to suppress the output of the XML declaration, change the line ending and so on.
There is also a helper method <fo:inline font-family="monospace">OutputFormat.createPrettyPrint()</fo:inline> which will
create a default pretty printing format that you can further customize if you wish.
</fo:block>
<fo:block space-before.maximum="1.2em" space-before.optimum="1em" space-before.minimum="0.8em" font-family="Courier" linefeed-treatment="preserve" white-space-collapse="false" text-align="start" wrap-option="no-wrap">

import java.io.OutputStream;

import org.dom4j.Document;
import org.dom4j.io.XMLWriter;
import org.dom4j.io.OutputFormat;

public class DeployFileCreator {

 private Document doc;

  public void serializetoXML(OutputStream out, String aEncodingScheme) throws Exception {
   OutputFormat outformat = OutputFormat.createPrettyPrint();
   outformat.setEncoding(aEncodingScheme);
   XMLWriter writer = new XMLWriter(out, outformat);
   writer.write(this.doc);
   writer.flush();
 }


}
</fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
An interesting feature of <fo:inline font-family="monospace">OutputFormat</fo:inline> the ability to set
the character encoding. It is a good idiom to use this mechansim for setting the encoding
as the XMLWriter will be able to use this encoding to create an OutputStream as well
as to output the XML declaration.
</fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
The <fo:inline font-family="monospace">close()</fo:inline> method closes the underlying <fo:inline font-family="monospace">Writer</fo:inline>.
</fo:block>
<fo:block space-before.maximum="1.2em" space-before.optimum="1em" space-before.minimum="0.8em" font-family="Courier" linefeed-treatment="preserve" white-space-collapse="false" text-align="start" wrap-option="no-wrap">

import java.io.OutputStream;

import org.dom4j.Document;
import org.dom4j.io.XMLWriter;
import org.dom4j.io.OutputFormat;

public class DeployFileCreator {

 private Document doc;
 private OutputFormat outFormat;

 public DeployFileCreator() {
   this.outFormat = OuputFormat.getPrettyPrinting();
 }

 public DeployFileCreator(OutputFormat outFormat) {
   this.outFormat = outFormat;
 }

 public void writeAsXML(OutputStream out) throws Exception {
   XMLWriter writer = new XMLWriter(outFormat, this.outFormat);
   writer.write(this.doc);
 }

 public void writeAsXML(OutputStream out, String encoding) throws Exception {
   this.outFormat.setEncoding(encoding);
   this.writeAsXML(out);
 }

}
</fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
The serialization methods in our little example will now set encoding using <fo:inline font-family="monospace">OutputFormater</fo:inline>.
The default encoding if none is specifed will be UTF-8.
If you need a simple output on screen for debbuing or testing you can omit setting of
a <fo:inline font-family="monospace">Writer</fo:inline> or an <fo:inline font-family="monospace">OutputStream</fo:inline> completely
as <fo:inline font-family="monospace">XMLWriter</fo:inline> will default to <fo:inline font-family="monospace">System.out</fo:inline>.
</fo:block>
</fo:block>
</fo:block>
<fo:block id="NC15">
<fo:block>
<fo:block font-family="Helvetica" margin-left="-4pc">
<fo:block keep-with-next="always">
<fo:block space-before.maximum="2em" space-before.optimum="1.5em" space-before.minimum="1em" font-weight="bold" font-size="16pt">Printing HTML</fo:block>
</fo:block>
</fo:block>
</fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:inline font-family="monospace">HTMLWriter</fo:inline> takes a dom4j tree
and formats it to a stream as HTML. This formatter is similar to
<fo:inline font-family="monospace">XMLWriter</fo:inline> but outputs the text of CDATA and Entity sections rather than the serialised
format as in XML and also supports many HTML element which have no corresponding close tag
such as for &lt;BR&gt; and &lt;P&gt;
</fo:block>
<fo:block space-before.maximum="1.2em" space-before.optimum="1em" space-before.minimum="0.8em" font-family="Courier" linefeed-treatment="preserve" white-space-collapse="false" text-align="start" wrap-option="no-wrap">

import java.io.OutputStream;

import org.dom4j.Document;
import org.dom4j.io.HTMLWriter;
import org.dom4j.io.OutputFormat;

public class DeployFileCreator {

 private Document doc;
 private OutputFormat outFormat;

 public DeployFileCreator() {
   this.outFormat = OuputFormat.getPrettyPrinting();
 }

 public DeployFileCreator(OutputFormat outFormat) {
   this.outFormat = outFormat;
 }

 public void writeAsHTML(OutputStream out) throws Exception {
   HTMLWriter writer = new HTMLWriter(outFormat, this.outFormat);
   writer.write(this.doc);
   writer.flush();
 }

}
</fo:block>
</fo:block>
<fo:block id="NC2D">
<fo:block>
<fo:block font-family="Helvetica" margin-left="-4pc">
<fo:block keep-with-next="always">
<fo:block space-before.maximum="2em" space-before.optimum="1.5em" space-before.minimum="1em" font-weight="bold" font-size="16pt">Building a DOM tree</fo:block>
</fo:block>
</fo:block>
</fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
Sometimes it's necessary to transform your dom4j tree
into a DOM tree, because you are currently refactoring your application.
dom4j is very convient for integration with older XML
API's like DOM or SAX
(see <fo:block color="red">&lt;anchor&gt;Generating SAX Events&lt;/anchor&gt;</fo:block>). Let's move to an example:
</fo:block>
<fo:block space-before.maximum="1.2em" space-before.optimum="1em" space-before.minimum="0.8em" font-family="Courier" linefeed-treatment="preserve" white-space-collapse="false" text-align="start" wrap-option="no-wrap">
import org.w3c.dom.Document;

import org.dom4j.Document;
import org.dom4j.io.DOMWriter;

public class DeployFileLoaderSample {

  private org.dom4j.Document doc;

  public org.w3c.dom.Document transformtoDOM() {
    DOMWriter writer = new DOMWriter();
    return writer.write(this.doc);
  }
}

</fo:block>
</fo:block>
<fo:block id="dom4j2SAX">
<fo:block>
<fo:block font-family="Helvetica" margin-left="-4pc">
<fo:block keep-with-next="always">
<fo:block space-before.maximum="2em" space-before.optimum="1.5em" space-before.minimum="1em" font-weight="bold" font-size="16pt">Generating SAX Events</fo:block>
</fo:block>
</fo:block>
</fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
If you want to output a document as sax events in order to integrate with some existing SAX
code, you can use the <fo:inline font-family="monospace">org.dom4j.SAXWriter</fo:inline> clas.
</fo:block>
<fo:block space-before.maximum="1.2em" space-before.optimum="1em" space-before.minimum="0.8em" font-family="Courier" linefeed-treatment="preserve" white-space-collapse="false" text-align="start" wrap-option="no-wrap">
import org.xml.ConentHandler;

import org.dom4j.Document;
import org.dom4j.io.SAXWriter;

public class DeployFileLoaderSample {

  private org.dom4j.Document doc;

  public void transformtoSAX(ContentHandler ctxHandler) {
     SAXWriter writer = new SAXWriter();
     writer.setContentHandler(ctxHandler);
     writer.write(doc);
  }
}

</fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
Using <fo:inline font-family="monospace">SAXWriter</fo:inline> is fairly easy as you can see.
You can resolve also <fo:inline font-family="monospace">org.dom.Element</fo:inline> which means that
you are able to process a single element branch or even a single node with SAX.
</fo:block>
</fo:block>
</fo:flow>
</fo:page-sequence>
<fo:page-sequence master-name="oneside1" hyphenate="true" id="NC67" language="en">
<fo:static-content flow-name="xsl-region-before">
<fo:block text-align="center">
<fo:block xmlns:fo="http://www.w3.org/1999/XSL/Format" font-size="10pt">4. Navigation in dom4j</fo:block>
</fo:block>
</fo:static-content>
<fo:static-content flow-name="xsl-region-after">
<fo:block font-size="10pt" text-align="center">
<fo:page-number xmlns:fo="http://www.w3.org/1999/XSL/Format"/>
</fo:block>
</fo:static-content>
<fo:flow flow-name="xsl-region-body">
<fo:block>
<fo:block font-family="Helvetica" font-weight="bold" font-size="17.28pt" margin-left="-4pc">
<fo:block>Chapter 4. Navigation in dom4j</fo:block>
</fo:block>
</fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
dom4j offers several powerful mechansims for navigating through a document:-
</fo:block>
<fo:list-block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="NC6C">
<fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="NC6D">
<fo:list-item-label end-indent="label-end()">
<fo:block>•</fo:block>
</fo:list-item-label>
<fo:list-item-body start-indent="body-start()">
<fo:block>Using Iterators</fo:block>
</fo:list-item-body>
</fo:list-item>
<fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="NC70">
<fo:list-item-label end-indent="label-end()">
<fo:block>•</fo:block>
</fo:list-item-label>
<fo:list-item-body start-indent="body-start()">
<fo:block>Fast index based navigation</fo:block>
</fo:list-item-body>
</fo:list-item>
<fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="NC73">
<fo:list-item-label end-indent="label-end()">
<fo:block>•</fo:block>
</fo:list-item-label>
<fo:list-item-body start-indent="body-start()">
<fo:block>Using a backed List</fo:block>
</fo:list-item-body>
</fo:list-item>
<fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="NC76">
<fo:list-item-label end-indent="label-end()">
<fo:block>•</fo:block>
</fo:list-item-label>
<fo:list-item-body start-indent="body-start()">
<fo:block>Using XPath</fo:block>
</fo:list-item-body>
</fo:list-item>
<fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="NC79">
<fo:list-item-label end-indent="label-end()">
<fo:block>•</fo:block>
</fo:list-item-label>
<fo:list-item-body start-indent="body-start()">
<fo:block>In-Build GOF Visitor Pattern</fo:block>
</fo:list-item-body>
</fo:list-item>
</fo:list-block>
<fo:block id="NC7C">
<fo:block>
<fo:block font-family="Helvetica" margin-left="-4pc">
<fo:block keep-with-next="always">
<fo:block space-before.maximum="2em" space-before.optimum="1.5em" space-before.minimum="1em" font-weight="bold" font-size="16pt">Using Iterator</fo:block>
</fo:block>
</fo:block>
</fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
Most Java developers have already used java.util.Iterator or it's ancestor
<fo:inline font-family="monospace">java.util.Enumeration</fo:inline>.
Both classe are fairly involed into the Collection API and used
to visit the elements of a collection. The Iterator is appylied usually with a while
loop and Iterator methods hasNext() and next() item. Right now Collection API
dont support Generic Type (like C++ Templates), but there's already a Early Access Implemention available.
Now let's move to an living example of it in dom4j.
</fo:block>
</fo:block>
<fo:block space-before.maximum="1.2em" space-before.optimum="1em" space-before.minimum="0.8em" font-family="Courier" linefeed-treatment="preserve" white-space-collapse="false" text-align="start" wrap-option="no-wrap">

import java.util.Iterator;

import org.dom4j.Document;
import org.dom4j.Element;

public class DeployFileLoaderSample {

  private org.dom4j.Document doc;
  private org.dom4j.Element root;

  public void iterateRootChildren() {
    root = this.doc.getRootElement();
    Iterator elementIterator = root.elementIterator();
    while(elementIterator.hasNext()){
      Element elmeent = (Element)elementIterator.next();
      System.out.println(element.getName());
    }
  }
}
</fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
The above example might be a little bit confusing if you are not too familiar with the Collections API.
Casting is necessary when you want to acess the object. Java Generics will solve this problem in future.
</fo:block>
<fo:block space-before.maximum="1.2em" space-before.optimum="1em" space-before.minimum="0.8em" font-family="Courier" linefeed-treatment="preserve" white-space-collapse="false" text-align="start" wrap-option="no-wrap">
import java.util.Iterator;

import org.dom4j.Document;
import org.dom4j.Element;

public class DeployFileLoaderSample {

  private org.dom4j.Document doc;
  private org.dom4j.Element root;

  public void iterateRootChildren(String aFilterElementName) {
    root = this.doc.getRootElement();
    Iterator elementIterator = root.elementIterator(aFilterElementName);
    while(elementIterator.hasNext()){
      Element elmeent = (Element)elementIterator.next();
      System.out.println(element.getName());
    }
  }
}
</fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
Now the the method iterates on such Elements that have the <fo:inline font-style="italic">same name</fo:inline> as the parameterized String only. This can be used as a kind of
filter applied on top of Collection API's Iterator.
</fo:block>
<fo:block id="NC91">
<fo:block>
<fo:block font-family="Helvetica" margin-left="-4pc">
<fo:block keep-with-next="always">
<fo:block space-before.maximum="2em" space-before.optimum="1.5em" space-before.minimum="1em" font-weight="bold" font-size="16pt">Fast index based Navigation</fo:block>
</fo:block>
</fo:block>
</fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
Sometimes if you need to walk a large tree very quickly, creating an <fo:inline font-family="monospace">java.io.Iterator</fo:inline>
instance to loop through each <fo:inline font-family="monospace">Element</fo:inline>'s children can be expensive in
high performance environment.
To help this situation, dom4j provides a fast index based looping as follows.
</fo:block>
<fo:block space-before.maximum="1.2em" space-before.optimum="1em" space-before.minimum="0.8em" font-family="Courier" linefeed-treatment="preserve" white-space-collapse="false" text-align="start" wrap-option="no-wrap">
  public void treeWalk(Document document) {
    treeWalk( document.getRootElement() );
  }

  public void treeWalk(Element element) {
    for ( int i = 0, size = element.nodeCount(); i &lt; size; i++ ) {
      Node node = element.node(i);
      if ( node instanceof Element ) {
        treeWalk( (Element) node );
      }
      else {
        // do something....
      }
    }
  }
</fo:block>
<fo:block id="NCA3">
<fo:block>
<fo:block font-family="Helvetica" margin-left="-4pc">
<fo:block keep-with-next="always">
<fo:block space-before.maximum="2em" space-before.optimum="1.5em" space-before.minimum="1em" font-weight="bold" font-size="14pt">Using a backed List</fo:block>
</fo:block>
</fo:block>
</fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
You can navigate through an <fo:inline font-family="monospace">Element</fo:inline>'s children
using a backed <fo:inline font-family="monospace">List</fo:inline> such that modifications to the
<fo:inline font-family="monospace">List</fo:inline> are reflected back into the <fo:inline font-family="monospace">Element</fo:inline>.
It also means that all of the methods on <fo:inline font-family="monospace">List</fo:inline> can be used.
</fo:block>
<fo:block space-before.maximum="1.2em" space-before.optimum="1em" space-before.minimum="0.8em" font-family="Courier" linefeed-treatment="preserve" white-space-collapse="false" text-align="start" wrap-option="no-wrap">
import java.util.List;

import org.dom4j.Document;
import org.dom4j.Element;

public class DeployFileLoaderSample {

  private org.dom4j.Document doc;

  public void iterateRootChildren() {
    Element root = doc.getRootElement();

    List elements = root.elements;

    // we have access to the size() and other List methods
    if ( elements.size() &gt; 4 ) {
      // now lets remove a range of elements
      elements.subList( 3, 4 ).clear();
    }
  }
}
</fo:block>
</fo:block>
<fo:block id="NCBA">
<fo:block>
<fo:block font-family="Helvetica" margin-left="-4pc">
<fo:block keep-with-next="always">
<fo:block space-before.maximum="2em" space-before.optimum="1.5em" space-before.minimum="1em" font-weight="bold" font-size="14pt">Using XPath</fo:block>
</fo:block>
</fo:block>
</fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
XPath is is one of the most usefull features of dom4j.
You can use it to retrieve nodes from any location as well as evaluating complex expressions.
A good XPath refercence can be found in Micheal Kay's XSLT book [XSLTReference]
along with the [Zvon] Zvon tutorial.
</fo:block>
</fo:block>
<fo:block space-before.maximum="1.2em" space-before.optimum="1em" space-before.minimum="0.8em" font-family="Courier" linefeed-treatment="preserve" white-space-collapse="false" text-align="start" wrap-option="no-wrap">
import java.util.Iterator;

import org.dom4j.Documet;
import org.dom4j.DocumentHelper;
import org.dom4j.Element;
import org.dom4j.XPath;

public class DeployFileLoaderSample {

  private org.dom4j.Document doc;
  private org.dom4j.Element root;

  public void browseRootChildren() {
    XPath xpathSelector = DocumentHelper.createXPath("/people/person[@name='James']");
    List results = xpathSelector.selectNodes(doc);
    for ( Iterator iter = result.iterator(); iter.hasNext(); ) {
      Element element = (Element) iter.next();
      System.out.println(element.getName();
    }


  }

}
</fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
As selectNodes returns a List we can apply <fo:inline font-family="monospace">Iterator</fo:inline>
or any other operation avaliable on <fo:inline font-family="monospace">java.util.List</fo:inline>.

</fo:block>
<fo:block id="NCDB">
<fo:block>
<fo:block font-family="Helvetica" margin-left="-4pc">
<fo:block keep-with-next="always">
<fo:block space-before.maximum="2em" space-before.optimum="1.5em" space-before.minimum="1em" font-weight="bold" font-size="14pt">Using Visitor Pattern</fo:block>
</fo:block>
</fo:block>
</fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
The visitor pattern has a recrusive behavior and acts like SAX
in the way that partical traversal is <fo:inline font-style="italic">not</fo:inline> possible.
This means the complete document or the complete element branch will be visited.
 You should consider wisely when you want to use Visitor pattern, but then it
offers a powerful and elegant way of navigation.
This document doesn't explain Vistor Pattern in deepth,
[GoF98] covers more information.
</fo:block>
<fo:block space-before.maximum="1.2em" space-before.optimum="1em" space-before.minimum="0.8em" font-family="Courier" linefeed-treatment="preserve" white-space-collapse="false" text-align="start" wrap-option="no-wrap">
import java.util.Iterator;

import org.dom4j.Visitor;
import org.dom4j.VisitorSupport;
import org.dom4j.Document;
import org.dom4j.Element;

public class VisitorSample {

  public void demo(Document doc) {

    Visitor visitor = new VisitorSupport() {
      public void visit(Element element) {
        System.out.println(
          "Entity name: " + element.getName()  + "text " + element.getText();
        );
      }
    };

    doc.accept( visitor );
  }
}

</fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
As you can see we used a anonymous inner class to override the
<fo:inline font-family="monospace">VisitorSupport</fo:inline> callback adapter method
visit(Element element) and the accept() method starts
the vistor mechansim.
Please keep in mind that the <fo:inline font-style="italic">complete</fo:inline> element branch is visited.
</fo:block>
</fo:block>
</fo:block>
</fo:flow>
</fo:page-sequence>
<fo:page-sequence master-name="oneside1" hyphenate="true" id="NCF4" language="en">
<fo:static-content flow-name="xsl-region-before">
<fo:block text-align="center">
<fo:block xmlns:fo="http://www.w3.org/1999/XSL/Format" font-size="10pt">5. Manipulating dom4j</fo:block>
</fo:block>
</fo:static-content>
<fo:static-content flow-name="xsl-region-after">
<fo:block font-size="10pt" text-align="center">
<fo:page-number xmlns:fo="http://www.w3.org/1999/XSL/Format"/>
</fo:block>
</fo:static-content>
<fo:flow flow-name="xsl-region-body">
<fo:block>
<fo:block font-family="Helvetica" font-weight="bold" font-size="17.28pt" margin-left="-4pc">
<fo:block>Chapter 5. Manipulating dom4j</fo:block>
</fo:block>
</fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
Accessing XML content statically alone would not very special. Thus dom4j offers several methods for manipulation a documents content.
</fo:block>
<fo:block id="NCF9">
<fo:block>
<fo:block font-family="Helvetica" margin-left="-4pc">
<fo:block keep-with-next="always">
<fo:block space-before.maximum="2em" space-before.optimum="1.5em" space-before.minimum="1em" font-weight="bold" font-size="16pt">What <fo:inline xmlns:fo="http://www.w3.org/1999/XSL/Format" font-family="monospace">org.dom4j.Document</fo:inline> provides</fo:block>
</fo:block>
</fo:block>
</fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
A <fo:inline font-family="monospace">org.dom4j.Document</fo:inline> allows you to configure and retreive the root element.
You are also able to set the DOCTYPE or a SAX based <fo:inline font-family="monospace">EntityResolver</fo:inline>.
An empty <fo:inline font-family="monospace">Document</fo:inline> should be created via <fo:inline font-family="monospace">org.dom4j.DocumentFactory</fo:inline>.
</fo:block>
</fo:block>
<fo:block id="ND0D">
<fo:block>
<fo:block font-family="Helvetica" margin-left="-4pc">
<fo:block keep-with-next="always">
<fo:block space-before.maximum="2em" space-before.optimum="1.5em" space-before.minimum="1em" font-weight="bold" font-size="16pt">Working with <fo:inline xmlns:fo="http://www.w3.org/1999/XSL/Format" font-family="monospace">org.dom4j.Element</fo:inline>
</fo:block>
</fo:block>
</fo:block>
</fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
<fo:inline font-family="monospace">org.dom4j.Element</fo:inline> is a powerfull interface providing lots of methods for manipulation an Element.
</fo:block>
<fo:block space-before.maximum="1.2em" space-before.optimum="1em" space-before.minimum="0.8em" font-family="Courier" linefeed-treatment="preserve" white-space-collapse="false" text-align="start" wrap-option="no-wrap">

  public void changeElementName(String aName) {
    this.element.setName(aName);
  }

  public void changeElementText(String aText) {
    this.element.setText(aText);
  }

</fo:block>
</fo:block>
<fo:block id="ND1A">
<fo:block>
<fo:block font-family="Helvetica" margin-left="-4pc">
<fo:block keep-with-next="always">
<fo:block space-before.maximum="2em" space-before.optimum="1.5em" space-before.minimum="1em" font-weight="bold" font-size="16pt">Qualified Names</fo:block>
</fo:block>
</fo:block>
</fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
  An XML Element should have a qualified name. A qualified name consits normally of a Namespace and a
  local name. It's recommend to use <fo:inline font-family="monospace">org.dom4j.DocumentFactory</fo:inline> to create Qualifed
  Names that are provided by <fo:inline font-family="monospace">org.dom4j.QName</fo:inline> instances.
  </fo:block>
<fo:block space-before.maximum="1.2em" space-before.optimum="1em" space-before.minimum="0.8em" font-family="Courier" linefeed-treatment="preserve" white-space-collapse="false" text-align="start" wrap-option="no-wrap">

  import org.dom4j.Element;
  import org.dom4j.Document;
  import org.dom4j.DocumentFactory;
  import org.dom4j.QName;

  public class DeployFileCreator {

   protected Document deployDoc;
   protected Element root;

   public void DeployFileCreator()
   {
     QName rootName = DocumentFactory.getInstance().createQName("preferences", "", "http://java.sun.com/dtd/preferences.dtd");
     this.root = DocumentFactory.getInstance().createElement(rootName);
     this.deployDoc = DocumentFactory.getInstance().createDocument(this.root);
   }
  }

  </fo:block>
</fo:block>
<fo:block id="ND28">
<fo:block>
<fo:block font-family="Helvetica" margin-left="-4pc">
<fo:block keep-with-next="always">
<fo:block space-before.maximum="2em" space-before.optimum="1.5em" space-before.minimum="1em" font-weight="bold" font-size="16pt">Inserting elements</fo:block>
</fo:block>
</fo:block>
</fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
  Somethimes it's necessary to insert an element somewhere in a existing XML Tree. As dom4j is based on Collection API this
  causes no problems. The following expample shows how it could be done.
  </fo:block>
<fo:block space-before.maximum="1.2em" space-before.optimum="1em" space-before.minimum="0.8em" font-family="Courier" linefeed-treatment="preserve" white-space-collapse="false" text-align="start" wrap-option="no-wrap">

    public void insertElementAt(Element newElement, int index) {
      Element parent = this.element.getParent();
      List list = parent.content();
      list.add(index, newElement);
    }

    public void testInsertElementAt() {

    //insert an clone of current element after the current element
      Element newElement = this.element.clone();
      this.insertElementAt(newElement, this.root.indexOf(this.element)+1);

    // insert an clone of current element before the current element
      this.insertElementAt(newElement, this.root.indexOf(this.element));
    }
  </fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
  Studying the Collection API should lead to more solutions for similar problem and you will notify that dom4j fits well in the Collection Framework and both complement
  each other in order to processing xml document in a comfortable way.
  </fo:block>
</fo:block>
<fo:block id="ND32">
<fo:block>
<fo:block font-family="Helvetica" margin-left="-4pc">
<fo:block keep-with-next="always">
<fo:block space-before.maximum="2em" space-before.optimum="1.5em" space-before.minimum="1em" font-weight="bold" font-size="16pt">Cloning - How many sheeps do you need?</fo:block>
</fo:block>
</fo:block>
</fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
  Elements can be cloned as well. Usually cloning is supported in Java with clone() method that is derived from <fo:inline font-family="monospace">Object</fo:inline>, but a cloneable Object have to
  implement interface <fo:inline font-family="monospace">Clonable</fo:inline>. Java support shallow copying by simply returning <fo:inline font-style="italic">this</fo:inline> for standard. dom4j supporting  deep cloning
  because shallow copies would not make sence in context of an XML object model. This means that cloning can take a while because the complete tree branch or event the document
  will be cloned. Now we have a short look <fo:inline font-style="italic">how</fo:inline> dom4j cloning mechanism is used.
  </fo:block>
<fo:block space-before.maximum="1.2em" space-before.optimum="1em" space-before.minimum="0.8em" font-family="Courier" linefeed-treatment="preserve" white-space-collapse="false" text-align="start" wrap-option="no-wrap">

  import org.dom4j.Document;
  import org.dom4j.Element;

  public class DeployFileCreator {


   private Element cloneElement(String name) {
    return this.root.element(name).clone();
   }

   private Element cloneDetachElement(String name) {
     return this.root.createCopy(name);
   }

   public class TestElement extends junit.framework.TestCase {

     public void testCloning() throws junit.framwork.AssertionFailedException {
       assert("Test cloning with clone() failed!", this.creator.cloneElement("Key") != null);
       assert("Test cloning with createCopy() failed!", this.creator.cloneDetachElement() != null);
     }
   }
  }
  </fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
  The difference between <fo:inline font-style="italic">createCopy(...)</fo:inline> and <fo:inline font-style="italic">clone()</fo:inline> is that first is a polymorphic method that created a decoupled deep copy whereas <fo:inline font-style="italic">clone()</fo:inline> returns a returns a deep copy of the
  current document or element itself.
  </fo:block>
<fo:block end-indent="0.25in" start-indent="0.25in" space-before.maximum="1.2em" space-before.optimum="1em" space-before.minimum="0.8em">
<fo:block keep-with-next="true" font-weight="bold" font-size="14pt">Consider use of Cloning</fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
   Cloning might be usefull when you want to build a element pool. Such a pool should be desinged carefully keeping
   <fo:inline font-family="monospace">OutOfMemoryException</fo:inline> in mind. You could alternativly consider to use Reference API [Pawlan98]
    or Dave Millers approach [JavaWorldTip76].
  </fo:block>
</fo:block>
</fo:block>
</fo:flow>
</fo:page-sequence>
<fo:page-sequence master-name="oneside1" hyphenate="true" id="ND5F" language="en">
<fo:static-content flow-name="xsl-region-before">
<fo:block text-align="center">
<fo:block xmlns:fo="http://www.w3.org/1999/XSL/Format" font-size="10pt">6. Using dom4j with XSLT</fo:block>
</fo:block>
</fo:static-content>
<fo:static-content flow-name="xsl-region-after">
<fo:block font-size="10pt" text-align="center">
<fo:page-number xmlns:fo="http://www.w3.org/1999/XSL/Format"/>
</fo:block>
</fo:static-content>
<fo:flow flow-name="xsl-region-body">
<fo:block>
<fo:block font-family="Helvetica" font-weight="bold" font-size="17.28pt" margin-left="-4pc">
<fo:block>Chapter 6. Using dom4j with XSLT</fo:block>
</fo:block>
</fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
With eXtensible Stylesheet Language XML got's a powerfull method of transforming itself into other formats. Developing  Exportfilter's for dataformats are normally a hard job and so for XML XSL simpliefs that work. The aronym XSLT means the process of transformation, that is usally done by an XSL compliant Processor. XSL covers following subjects:
</fo:block>
<fo:list-block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="ND64">
<fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="ND65">
<fo:list-item-label end-indent="label-end()">
<fo:block>•</fo:block>
</fo:list-item-label>
<fo:list-item-body start-indent="body-start()">
<fo:block>XSL Style Sheet</fo:block>
</fo:list-item-body>
</fo:list-item>
<fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="ND68">
<fo:list-item-label end-indent="label-end()">
<fo:block>•</fo:block>
</fo:list-item-label>
<fo:list-item-body start-indent="body-start()">
<fo:block>XSL Processor for XSLT</fo:block>
</fo:list-item-body>
</fo:list-item>
<fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="ND6B">
<fo:list-item-label end-indent="label-end()">
<fo:block>•</fo:block>
</fo:list-item-label>
<fo:list-item-body start-indent="body-start()">
<fo:block>FOP Processor for FOP</fo:block>
</fo:list-item-body>
</fo:list-item>
<fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="ND6E">
<fo:list-item-label end-indent="label-end()">
<fo:block>•</fo:block>
</fo:list-item-label>
<fo:list-item-body start-indent="body-start()">
<fo:block>An XML source</fo:block>
</fo:list-item-body>
</fo:list-item>
</fo:list-block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
Since JaXP 1.1 TraX is the common API for proceeding a XSL Stylesheet inside of Java. You start with a <fo:inline font-family="monospace">TransformerFactory</fo:inline> and dealing with <fo:inline font-family="monospace">Result</fo:inline> and <fo:inline font-family="monospace">Source</fo:inline>. A <fo:inline font-family="monospace">Source</fo:inline> contains the source xml file that should be transformed. <fo:inline font-family="monospace">Result</fo:inline>'s contains the the result of transformation. dom4j offers <fo:inline font-family="monospace">org.dom4j.io.DocumentResult</fo:inline> and <fo:inline font-family="monospace">org.dom4j.io.DocumenSource</fo:inline> for compatiblity to TrAX.
Whereas <fo:inline font-family="monospace">org.dom4j.io.DocumentResult</fo:inline> contains a <fo:inline font-family="monospace">org.dom4j.Document</fo:inline> as result tree, <fo:inline font-family="monospace">DocumentSource</fo:inline> takes dom4j <fo:inline font-family="monospace">Document</fo:inline>s and pepare them for transformation. Both classes are build on top of TraX own SAX classes. This is much more perfomant as a DOM adaptation. The following example explains the use of XSLT with TraX and dom4j.
</fo:block>
<fo:block space-before.maximum="1.2em" space-before.optimum="1em" space-before.minimum="0.8em" font-family="Courier" linefeed-treatment="preserve" white-space-collapse="false" text-align="start" wrap-option="no-wrap">
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.stream.StreamSource;

import org.dom4j.Document;
import org.dom4j.io.DocumentResult;
import org.dom4j.io.DocumentSource;

public class DocumentStyler
{
    private Transformer transformer;

    public DocumentStyler(Source aStyleSheet) throws Exception {
        // create the transformer
        TransformerFactory factory = TransformerFactory.newInstance();
        transformer = factory.newTransformer( aStyleSheet );
    }

    public Document transform(Document aDocument, Source aStyleSheet) throws Exception {

        // perform the transformation
        DocumentSource source = new DocumentSource( aDocument );
        DocumentResult result = new DocumentResult();
        transformer.transform(source, result);

        // return the resulting document
        return result.getDocument();
    }
}

</fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
Imagine that you use XSLT to process a XML Schema in order to generate a empty template xml file accoring the schema contraints. The above sample should how easy the Java code is when you use dom4j and it's TraX support. If you use TemplateGenerator a lot you should consider the application of singleton pattern, but for this example I avoided this for simplicity. More information about TraX is provided  <fo:basic-link external-destination="http://www.java.sun.com/xml">here</fo:basic-link> [http://www.java.sun.com/xml].
</fo:block>
</fo:flow>
</fo:page-sequence>
<fo:page-sequence master-name="oneside1" hyphenate="true" id="ND9D" language="en">
<fo:static-content flow-name="xsl-region-before">
<fo:block text-align="center">
<fo:block xmlns:fo="http://www.w3.org/1999/XSL/Format" font-size="10pt">7. Schemata-Support</fo:block>
</fo:block>
</fo:static-content>
<fo:static-content flow-name="xsl-region-after">
<fo:block font-size="10pt" text-align="center">
<fo:page-number xmlns:fo="http://www.w3.org/1999/XSL/Format"/>
</fo:block>
</fo:static-content>
<fo:flow flow-name="xsl-region-body">
<fo:block>
<fo:block font-family="Helvetica" font-weight="bold" font-size="17.28pt" margin-left="-4pc">
<fo:block>Chapter 7. Schemata-Support</fo:block>
</fo:block>
</fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
The first way to describe and constrain the form and data of a XML document is as old as XML itself.
Document Type Definitions are used since the XML Specicifiation has been published.
At lot of applications used this DTDs to describe and validate her documents. Unfortunatly
the DTD Syntax was not that powerfull as needed. Written in SGML, DTDs are also not so easy to handle as
XML is.
</fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
During the time of DTDs a couple of people invents several other possible ways that could
be used to describe a document and force its content in the desired form. Latly the
W3C published XML Schema Specification with a couple of massive inprovements. XML Schemas
are no described by XML and the way to describe a Schema is done with DTD once and not longer
by every XML user. A growing group of people using XML Schema now. But XML Schema isn't perfect.
So a few people swear by Relax or Relax NG. The reader of this document is able to choose one of
the following technologies:
</fo:block>
<fo:list-block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="NDA4">
<fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="NDA5">
<fo:list-item-label end-indent="label-end()">
<fo:block>•</fo:block>
</fo:list-item-label>
<fo:list-item-body start-indent="body-start()">
<fo:block>Relax NG (Regular Language description for XML Next Generation)[RelaxNG]</fo:block>
</fo:list-item-body>
</fo:list-item>
<fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="NDAA">
<fo:list-item-label end-indent="label-end()">
<fo:block>•</fo:block>
</fo:list-item-label>
<fo:list-item-body start-indent="body-start()">
<fo:block>Relax (Regular Language description for XML)[Relax]</fo:block>
</fo:list-item-body>
</fo:list-item>
<fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="NDAF">
<fo:list-item-label end-indent="label-end()">
<fo:block>•</fo:block>
</fo:list-item-label>
<fo:list-item-body start-indent="body-start()">
<fo:block>TREX[TREX]</fo:block>
</fo:list-item-body>
</fo:list-item>
<fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="NDB4">
<fo:list-item-label end-indent="label-end()">
<fo:block>•</fo:block>
</fo:list-item-label>
<fo:list-item-body start-indent="body-start()">
<fo:block>XML DTDs[DTD]</fo:block>
</fo:list-item-body>
</fo:list-item>
<fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="NDB9">
<fo:list-item-label end-indent="label-end()">
<fo:block>•</fo:block>
</fo:list-item-label>
<fo:list-item-body start-indent="body-start()">
<fo:block>XML Schema[XSD]</fo:block>
</fo:list-item-body>
</fo:list-item>
</fo:list-block>
<fo:block id="NDBE">
<fo:block>
<fo:block font-family="Helvetica" margin-left="-4pc">
<fo:block keep-with-next="always">
<fo:block space-before.maximum="2em" space-before.optimum="1.5em" space-before.minimum="1em" font-weight="bold" font-size="16pt">Using XML Schema Data Types in dom4j</fo:block>
</fo:block>
</fo:block>
</fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
dom4j supports currently XML Schema Data Types[DataTypes] only.
The dom4j implementation is based on top of MSV. Earlier dom4j releases are built
on top of Suns Tranquilo (xsdlib.jar) but we use MSV now, because its uses
offers the same Tranquilo plus exiting additional features we discuss later.
</fo:block>
<fo:block space-before.maximum="1.2em" space-before.optimum="1em" space-before.minimum="0.8em" font-family="Courier" linefeed-treatment="preserve" white-space-collapse="false" text-align="start" wrap-option="no-wrap">
import java.util.List;

import org.dom4j.Document;
import org.dom4j.DocumentHelper;
import org.dom4j.XPath;
import org.dom4j.io.SAXReader;
import org.dom4j.dataType.DataTypeElement;

public class SchemaTypeDemo {

public static void main(String[] args) {

  SAXReader reader = new SAXReader();
  reader.setDocumentFactory( DatatypeDocumentFactory.getInstance() );
  Document schema =  return reader.read(xmlFile)
  XPath xpathSelector = DocumentHelper.createXPath("xsd:schema/xsd:complexType[@name='Address']/xsd:structure/xsd:element[@type]");
  List xsdElements = xpathSelector.selectNodes(schema);

  for (int i=0; i &lt; xsdElements.size(); i++) {
    DataElement tempXsdElement = (DatatypeElement)xsdElements.get(i);

    if (tempXsdElement.getData() instanceof Integer) {
       tempXsdElement.setData(new Integer(23));
     }
  }
}
</fo:block>
<fo:block end-indent="0.25in" start-indent="0.25in" space-before.maximum="1.2em" space-before.optimum="1em" space-before.minimum="0.8em">
<fo:block keep-with-next="true" font-weight="bold" font-size="14pt">Alpha status</fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
Note that the Data Type support is still alpha. If you find any bug, please report it to
the mailing listy. This helps us to make the Data Type support more error-prone and trustworthy.
</fo:block>
</fo:block>
</fo:block>
<fo:block id="NDCE">
<fo:block>
<fo:block font-family="Helvetica" margin-left="-4pc">
<fo:block keep-with-next="always">
<fo:block space-before.maximum="2em" space-before.optimum="1.5em" space-before.minimum="1em" font-weight="bold" font-size="16pt">Validation</fo:block>
</fo:block>
</fo:block>
</fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
dom4j currently comes not with its one validation engine. You are forced to use a different
engine instead. We recommend the use of Xerces 1.4.x or later in the past, but now you are
able to use Suns Multi Schema Validator as well. Xerces is able to validate against DTDs and
XML Schema, but not against TREX or Relax. You would belive it, but the Mulit Schema Validator Libery
supports all earlier mentioned types for validation.
</fo:block>
<fo:block end-indent="0.25in" start-indent="0.25in" space-before.maximum="1.2em" space-before.optimum="1em" space-before.minimum="0.8em">
<fo:block keep-with-next="true" font-weight="bold" font-size="14pt">Consider use of Validation</fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
Using Valdiation consumes valueable resources. Use it wisely.
</fo:block>
</fo:block>
<fo:block id="NDD8">
<fo:block>
<fo:block font-family="Helvetica" margin-left="-4pc">
<fo:block keep-with-next="always">
<fo:block space-before.maximum="2em" space-before.optimum="1.5em" space-before.minimum="1em" font-weight="bold" font-size="14pt">Using Apaches Xerces 1.4.x and dom4j for validation</fo:block>
</fo:block>
</fo:block>
</fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
Using Xerecs 1.4.x for Schema and Validation is very easy. You have to download
Xerces at Apaches XML web sites. The past has shown that not always the newest version
is best. You can view there mailing lists in order to find out which version is buggy
and which works well. For Schema support at least Xerecs 1.4.0 is necessary. If you
work according the following rules valdation should be no problem.
</fo:block>
<fo:list-block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="NDDD">
<fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="NDDE">
<fo:list-item-label end-indent="label-end()">
<fo:block>•</fo:block>
</fo:list-item-label>
<fo:list-item-body start-indent="body-start()">
<fo:block>Turn on validation mode - which is false for default - using a SAXReader instance</fo:block>
</fo:list-item-body>
</fo:list-item>
<fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="NDE1">
<fo:list-item-label end-indent="label-end()">
<fo:block>•</fo:block>
</fo:list-item-label>
<fo:list-item-body start-indent="body-start()">
<fo:block>Set the following Xerces property http://apache.org/xml/properties/schema/external-noNamespaceSchemaLocation using the schema URI.</fo:block>
</fo:list-item-body>
</fo:list-item>
<fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="NDE4">
<fo:list-item-label end-indent="label-end()">
<fo:block>•</fo:block>
</fo:list-item-label>
<fo:list-item-body start-indent="body-start()">
<fo:block>Create a SAX XMLErrorHandler and install it to your SAXReader instance.</fo:block>
</fo:list-item-body>
</fo:list-item>
<fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="NDE7">
<fo:list-item-label end-indent="label-end()">
<fo:block>•</fo:block>
</fo:list-item-label>
<fo:list-item-body start-indent="body-start()">
<fo:block>Parse and validate the Document.</fo:block>
</fo:list-item-body>
</fo:list-item>
<fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="NDEA">
<fo:list-item-label end-indent="label-end()">
<fo:block>•</fo:block>
</fo:list-item-label>
<fo:list-item-body start-indent="body-start()">
<fo:block>Output Validation/Parse Errors errors.</fo:block>
</fo:list-item-body>
</fo:list-item>
</fo:list-block>
<fo:block space-before.maximum="1.2em" space-before.optimum="1em" space-before.minimum="0.8em" font-family="Courier" linefeed-treatment="preserve" white-space-collapse="false" text-align="start" wrap-option="no-wrap">
import org.dom4j.Document;
import org.dom4j.Element;
import org.dom4j.io.OutputFormat;
import org.dom4j.io.SAXReader;
import org.dom4j.io.XMLWriter;
import org.dom4j.util.XMLErrorHandler;


import org.xml.sax.ErrorHandler;
import org.xml.sax.SAXParseException

public class SimpleValidationDemo {

public static void main(String[] args) {
  SAXReader reader = new SAXReader();

  reader.setValidation(true);

  // specify the schema to use
  reader.setProperty(
   "http://apache.org/xml/properties/schema/external-noNamespaceSchemaLocation",
   "prices.xsd"
  );

  // add an error handler which turns any errors into XML
   XMLErrorHandler errorHandler = new XMLErrorHandler();
   reader.setErrorHandler( errorHandler );

  // now lets parse the document
  Document document = reader.read(args[0]);

 // now lets output the errors as XML
  XMLWriter writer = new XMLWriter( OutputFormat.createPrettyPrint() );
  writer.write( errorHandler.getErrors() );
}

</fo:block>
<fo:block end-indent="0.25in" start-indent="0.25in" space-before.maximum="1.2em" space-before.optimum="1em" space-before.minimum="0.8em">
<fo:block keep-with-next="true" font-weight="bold" font-size="14pt">Xerces and Crimson</fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
Both, Xerecs and Crimson, are JaXPable Parsers. You should be carefully in using
Crimson and Xerces in same classpath. Xerces will work only correct when it is the
mentioned <fo:inline font-style="italic">before</fo:inline> Crimson in classpath. At this time I
recommend that you should either Xereces <fo:inline font-style="italic">or</fo:inline> Crimson.
</fo:block>
</fo:block>
</fo:block>
<fo:block id="NDFB">
<fo:block>
<fo:block font-family="Helvetica" margin-left="-4pc">
<fo:block keep-with-next="always">
<fo:block space-before.maximum="2em" space-before.optimum="1.5em" space-before.minimum="1em" font-weight="bold" font-size="14pt">A perfect team - Multi Schema Validator[MSV] and dom4j </fo:block>
</fo:block>
</fo:block>
</fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
Kohsuke Kawaguchi a deleloper from Sun created a extremly usefull tool for validtion of XML
documents. The Multi Schema Validator (MSV) supports following kinds of Schmemata:
</fo:block>
<fo:list-block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="NE03">
<fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="NE04">
<fo:list-item-label end-indent="label-end()">
<fo:block>•</fo:block>
</fo:list-item-label>
<fo:list-item-body start-indent="body-start()">
<fo:block>Relax NG</fo:block>
</fo:list-item-body>
</fo:list-item>
<fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="NE07">
<fo:list-item-label end-indent="label-end()">
<fo:block>•</fo:block>
</fo:list-item-label>
<fo:list-item-body start-indent="body-start()">
<fo:block>Relax </fo:block>
</fo:list-item-body>
</fo:list-item>
<fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="NE0A">
<fo:list-item-label end-indent="label-end()">
<fo:block>•</fo:block>
</fo:list-item-label>
<fo:list-item-body start-indent="body-start()">
<fo:block>TREX</fo:block>
</fo:list-item-body>
</fo:list-item>
<fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="NE0D">
<fo:list-item-label end-indent="label-end()">
<fo:block>•</fo:block>
</fo:list-item-label>
<fo:list-item-body start-indent="body-start()">
<fo:block>XML DTDs</fo:block>
</fo:list-item-body>
</fo:list-item>
<fo:list-item space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em" id="NE10">
<fo:list-item-label end-indent="label-end()">
<fo:block>•</fo:block>
</fo:list-item-label>
<fo:list-item-body start-indent="body-start()">
<fo:block>XML Schema</fo:block>
</fo:list-item-body>
</fo:list-item>
</fo:list-block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
You are able to use the MSV and dom4j in order to validate your Documents. The following examples shows you how to use
the MSV and with dom4j.
</fo:block>
<fo:block space-before.maximum="1.2em" space-before.optimum="1em" space-before.minimum="0.8em" font-family="Courier" linefeed-treatment="preserve" white-space-collapse="false" text-align="start" wrap-option="no-wrap">
import com.sun.msv.grammar.Grammar;
import com.sun.msv.reader.util.GrammarLoader;
import com.sun.msv.reader.util.IgnoreController;
import com.sun.msv.verifier.DocumentDeclaration;
import com.sun.msv.verifier.ValidityViolation;
import com.sun.msv.verifier.Verifier;
import com.sun.msv.verifier.VerificationErrorHandler;

import javax.xml.parsers.SAXParserFactory;

import org.dom4j.Document;
import org.dom4j.DocumentException;
import org.dom4j.io.SAXReader;
import org.dom4j.io.SAXWriter;

import org.xml.sax.ContentHandler;
import org.xml.sax.ErrorHandler;
import org.xml.sax.Locator;
import org.xml.sax.SAXParseException;

import java.net.URL;
import java.io.File;

public class Schema {

    public static void main(String argv[]) {
        try {
            String filename = argv[0];
            String schema = argv[1];

            URL fileURL = new File(filename).toURL();
            URL schemaURL = new File(schema).toURL();

            SAXReader reader = new SAXReader();
            Document doc = reader.read(fileURL);
            validate(doc, schemaURL.toExternalForm());
        } catch (Exception e) {
            e.printStackTrace(System.err);
        }
    }

    static public void validate(Document doc, String schema)
        throws Exception {

        // Turn on Namespace handling in theJAXP SAXParserFactory
        SAXParserFactory saxFactory = SAXParserFactory.newInstance();
        saxFactory.setNamespaceAware(true);

        // create MSVs DocumentDeclaration by overriding
        // a IgnoreController in an anonyous inner class
        DocumentDeclaration docDeclaration =
            GrammarLoader.loadVGM(schema, new IgnoreController() {

                    public void error(Locator[] locations,
                                      String message,
                                      Exception exception) {
                        System.out.println("ERROR: " + message);
            }

            public void error(Locator[] locations, String message) {
                System.out.println("WARNING: " + message);
            }
        }, saxFactory);

        // create a new Verifier that reports vlidation errors
        // using an anonymous inner class
        Verifier verifier =
            new Verifier(docDeclaration, new VerificationErrorHandler() {

                    public void onError(ValidityViolation e) {
                        System.out.println("Document invalid! Error: " + e);
                    }

                    public void onWarning(ValidityViolation e) {
                        System.out.println("Document invalid! Warning: " + e);
                    }
                });

        SAXWriter writer = new SAXWriter((ContentHandler) verifier);
        writer.setErrorHandler(new ErrorHandler() {

                public void error(SAXParseException e) {
                    System.out.println("ERROR:" + e);
                }

                public void fatalError(SAXParseException e) {
                    System.out.println("Fatal:" + e);
                }

                public void warning(SAXParseException e) {
                    System.out.println("Warning:" + e);
                }
        });

        // validate now!
        writer.write(doc);
        if (verifier.isValid())
            System.err.println("The document was valid");
        else
            System.err.println("The document was not valid");
    }
}
</fo:block>
<fo:block space-before.optimum="1em" space-before.minimum="0.8em" space-before.maximum="1.2em">
At the first look the use of MSV looks not trival. The Xerces validation is
easier to use in code, but not so powerfull. Currently its not clear if XML Schema
will be the next standard for validation. Relax NG gots a even more growing
lobby. If you want to build a open application that is not fixed to a
specific XML parser and specific XML Schematas you should use this powerfull
tool.
</fo:block>
</fo:block>
</fo:block>
</fo:flow>
</fo:page-sequence>
<fo:page-sequence master-name="oneside1" hyphenate="true" id="NE1A" language="en">
<fo:static-content flow-name="xsl-region-after">
<fo:block font-size="10pt" text-align="center">
<fo:page-number xmlns:fo="http://www.w3.org/1999/XSL/Format"/>
</fo:block>
</fo:static-content>
<fo:flow flow-name="xsl-region-body">
<fo:block>
<fo:block font-weight="bold" font-family="Helvetica" font-size="17.28pt" margin-left="-4pc">
<fo:block>Further Reading</fo:block>
</fo:block>
</fo:block>
<fo:block>
<fo:block font-weight="bold" font-size="16pt">Books</fo:block>
<fo:block id="NE20">
<fo:inline>[XSLTReference] </fo:inline>
<fo:inline>Michael Kay. </fo:inline>
<fo:inline>Copyright © 2001 Worx Press, Inc.. </fo:inline>
<fo:inline>1-861-005067. </fo:inline>
<fo:inline>
<fo:inline>Worx Press. </fo:inline>
</fo:inline>
<fo:inline>
<fo:inline font-style="italic">XSLT Programmer's Reference 2'nd Edition</fo:inline>. </fo:inline>
<fo:inline>
<fo:inline>
<fo:inline font-style="italic">Programmer To Programmer</fo:inline>. </fo:inline>
<fo:inline>
<fo:inline>Worx Press. </fo:inline>
</fo:inline>
</fo:inline>
</fo:block>
<fo:block id="NE3B">
<fo:inline>[GoF95] </fo:inline>
<fo:inline>Erich Gamma, Richard Helm, Ralph Johnson, and John Vlissides. </fo:inline>
<fo:inline>Copyright © 1995 Addison Wesley Pub, Co.. </fo:inline>
<fo:inline>0-201-633-612. </fo:inline>
<fo:inline>
<fo:inline>Addison-Wesley. </fo:inline>
</fo:inline>
<fo:inline>
<fo:inline font-style="italic">Design Patterns: Elements of Reusable Object-Orientated Software</fo:inline>. </fo:inline>
</fo:block>
</fo:block>
</fo:flow>
</fo:page-sequence>
<fo:block>
<fo:block font-weight="bold" font-size="16pt">Articles</fo:block>
<fo:block id="NE62">
<fo:inline>[Pawlan98] </fo:inline>
<fo:inline>Monica Pawlan. </fo:inline>
<fo:inline>Copyright © 1998 http://developer.java.sun.com/javatips/jw-tips76.html. </fo:inline>
<fo:inline>
<fo:inline font-style="italic">Reference Objects and Garbage Collection</fo:inline>. </fo:inline>
</fo:block>
<fo:block id="NE72">
<fo:inline>[JavaTip76] </fo:inline>
<fo:inline>Dave Miller. </fo:inline>
<fo:inline>Copyright ©  http://www.javaworld.com/javaworld/javatips/jw-javatip76.html. </fo:inline>
<fo:inline>
<fo:inline font-style="italic">An alternative to the deep copying technique</fo:inline>. </fo:inline>
</fo:block>
<fo:block id="NE80">
<fo:inline>[BillVenners] </fo:inline>
<fo:inline>Bill Venners. </fo:inline>
<fo:inline>Copyright ©  http://www.artima.com/designtechniques/interfaces.html. </fo:inline>
<fo:inline>
<fo:inline font-style="italic">Designing with Interfaces - One Programmer's Struggle to Understand the Interface</fo:inline>. </fo:inline>
</fo:block>
<fo:block id="NE8E">
<fo:inline>[Zvon] </fo:inline>
<fo:inline>Copyright ©  http://www.zvon.org/xxl/XPathTutorial/General/examples.html. </fo:inline>
<fo:inline>
<fo:inline font-style="italic">Zvon XPath tutorial</fo:inline>. </fo:inline>
</fo:block>
<fo:block id="NE96">
<fo:inline>[RelaxNG] </fo:inline>
<fo:inline>Copyright ©  http://www.oasis-open.org/committees/relax-ng/. </fo:inline>
<fo:inline>
<fo:inline font-style="italic">Developing RELAX NG, the next generation schema language for XML: clean, simple and powerful</fo:inline>. </fo:inline>
</fo:block>
<fo:block id="NE9E">
<fo:inline>[Relax] </fo:inline>
<fo:inline>Copyright ©  http://www.xml.gr.jp/relax/. </fo:inline>
<fo:inline>
<fo:inline font-style="italic">The offical site of Relax</fo:inline>. </fo:inline>
</fo:block>
<fo:block id="NEA6">
<fo:inline>[TREX] </fo:inline>
<fo:inline>Copyright ©  http://www.thaiopensource.com/trex/. </fo:inline>
<fo:inline>
<fo:inline font-style="italic">TREX - Tree Regular Expressions for XML</fo:inline>. </fo:inline>
</fo:block>
<fo:block id="NEAE">
<fo:inline>[DTD] </fo:inline>
<fo:inline>Copyright ©  http://www.w3schools.com/dtd/default.asp. </fo:inline>
<fo:inline>
<fo:inline font-style="italic">Document Type Definitions Tutorial</fo:inline>. </fo:inline>
</fo:block>
<fo:block id="NEB6">
<fo:inline>[XSD] </fo:inline>
<fo:inline>Copyright ©  http://www.w3.org/XML/Schema http://www.w3.org/XML/1998/06/xmlspec-report. </fo:inline>
<fo:inline>
<fo:inline font-style="italic">XML Schema</fo:inline>. </fo:inline>
</fo:block>
</fo:block>
</fo:root>
