<?xml version="1.0"?>

<!--
 !   Main source build file
 !
 !   This file describes how to build the Starlink java system from a
 !   source release. It requires Apache ANT and a Java Development Kit.
 ! 
 !   The main targets are:
 !
 !      build          -> compiles the system
 !      javadocs       -> creates packages API documentation
 !      javadocs-full  -> creates the complete API documentation
 !      install        -> installs the system and documentation
 !      install        -> deinstalls the system
 !      clean          -> cleans up the build
 !      export         -> create full export distributions of packages
 !
 !   Authors:
 !      Peter W. Draper (2-JUL-2002)
 !
 !-->

<project name="Build file for Starlink" default="build" basedir=".">

  <!-- If either or both of these files exist then any properties
   !   contained within them will override those defined here.  -->
  <property file="${user.home}/.stardev.properties"/>
  <property file=".properties"/>

  <!--
   !  =================
   !  Global Properties
   !  =================
   !-->

  <!-- Directory for the Starlink installation (usually /star/java)-->
  <property name="star.dir" value="${basedir}/../"/>

  <!-- Directory to install into (install target, usually /star/java)-->
  <property name="star.install" value="${star.dir}"/>

  <!-- Directory that contains the Starlink jar tree -->
  <property name="star.jar.dir" value="${star.dir}/lib"/>

  <!-- Directory that contains the locally built sources (usually
   !   /star/java/source for full distribution) -->
  <property name="star.build.dir" value="${basedir}"/>

  <!-- Whether to generate Java documentation -->
  <property name="javadocs.required" value="false"/>

  <!-- Directory that any archives should be placed into. The local
   !   directort by default -->
  <property name="star.archive.dir" value="${basedir}"/>

  <!-- URL and package-list for linking against full Java docs -->
  <property name="javaapi.url" value="http://java.sun.com/j2se/1.4/docs/api/"/>
  <property name="javaapi.lis" value="${star.build.dir}/src/docs/javaapi/"/>

  <!--
   !  ================
   !  Local Properties
   !  ================
   !-->

  <!-- Define the package name and current versions. Use "full" names
   !   to avoid passing these down the packages. All parameters are
   !   passed by default. -->
  <property name="FullName" value="Starlink"/>
  <property name="fullname" value="starlink"/>
  <property name="fullversion" value="0.1"/>

  <!-- Compilation options -->
  <property name="debug" value="true"/>
  <property name="deprecation" value="false"/>
  <property name="optimize" value="true"/>

  <!-- Default target for the sub-packages -->
  <property name="what" value="build"/>

  <!-- Directory for the complete java documentation -->
  <property name="docs.dir" value="${basedir}/docs"/>
  <property name="docs.javadocs" value="${docs.dir}/javadocs"/>

  <!-- Local directory for support files -->
  <property name="support.dir" value="${basedir}/src"/>
  <property name="support.docs" value="${support.dir}/docs"/>

  <!-- 
   !  ======================================
   !  Execute all ANT in all sub-directories
   !  ======================================
   !
   !  Execute a target in each of the sub-directories. The target
   !  invoked is defined by the "what" property. New packages should
   !  have an entry created in the correct dependency order. Note
   !  that all properties defined in this file are passed on.
   !-->
  <target name="call_package_ant">

    <echo message="Executing JUnit target: ${what}"/>
    <ant dir="./junit" target="${what}"/>
    
    <echo message="Executing tamfits target: ${what}"/>
    <ant dir="./tamfits" target="${what}"/>
    
    <echo message="Executing axis target: ${what}"/>
    <ant dir="./axis" target="${what}"/>
    
    <echo message="Executing dom4j target: ${what}"/>
    <ant dir="./dom4j" target="${what}"/>
    
    <echo message="Executing Jetty target: ${what}"/>
    <ant dir="./jetty" target="${what}"/>
    
    <echo message="Executing JSky target: ${what}"/>
    <ant dir="./jsky" target="${what}"/>
    
    <echo message="Executing UTIL target: ${what}"/>
    <ant dir="./util" target="${what}"/>

    <echo message="Executing JNIAST target: ${what}"/>
    <ant dir="./jniast" target="${what}"/>
      
    <echo message="Executing JNIHDS target: ${what}"/> 
    <ant dir="./jnihds" target="${what}"/> 
    
    <echo message="Executing compatibility NDArray target: ${what}"/> 
    <ant dir="./oldarray" target="${what}"/> 
    
    <echo message="Executing NDArray target: ${what}"/> 
    <ant dir="./array" target="${what}"/> 
    
    <echo message="Executing NDX target: ${what}"/> 
    <ant dir="./ndx" target="${what}"/> 
    
    <echo message="Executing HDS target: ${what}"/> 
    <ant dir="./hds" target="${what}"/> 
    
    <echo message="Executing FITS target: ${what}"/> 
    <ant dir="./fits" target="${what}"/> 
    
    <echo message="Executing HDX target: ${what}"/> 
    <ant dir="./hdx" target="${what}"/> 

    <echo message="Executing JAIUtil target: ${what}"/>
    <ant dir="./jaiutil" target="${what}"/>
    
    <echo message="Executing SOAPSERVER target: ${what}"/> 
    <ant dir="./soapserver" target="${what}"/> 
    
    <echo message="Executing SOG target: ${what}"/> 
    <ant dir="./sog" target="${what}"/> 

    <echo message="Executing SPLAT target: ${what}"/>
    <ant dir="./splat" target="${what}"/>
    
  </target>
  
  <!--
   !   =================
   !   Prepare the build
   !   =================
   !
   !  Do any jobs that are required before any other target can
   !  proceed. This isn't used at present, but shows the sort of thing
   !  you might want to do.
   !-->
  <target name="prepare">
    <tstamp>
      <format property="year" pattern="yyyy" />
    </tstamp>
    <filterchain id="install.filters">
      <replacetokens>
        <token key="VERSION" value="${version}" />
        <token key="DATE" value="${TODAY}" />
        <token key="TIME" value="${TSTAMP}" />
      </replacetokens>
    </filterchain>
  </target>
  
  <!--
   !   ==================
   !   Build all packages
   !   ==================
   !-->
  <target name="build" depends="prepare" 
          description="--> compiles all packages">

     <antcall target="call_package_ant">
        <param name="what" value="build"/>
     </antcall>

  </target>

  <!--
   !   ============================================
   !   Cleans up build and distribution directories
   !   ============================================
   !-->
  <target name="clean" depends="prepare" description="--> cleans up build">

     <antcall target="call_package_ant">
        <param name="what" value="clean"/>
     </antcall>

  </target>

  <!--
   !   ================================
   !   Install into the "Starlink" tree
   !   ================================
   !-->
  <target name="install" depends="prepare" 
          description="--> install into Starlink tree">

     <antcall target="call_package_ant">
        <param name="what" value="install"/>
     </antcall>

  </target>

  <!--
   !   ===================================
   !   De-install from the "Starlink" tree
   !   ===================================
   !-->
  <target name="deinstall" depends="prepare" 
          description="--> undo the install target">

     <antcall target="call_package_ant">
        <param name="what" value="deinstall"/>
     </antcall>

  </target>

  <!--
   !   =========================================
   !   Creates API documentation in each package
   !   =========================================
   !
   !  Create the documentation in each package.
   !
   !-->
  <target name="javadocs" depends="prepare" 
          description="--> generate the java documentation">

     <antcall target="call_package_ant">
        <param name="what" value="javadocs"/>
     </antcall>

  </target>

  <!--
   !   =============================================
   !   Creates the complete system API documentation
   !   =============================================
   !
   !  Creates the complete javadocs for all local source packages.
   !-->
  <target name="javadocs-full" depends="prepare" 
          description="--> generate the complete java documentation">

     <!-- First make the all the java source available in a suitable
      !   fashion for gathering together. -->
     <antcall target="call_package_ant">
        <param name="what" value="javadoc-sources"/>
     </antcall>

     <!-- Generate a classpath that should include the compiled forms
      !   of all the source we're about to document.
      !-->
     <path id="classpath">
       <dirset dir="${star.build.dir}">
          <include name="*/build/classes"/>
       </dirset>
       <fileset dir="${star.build.dir}">
          <include name="*/lib/*/*.jar"/>
       </fileset>
     </path>

     <mkdir dir="${docs.javadocs}"/>
     <javadoc useexternalfile="yes"
              destdir="${docs.javadocs}"
              author="true"
              version="true"
              locale="en"
              windowtitle="${FullName} API"
              doctitle="${FullName}" 
              protected="true"
              classpathref="classpath"
              source="1.4">

      <!-- Get all possible package names from the build/java
       !   directories. Need to name all top-level packages
       !   unfortunately (rather than just get all source file names)
       !   otherwise internal linking doesn't work well. If a single
       !   packageset (which is really a dirset) that could be
       !   modified to remove the "{package}/build/java" part could be
       !   created then this would be unnecessary (TODO: look into
       !   this and maybe create a special type).
       !--> 
      <packageset dir="util/build/java" defaultexcludes="yes">
         <include name="**"/>
      </packageset>

      <packageset dir="jniast/build/java" defaultexcludes="yes">
         <include name="**"/>
      </packageset>

      <packageset dir="jnihds/build/java" defaultexcludes="yes">
         <include name="**"/>
      </packageset>

      <packageset dir="array/build/java" defaultexcludes="yes">
         <include name="**"/>
      </packageset>

      <packageset dir="ndx/build/java" defaultexcludes="yes">
         <include name="**"/>
      </packageset>

      <packageset dir="hds/build/java" defaultexcludes="yes">
         <include name="**"/>
      </packageset>

      <packageset dir="fits/build/java" defaultexcludes="yes">
         <include name="**"/>
      </packageset>

      <packageset dir="hdx/build/java" defaultexcludes="yes">
         <include name="**"/>
      </packageset>

      <packageset dir="jaiutil/build/java" defaultexcludes="yes">
         <include name="**"/>
      </packageset>

      <packageset dir="soapserver/build/java" defaultexcludes="yes">
         <include name="**"/>
      </packageset>

      <group title="${FullName} API" packages="uk.ac.starlink.*"/>

      <!-- Third party packages built from source -->
      <packageset dir="tamfits/build/java" defaultexcludes="yes">
         <include name="**"/>
      </packageset>
      <group title="nom.tam.fits API" packages="nom.*"/>

      <packageset dir="jsky/build/java" defaultexcludes="yes">
         <include name="**"/>
      </packageset>
      <group title="JSky API" packages="jsky.*"/>

      <!-- Link to the full Java API at SUNs website -->
      <link offline="true" href="${javaapi.url}" 
            packagelistLoc="${javaapi.lis}"/>

      <!-- TODO: link to static third party docs, need fixed relative
       !   positions or pretend offline and use a package list -->

      <bottom>Copyright &#169; ${year} \\
              CLRC: Central Laboratory of the Research Councils.
              All Rights Reserved.</bottom>

    </javadoc>

  </target>

  <!--
   !   ===============================
   !   Create the export distributions
   !   ===============================
   !-->
  <target name="export" depends="prepare" 
          description="--> create all export archives">

     <antcall target="call_package_ant">
        <param name="what" value="export"/>
     </antcall>

  </target>

  <!--
   !   =================
   !   Run the testcases
   !   =================
   ! Do this when know how!
   !-->

</project>

