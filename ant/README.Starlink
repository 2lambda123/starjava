
                       ANT for Starlink builds
                       =======================

This is the ANT tool (version 1.5) together with some additional
tasks and types required for Starlink ANT builds.

Before you can build anything else you'll need to build this. First
add the local "bin" directory to the PATH and define where to find a
JDK:

   setenv PATH `pwd`/bin
   setenv JAVA_HOME /my/local/jdk/root/

If these are correct then the "ant" command should now work. Use:

   ant -projecthelp 

to see the targets (these are not the same as the standard Starlink
ones). If this fails check the PATH and JAVA_HOME settings, if these
are OK then you've got a broken release (see if the lib directory has
some jar files -- ant.jar, optional.jar xercesImpl.jar and xml-apis.jar).

To build ANT with the new targets you need to do:

   ant -Dbootstrap.dir=../.. bootstrap
   ant clean

(replace ../.. with the /star/java directory if needed). This should
install a version of ANT ready to build our real sources. 

The new files added to this release are:

   src/main/uk/ac/starlink/ant/tasks/LoggedCopy.java
   src/main/uk/ac/starlink/ant/tasks/ListDelete.java
   src/main/uk/ac/starlink/ant/types/ExtClasspath.java

The files:

   src/main/org/apache/tools/ant/taskdefs/defaults.properties 
   src/main/org/apache/tools/ant/types/defaults.properties 

are also modified to add these new tasks and types to the standard sets.

The tasks added are "loggedcopy" and "listdelete". These are
modifications of the "copy" and "delete" tasks to add the ability to
record the names of the files copied and to accept a list of files to
delete. 

The "loggedcopy" task has two new attributes "logfile", the name of
file to write, and "logfileAppend", a boolean indicating if an
existing logfile should be deleted or appended to (useful for
recording multiple copies). Note that this should generally be
combined with overwrite="true", as files that are not out of date will
not normally be copied and will therefore not appear in the log.

  <loggedcopy todir="${star.bin}"
              logfile="${install.log}"
              overwrite="${install.overwrite}"
              logfileAppend="false">
    <fileset dir="${dist.bin}"/>
  </loggedcopy>

The "listdelete", task adds the ability to embed an FileList in the
"delete" task. This is just so that the following snippet will undo
the action of a "loggedcopy" (FileSets do not work with non-existent
files and function poorly with fixed sets of names, so cannot be made
to do this job):

  <loadfile property="files" srcFile="${install.log}"/>
  <listdelete>
     <filelist dir="/" files="${files}"/>
  </listdelete>

The final extension is a type "extclasspath" that extends the "path"
type. This generates a final path that includes any "download
extensions" that are described in any jars files found in the various
parts of the path. Normally this is intended to produce a CLASSPATH
that mimics the one used by the extension class loader, except it is a
real CLASSPATH and can therefore be manipulated easily (i.e. have
another CLASSPATH added to it).

  <extclasspath id="installed.classpath">
    <pathelement location="${star.jar.dir}/hdx/hdx.jar"/>
    <pathelement location="${star.jar.dir}/jsky/jsky.jar"/>
    <pathelement location="${star.jar.dir}/soapserver/soapserver.jar"/>
  </extclasspath>

Would make "installed.classpath" include all jars reference in the
manifests of the "hdx", "jsky" and "soapserver" jars and the jars that
they reference.

Peter W. Draper (18-JUL-2002)

