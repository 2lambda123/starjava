/* ********************************************************
 * This file automatically generated by /d2/starjava/java/source/jniast/src/perl/SkyFrame.pl
 * Do not edit
 **********************************************************/

package uk.ac.starlink.ast;


/**
 * Java interface to the AST SkyFrame class
 *  - celestial coordinate system description. 
 * A SkyFrame is a specialised form of Frame which describes
 * celestial longitude/latitude coordinate systems. The particular
 * celestial coordinate system to be represented is specified by
 * setting the SkyFrame's System attribute (currently, the default
 * is FK5) qualified, as necessary, by a mean Equinox value and/or
 * an Epoch.
 * <p>
 * All the coordinate values used by a SkyFrame are in
 * radians. These may be formatted in more conventional ways for
 * display by using astFormat.
 * 
 * 
 * @see  <a href='http://star-www.rl.ac.uk/cgi-bin/htxserver/sun211.htx/?xref_SkyFrame'>AST SkyFrame</a> 
 * @author   Mark Taylor (Starlink) 
 */
public class SkyFrame extends Frame {
    /** 
     * Create a SkyFrame.   
     * @throws  AstException  if an error occurred in the AST library
    */
    public SkyFrame(  ) {
        construct(  );
    }
    private native void construct(  );

    /**
     * Get 
     * format celestal coordinates as times by axis.  
     * This attribute specifies the default style of formatting to be
     * used (e.g. by astFormat) for the celestial coordinate values
     * described by a SkyFrame. It takes a separate boolean value for
     * each SkyFrame axis so that, for instance, the setting
     * "AsTime(2)=0" specifies the default formatting style for
     * celestial latitude values.
     * <p>
     * If the AsTime attribute for a SkyFrame axis is zero, then
     * coordinates on that axis will be formatted as angles by default
     * (using degrees, minutes and seconds), otherwise they will be
     * formatted as times (using hours, minutes and seconds).
     * <p>
     * The default value of AsTime is chosen according to the sky
     * coordinate system being represented, as determined by the
     * SkyFrame's System attribute. This ensures, for example, that
     * right ascension values will be formatted as times by default,
     * following normal conventions.
     * <h4>Notes</h4>
     * <br> - The AsTime attribute operates by changing the default value of
     * the corresponding Format(axis) attribute. This, in turn, may
     * also affect the value of the Unit(axis) attribute.
     * <br> - Only the default style of formatting is affected by the AsTime
     * value. If an explicit Format(axis) value is set, it will
     * over-ride any effect from the AsTime attribute.
     *
     * @param  axis  index of the axis for which the attribute is to be got.
     *               Must be >= 1 and <= the value of the <code>Naxes</code>
     *               attribute.
     * @return       the AsTime attribute for the indicated axis of this object
     * @throws  IndexOutOfBoundsException  if <code>axis</code> is not in the
     *                                     range <code>1..Naxes</code>
     */
    public boolean getAsTime( int axis ) {
        int naxes = getNaxes();
        if ( axis >= 1 && axis <= naxes ) {
            return getB( "AsTime" + "(" + axis + ")" );
        }
        else {
            throw new IndexOutOfBoundsException(
                "axis value " + axis + " is not in the range 1.." + naxes );
        }
    }

    /**
     * Set 
     * format celestal coordinates as times by axis.  
     * This attribute specifies the default style of formatting to be
     * used (e.g. by astFormat) for the celestial coordinate values
     * described by a SkyFrame. It takes a separate boolean value for
     * each SkyFrame axis so that, for instance, the setting
     * "AsTime(2)=0" specifies the default formatting style for
     * celestial latitude values.
     * <p>
     * If the AsTime attribute for a SkyFrame axis is zero, then
     * coordinates on that axis will be formatted as angles by default
     * (using degrees, minutes and seconds), otherwise they will be
     * formatted as times (using hours, minutes and seconds).
     * <p>
     * The default value of AsTime is chosen according to the sky
     * coordinate system being represented, as determined by the
     * SkyFrame's System attribute. This ensures, for example, that
     * right ascension values will be formatted as times by default,
     * following normal conventions.
     * <h4>Notes</h4>
     * <br> - The AsTime attribute operates by changing the default value of
     * the corresponding Format(axis) attribute. This, in turn, may
     * also affect the value of the Unit(axis) attribute.
     * <br> - Only the default style of formatting is affected by the AsTime
     * value. If an explicit Format(axis) value is set, it will
     * over-ride any effect from the AsTime attribute.
     *
     * @param  axis  index of the axis for which the attribute is to be set.
     *               Must be >= 1 and <= the value of the <code>Naxes</code>
     *               attribute.
     * @param  asTime  the AsTime attribute for the indicated axis 
     *                of this object.
     * @throws  IndexOutOfBoundsException  if <code>axis</code> is not in the
     *                                     range <code>1..Naxes</code>
     */
    public void setAsTime( int axis, boolean asTime ) {
        int naxes = getNaxes();
        if ( axis >= 1 && axis <= naxes ) {
            setB( "AsTime" + "(" + axis + ")", asTime );
        }
        else {
            throw new IndexOutOfBoundsException( 
                "axis " + axis + " value is not in the range 1.." + naxes );
        }
    }

    /**
     * Get 
     * epoch of the mean equinox.  
     * This attribute is used to qualify those celestial coordinate
     * systems described by a SkyFrame which are notionally based on
     * the ecliptic (the plane of the Earth's orbit around the Sun)
     * and/or the Earth's equator.
     * <p>
     * Both of these planes are in motion and their positions are
     * difficult to specify precisely. In practice, therefore, a model
     * ecliptic and/or equator are used instead. These, together with
     * the point on the sky that defines the coordinate origin (the
     * intersection of the two planes termed the "mean equinox") move
     * with time according to some model which removes the more rapid
     * fluctuations. The SkyFrame class supports both the old FK4 and
     * the current FK5 models.
     * <p>
     * The position of a fixed source expressed in any of these
     * coordinate systems will appear to change with time due to
     * movement of the coordinate system itself (rather than motion of
     * the source).  Such coordinate systems must therefore be
     * qualified by a moment in time (the "epoch of the mean equinox"
     * or "equinox" for short) which allows the position of the model
     * coordinate system on the sky to be determined. This is the role
     * of the Equinox attribute.
     * <p>
     * The Equinox attribute is stored as a Modified Julian Date, but
     * when setting or getting its value you may use the same formats
     * as for the Epoch attribute (q.v.).
     * <p>
     * The default Equinox value is B1950.0 (Besselian) for the old
     * FK4-based coordinate systems (see the System attribute) and
     * J2000.0 (Julian) for all others.
     * <h4>Notes</h4>
     * <br> - Care must be taken to distinguish the Equinox value, which
     * relates to the definition of a time-dependent coordinate system
     * (based on solar system reference planes which are in motion),
     * from the superficially similar Epoch value. The latter is used
     * to qualify coordinate systems where the positions of sources
     * change with time (or appear to do so) for a variety of other
     * reasons, such as aberration of light caused by the observer's
     * motion, etc.
     * <br> - See the description of the System attribute for details of
     * which qualifying attributes apply to each celestial coordinate
     * system.
     *
     * @return  equinox  this object's Equinox attribute
     */
    public double getEquinox() {
        return getD( "Equinox" );
    }

    /**
     * Set 
     * epoch of the mean equinox.  
     * This attribute is used to qualify those celestial coordinate
     * systems described by a SkyFrame which are notionally based on
     * the ecliptic (the plane of the Earth's orbit around the Sun)
     * and/or the Earth's equator.
     * <p>
     * Both of these planes are in motion and their positions are
     * difficult to specify precisely. In practice, therefore, a model
     * ecliptic and/or equator are used instead. These, together with
     * the point on the sky that defines the coordinate origin (the
     * intersection of the two planes termed the "mean equinox") move
     * with time according to some model which removes the more rapid
     * fluctuations. The SkyFrame class supports both the old FK4 and
     * the current FK5 models.
     * <p>
     * The position of a fixed source expressed in any of these
     * coordinate systems will appear to change with time due to
     * movement of the coordinate system itself (rather than motion of
     * the source).  Such coordinate systems must therefore be
     * qualified by a moment in time (the "epoch of the mean equinox"
     * or "equinox" for short) which allows the position of the model
     * coordinate system on the sky to be determined. This is the role
     * of the Equinox attribute.
     * <p>
     * The Equinox attribute is stored as a Modified Julian Date, but
     * when setting or getting its value you may use the same formats
     * as for the Epoch attribute (q.v.).
     * <p>
     * The default Equinox value is B1950.0 (Besselian) for the old
     * FK4-based coordinate systems (see the System attribute) and
     * J2000.0 (Julian) for all others.
     * <h4>Notes</h4>
     * <br> - Care must be taken to distinguish the Equinox value, which
     * relates to the definition of a time-dependent coordinate system
     * (based on solar system reference planes which are in motion),
     * from the superficially similar Epoch value. The latter is used
     * to qualify coordinate systems where the positions of sources
     * change with time (or appear to do so) for a variety of other
     * reasons, such as aberration of light caused by the observer's
     * motion, etc.
     * <br> - See the description of the System attribute for details of
     * which qualifying attributes apply to each celestial coordinate
     * system.
     *
     * @param  equinox   the Equinox attribute of this object
     */
    public void setEquinox( double equinox ) {
       setD( "Equinox", equinox );
    }

    /**
     * Get 
     * index of the latitude axis.  
     * This read-only attribute gives the index (1 or 2) of the latitude 
     * axis within the SkyFrame (taking into account any current axis 
     * permutations).
     * 
     *
     * @return  latAxis  this object's LatAxis attribute
     */
    public int getLatAxis() {
        return getI( "LatAxis" );
    }

    /**
     * Get 
     * index of the longitude axis.  
     * This read-only attribute gives the index (1 or 2) of the longitude 
     * axis within the SkyFrame (taking into account any current axis 
     * permutations).
     * 
     *
     * @return  lonAxis  this object's LonAxis attribute
     */
    public int getLonAxis() {
        return getI( "LonAxis" );
    }

    /**
     * Get 
     * display negative longitude values.  
     * This attribute is a boolean value which controls how longitude values
     * are normalized for display by astNorm.
     * <p>
     * If the NegLon attribute is zero (the default), then normalized 
     * longitude values will be in the range zero to 2.pi. If NegLon is
     * non-zero, then normalized longitude values will be in the range -pi 
     * to pi. 
     * 
     *
     * @return  negLon  this object's NegLon attribute
     */
    public boolean getNegLon() {
        return getB( "NegLon" );
    }

    /**
     * Set 
     * display negative longitude values.  
     * This attribute is a boolean value which controls how longitude values
     * are normalized for display by astNorm.
     * <p>
     * If the NegLon attribute is zero (the default), then normalized 
     * longitude values will be in the range zero to 2.pi. If NegLon is
     * non-zero, then normalized longitude values will be in the range -pi 
     * to pi. 
     * 
     *
     * @param  negLon   the NegLon attribute of this object
     */
    public void setNegLon( boolean negLon ) {
       setB( "NegLon", negLon );
    }

    /**
     * Get 
     * sky projection description.  
     * This attribute provides a place to store a description of the
     * type of sky projection used when a SkyFrame is attached to a
     * 2-dimensional object, such as an image or plotting surface. For
     * example, typical values might be "orthographic", "Hammer-Aitoff"
     * or "cylindrical equal area".
     * <p>
     * The Projection value is purely descriptive and does not affect
     * the celestial coordinate system represented by the SkyFrame in
     * any way. If it is set to a non-blank string, the description
     * provided may be used when forming the default value for the
     * SkyFrame's Title attribute (so that typically it will appear in
     * graphical output, for instance). The default value is an empty
     * string.
     * 
     *
     * @return  projection  this object's Projection attribute
     */
    public String getProjection() {
        return getC( "Projection" );
    }

    /**
     * Set 
     * sky projection description.  
     * This attribute provides a place to store a description of the
     * type of sky projection used when a SkyFrame is attached to a
     * 2-dimensional object, such as an image or plotting surface. For
     * example, typical values might be "orthographic", "Hammer-Aitoff"
     * or "cylindrical equal area".
     * <p>
     * The Projection value is purely descriptive and does not affect
     * the celestial coordinate system represented by the SkyFrame in
     * any way. If it is set to a non-blank string, the description
     * provided may be used when forming the default value for the
     * SkyFrame's Title attribute (so that typically it will appear in
     * graphical output, for instance). The default value is an empty
     * string.
     * 
     *
     * @param  projection   the Projection attribute of this object
     */
    public void setProjection( String projection ) {
       setC( "Projection", projection );
    }

}
