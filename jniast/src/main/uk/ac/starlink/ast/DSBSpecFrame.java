/* ********************************************************
 * This file automatically generated by DSBSpecFrame.pl.
 *                   Do not edit.                         *
 **********************************************************/

package uk.ac.starlink.ast;


/**
 * Java interface to the AST DSBSpecFrame class
 *  - dual sideband spectral coordinate system description. 
 * A DSBSpecFrame is a specialised form of SpecFrame which represents 
 * positions in a spectrum obtained using a dual sideband instrument.
 * Such an instrument produces a spectrum in which each point contains 
 * contributions from two distinctly different frequencies, one from
 * the "lower side band" (LSB) and one from the "upper side band" (USB). 
 * Corresponding LSB and USB frequencies are connected by the fact
 * that they are an equal distance on either side of a fixed central
 * frequency known as the "Local Oscillator" (LO) frequency.
 * <p>
 * When quoting a position within such a spectrum, it is necessary to
 * indicate whether the quoted position is the USB position or the 
 * corresponding LSB position. The SideBand attribute provides this
 * indication.
 * <p>
 * In practice, the LO frequency is specified by giving the distance
 * from the LO frequency to some "central" spectral position. Typically 
 * this central position is that of some interesting spectral feature. 
 * The distance from this central position to the LO frequency is known 
 * as the "intermediate frequency" (IF). The value supplied for IF can
 * be a signed value in order to indicate whether the LO frequency is
 * above of below the central position.
 * 
 * 
 * @see  <a href='http://star-www.rl.ac.uk/cgi-bin/htxserver/sun211.htx/?xref_DSBSpecFrame'>AST DSBSpecFrame</a>  
 */
public class DSBSpecFrame extends SpecFrame {
    /** 
     * Creates a DSBSpecFrame.   
     * @throws  AstException  if an error occurred in the AST library
    */
    public DSBSpecFrame(  ) {
        construct(  );
    }
    private native void construct(  );

    /**
     * Get 
     * the central position of interest in a dual sideband spectrum.  
     * This attribute specifies the central position of interest in a dual 
     * sideband spectrum. Its sole use is to determine the local oscillator 
     * frequency (the frequency which marks the boundary between the lower 
     * and upper sidebands). See the description of the IF (intermediate
     * frequency) attribute for details of how the local oscillator frequency 
     * is calculated.
     * <p>
     * The value is accessed as a position in the spectral system
     * represented by the SpecFrame attributes inherited by this class, but
     * is stored internally as topocentric frequency. Thus, if the System
     * attribute of the DSBSpecFrame is set to "VRAD", the Unit attribute
     * set to "m/s" and the StdOfRest attribute set to "LSRK", then values
     * for the DSBCentre attribute should be supplied as radio velocity in
     * units of "m/s" relative to the kinematic LSR (alternative units may
     * be used by appending a suitable units string to the end of the value). 
     * This value is then converted to topocentric frequency and stored. If 
     * (say) the Unit attribute is subsequently changed to "km/s" before 
     * retrieving the current value of the DSBCentre attribute, the stored 
     * topocentric frequency will be converted back to LSRK radio velocity, 
     * this time in units of "km/s", before being returned.
     * <p>
     * The default value for this attribute is 30 GHz.
     * 
     *
     * @return  this object's DsbCentre attribute
     */
    public double getDsbCentre() {
        return getD( "DsbCentre" );
    }

    /**
     * Set 
     * the central position of interest in a dual sideband spectrum.  
     * This attribute specifies the central position of interest in a dual 
     * sideband spectrum. Its sole use is to determine the local oscillator 
     * frequency (the frequency which marks the boundary between the lower 
     * and upper sidebands). See the description of the IF (intermediate
     * frequency) attribute for details of how the local oscillator frequency 
     * is calculated.
     * <p>
     * The value is accessed as a position in the spectral system
     * represented by the SpecFrame attributes inherited by this class, but
     * is stored internally as topocentric frequency. Thus, if the System
     * attribute of the DSBSpecFrame is set to "VRAD", the Unit attribute
     * set to "m/s" and the StdOfRest attribute set to "LSRK", then values
     * for the DSBCentre attribute should be supplied as radio velocity in
     * units of "m/s" relative to the kinematic LSR (alternative units may
     * be used by appending a suitable units string to the end of the value). 
     * This value is then converted to topocentric frequency and stored. If 
     * (say) the Unit attribute is subsequently changed to "km/s" before 
     * retrieving the current value of the DSBCentre attribute, the stored 
     * topocentric frequency will be converted back to LSRK radio velocity, 
     * this time in units of "km/s", before being returned.
     * <p>
     * The default value for this attribute is 30 GHz.
     * 
     *
     * @param  dsbCentre   the DsbCentre attribute of this object
     */
    public void setDsbCentre( double dsbCentre ) {
       setD( "DsbCentre", dsbCentre );
    }

    /**
     * Get 
     * the intermediate frequency in a dual sideband spectrum.  
     * This attribute specifies the (topocentric) intermediate frequency in 
     * a dual sideband spectrum. Its sole use is to determine the local 
     * oscillator (LO) frequency (the frequency which marks the boundary 
     * between the lower and upper sidebands). The LO frequency is
     * equal to the sum of the centre frequency and the intermediate
     * frequency. Here, the "centre frequency" is the topocentric
     * frequency in Hz corresponding to the current value of the DSBCentre
     * attribute. The value of the IF attribute may be positive or
     * negative: a positive value results in the LO frequency being above
     * the central frequency, whilst a negative IF value results in the LO
     * frequency being below the central frequency.
     * <p>
     * When setting a new value for this attribute, the units in which the
     * frequency value is supplied may be indicated by appending a suitable 
     * string to the end of the formatted value. If the units are not 
     * specified, then the supplied value is assumed to be in units of GHz. 
     * For instance, the following strings all result in an IF of 4 GHz being 
     * used: "4.0", "4.0 GHz", "4.0E9 Hz", etc.
     * <p>
     * When getting the value of this attribute, the returned value is
     * always in units of GHz. The default value for this attribute is 4 GHz.
     * 
     *
     * @return  this object's If attribute
     */
    public double getIf() {
        return getD( "If" );
    }

    /**
     * Set 
     * the intermediate frequency in a dual sideband spectrum.  
     * This attribute specifies the (topocentric) intermediate frequency in 
     * a dual sideband spectrum. Its sole use is to determine the local 
     * oscillator (LO) frequency (the frequency which marks the boundary 
     * between the lower and upper sidebands). The LO frequency is
     * equal to the sum of the centre frequency and the intermediate
     * frequency. Here, the "centre frequency" is the topocentric
     * frequency in Hz corresponding to the current value of the DSBCentre
     * attribute. The value of the IF attribute may be positive or
     * negative: a positive value results in the LO frequency being above
     * the central frequency, whilst a negative IF value results in the LO
     * frequency being below the central frequency.
     * <p>
     * When setting a new value for this attribute, the units in which the
     * frequency value is supplied may be indicated by appending a suitable 
     * string to the end of the formatted value. If the units are not 
     * specified, then the supplied value is assumed to be in units of GHz. 
     * For instance, the following strings all result in an IF of 4 GHz being 
     * used: "4.0", "4.0 GHz", "4.0E9 Hz", etc.
     * <p>
     * When getting the value of this attribute, the returned value is
     * always in units of GHz. The default value for this attribute is 4 GHz.
     * 
     *
     * @param  ifreq   the If attribute of this object
     */
    public void setIf( double ifreq ) {
       setD( "If", ifreq );
    }

    /**
     * Get 
     * indicates which sideband a dual sideband spectrum represents.  
     * This attribute indicates whether the DSBSpecFrame currently
     * represents its lower or upper sideband. It may take one of the
     * values "lower" or "upper" (case insensitive). The default value is
     * "upper".
     * 
     *
     * @return  this object's SideBand attribute
     */
    public String getSideBand() {
        return getC( "SideBand" );
    }

    /**
     * Set 
     * indicates which sideband a dual sideband spectrum represents.  
     * This attribute indicates whether the DSBSpecFrame currently
     * represents its lower or upper sideband. It may take one of the
     * values "lower" or "upper" (case insensitive). The default value is
     * "upper".
     * 
     *
     * @param  sideBand   the SideBand attribute of this object
     */
    public void setSideBand( String sideBand ) {
       setC( "SideBand", sideBand );
    }

}
