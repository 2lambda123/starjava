/* ********************************************************
 * This file automatically generated by /d2/starjava/java/source/jniast/src/perl/XmlChan.pl
 * Do not edit
 **********************************************************/

package uk.ac.starlink.ast;

import java.io.InputStream;
import java.io.OutputStream;

/**
 * Java interface to the AST XmlChan class
 *  - I/O Channel using XML to represent Objects. 
 * A XmlChan is a specialised form of Channel which supports XML I/O
 * operations. Writing an Object to an XmlChan (using
 * astWrite) will, if the Object is suitable, generate an
 * XML description of that Object, and reading from an XmlChan will 
 * create a new Object from its XML description.
 * <p>
 * Normally, when you use an XmlChan, you should provide "source"
 * and "sink" functions which connect it to an external data store
 * by reading and writing the resulting XML text. These functions
 * should perform any conversions needed between external character 
 * encodings and the internal ASCII encoding. If no such functions 
 * are supplied, a Channel will read from standard input and write 
 * to standard output.
 * 
 * 
 * @see  <a href='http://star-www.rl.ac.uk/cgi-bin/htxserver/sun211.htx/?xref_XmlChan'>AST XmlChan</a> 
 * @author   Mark Taylor (Starlink) 
 */
public class XmlChan extends Channel {

    /**
     * Creates a channel which reads from the given <code>InputStream</code>
     * and writes to the given <code>OutputStream</code>.
     *
     * @param   in   a stream to read AST objects from.  If <code>null</code>,
     *               then <code>System.in</code> is used.
     * @param   out  a stream to write AST objects to.  If <code>null</code>,
     *               then <code>System.out</code> is used.
     */
    public XmlChan( InputStream in, OutputStream out ) {
        super( in, out );
    }

    /**
     * This constructor does not do all the required construction to
     * create a valid XmlChan object, but is required for inheritance
     * by user subclasses of XmlChan.
     */
    protected XmlChan() {
        super();
    }

    /**
     * Get 
     * controls output of indentation and line feeds.  
     * This attribute controls the appearance of the XML produced when an
     * AST object is written to an XmlChan. If it is non-zero, then extra
     * linefeed characters will be inserted as necessary to ensure that each 
     * XML tag starts on a new line, and each tag will be indented to show 
     * its depth in the containment hierarchy. If XmlIndent is zero (the
     * default), then no linefeeds or indentation strings will be added to
     * output text.
     * 
     *
     * @return  xmlIndent  this object's XmlIndent attribute
     */
    public boolean getXmlIndent() {
        return getB( "XmlIndent" );
    }

    /**
     * Set 
     * controls output of indentation and line feeds.  
     * This attribute controls the appearance of the XML produced when an
     * AST object is written to an XmlChan. If it is non-zero, then extra
     * linefeed characters will be inserted as necessary to ensure that each 
     * XML tag starts on a new line, and each tag will be indented to show 
     * its depth in the containment hierarchy. If XmlIndent is zero (the
     * default), then no linefeeds or indentation strings will be added to
     * output text.
     * 
     *
     * @param  xmlIndent   the XmlIndent attribute of this object
     */
    public void setXmlIndent( boolean xmlIndent ) {
       setB( "XmlIndent", xmlIndent );
    }

    /**
     * Get 
     * controls output buffer length.  
     * This attribute specifies the maximum length to use when writing out 
     * text through the sink function supplied when the XmlChan was created.
     * <p>
     * The number of characters in each string written out through the sink 
     * function will not be greater than the value of this attribute (but
     * may be less). A value of zero (the default) means there is no limit - 
     * each string can be of any length.
     * <p>
     * 
     *
     * @return  xmlLength  this object's XmlLength attribute
     */
    public int getXmlLength() {
        return getI( "XmlLength" );
    }

    /**
     * Set 
     * controls output buffer length.  
     * This attribute specifies the maximum length to use when writing out 
     * text through the sink function supplied when the XmlChan was created.
     * <p>
     * The number of characters in each string written out through the sink 
     * function will not be greater than the value of this attribute (but
     * may be less). A value of zero (the default) means there is no limit - 
     * each string can be of any length.
     * <p>
     * 
     *
     * @param  xmlLength   the XmlLength attribute of this object
     */
    public void setXmlLength( int xmlLength ) {
       setI( "XmlLength", xmlLength );
    }

}
